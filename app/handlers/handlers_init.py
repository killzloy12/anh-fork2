#!/usr/bin/env python3
"""
üéõÔ∏è HANDLERS INIT v2.0
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Enhanced Telegram Bot
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker
from aiogram.filters import CommandStart, Command
from datetime import datetime

logger = logging.getLogger(__name__)


def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    router = Router()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if modules['db']:
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False)
            })
        
        welcome_text = (
            "üöÄ <b>Enhanced Telegram Bot v2.0</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
            "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "ü§ñ /ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
            "‚Çø /crypto bitcoin - –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "üìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üìà /chart activity - –ì—Ä–∞—Ñ–∏–∫–∏\n"
            "üé≠ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
            "üõ°Ô∏è –£–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
            "üí° /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚ÑπÔ∏è /about - –û –±–æ—Ç–µ"
        )
        
        await message.answer(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, message.chat.id, 'start_command'
            )
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ Enhanced Telegram Bot v2.0</b>\n\n"
            "ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫:</b>\n"
            "/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI\n"
            "/memory_clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
            "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
            "/crypto bitcoin - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
            "/crypto_trending - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n\n"
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
            "/stats - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/dashboard - –î–µ—Ç–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥\n"
            "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏:</b>\n"
            "/chart activity - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "/chart emotions - –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π\n\n"
            "üé≠ <b>–°—Ç–∏–∫–µ—Ä—ã:</b>\n"
            "/sticker_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
            "/emotions - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
            "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω—ã):</b>\n"
            "/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "/ban [ID] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/warn [ID] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "/about - –û –±–æ—Ç–µ\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        )
        
        await message.answer(help_text)
    
    @router.message(Command('about'))
    async def about_handler(message: Message):
        about_text = (
            "‚ÑπÔ∏è <b>Enhanced Telegram Bot v2.0</b>\n\n"
            "üéØ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, "
            "–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
            "‚ö° <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            "‚Ä¢ Python 3.11+ —Å aiogram 3.8\n"
            "‚Ä¢ AI: OpenAI GPT-4 + Anthropic Claude-3\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite —Å WAL —Ä–µ–∂–∏–º–æ–º\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: CoinGecko API\n"
            "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: matplotlib\n\n"
            "üß© <b>–ú–æ–¥—É–ª–∏:</b>\n"
            "‚Ä¢ Memory Module - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å\n"
            "‚Ä¢ Behavior Module - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ Analytics Module - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ Moderation Module - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            "‚Ä¢ Crypto Module - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ Stickers Module - –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
            "‚Ä¢ Charts Module - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now().strftime('%H:%M:%S')}\n"
            "üîß <b>–í–µ—Ä—Å–∏—è:</b> 2.0 Complete Edition"
        )
        
        await message.answer(about_text)
    
    @router.message(Command('status'))
    async def status_handler(message: Message):
        user = message.from_user
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
        status_parts = []
        status_parts.append("üî• <b>–°—Ç–∞—Ç—É—Å Enhanced Telegram Bot v2.0</b>\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏
        modules_status = []
        
        if modules.get('ai'):
            ai_stats = modules['ai'].get_usage_stats()
            modules_status.append(f"üß† AI: ‚úÖ ({ai_stats.get('daily_usage', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        else:
            modules_status.append("üß† AI: ‚ùå")
        
        if modules.get('crypto_service'):
            modules_status.append("‚Çø Crypto: ‚úÖ")
        else:
            modules_status.append("‚Çø Crypto: ‚ùå")
        
        if modules.get('analytics_service'):
            modules_status.append("üìä Analytics: ‚úÖ")
        else:
            modules_status.append("üìä Analytics: ‚ùå")
        
        if modules.get('memory'):
            modules_status.append("üß† Memory: ‚úÖ")
        else:
            modules_status.append("üß† Memory: ‚ùå")
        
        status_parts.append("\n".join(modules_status))
        
        status_parts.append(f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        status_parts.append(f"üë§ <b>–í–∞—à ID:</b> {user.id}")
        
        await message.answer("\n\n".join(status_parts))
    
    # AI –∫–æ–º–∞–Ω–¥—ã
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not modules.get('ai'):
            await message.answer("‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ.")
            return
        
        user_message = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "/ai "
        if not user_message:
            await message.answer("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n–ü—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ Python")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
            context = {}
            if modules.get('memory'):
                memory_context = await modules['memory'].get_context(message.from_user.id, message.chat.id)
                context.update(memory_context)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            if modules.get('behavior'):
                behavior_analysis = await modules['behavior'].analyze_user_behavior(
                    message.from_user.id, message.chat.id, user_message, context
                )
                context['behavior_analysis'] = behavior_analysis
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await modules['ai'].generate_response(
                user_message, message.from_user.id, context
            )
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if modules.get('behavior') and context.get('behavior_analysis'):
                response = await modules['behavior'].adapt_response(
                    message.from_user.id, response, context['behavior_analysis']
                )
            
            await message.answer(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
            if modules.get('memory'):
                await modules['memory'].add_interaction(
                    message.from_user.id, message.chat.id, 
                    user_message, response
                )
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
            if modules.get('behavior'):
                await modules['behavior'].learn_from_interaction(
                    message.from_user.id, message.chat.id, 
                    user_message, response
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @router.message(Command('memory_clear'))
    async def memory_clear_handler(message: Message):
        if not modules.get('memory'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = await modules['memory'].clear_user_memory(
            message.from_user.id, message.chat.id
        )
        
        if success:
            await message.answer("üóëÔ∏è –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
    
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not modules.get('crypto'):
            await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        coin_query = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/crypto "
        if not coin_query:
            await message.answer("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /crypto [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã]\n–ü—Ä–∏–º–µ—Ä: /crypto bitcoin")
            return
        
        crypto_data = await modules['crypto'].handle_crypto_request(
            message.from_user.id, coin_query
        )
        
        if crypto_data.get('error'):
            await message.answer(f"‚ùå {crypto_data['message']}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = [
            f"‚Çø <b>{crypto_data['coin_name']} ({crypto_data['symbol']})</b>\n",
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {crypto_data['price']}",
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {crypto_data['change_24h_formatted']} {crypto_data['trend_emoji']}",
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{crypto_data['market_cap_rank']}",
            f"üíé <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> {crypto_data['market_cap']}",
            f"üì¶ <b>–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤:</b> {crypto_data['volume_24h']}",
            f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {crypto_data['last_updated']}\n",
            f"üìà <b>–ê–Ω–∞–ª–∏–∑:</b> {crypto_data['price_analysis']}"
        ]
        
        await message.answer("\n".join(response_parts))
    
    @router.message(Command('crypto_trending'))
    async def crypto_trending_handler(message: Message):
        if not modules.get('crypto'):
            await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        trending_data = await modules['crypto'].get_trending_crypto()
        
        if trending_data.get('error'):
            await message.answer(f"‚ùå {trending_data['message']}")
            return
        
        response_parts = ["üî• <b>–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"]
        
        for i, coin in enumerate(trending_data['trending_coins'], 1):
            response_parts.append(
                f"{i}. <b>{coin['name']} ({coin['symbol']})</b>\n"
                f"   üí∞ {coin['price']} ({coin['change_24h']})\n"
                f"   üèÜ #{coin['market_cap_rank']} | üíé {coin['market_cap']}"
            )
        
        response_parts.append(f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {trending_data['update_time']}")
        
        await message.answer("\n\n".join(response_parts))
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not modules.get('analytics'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        dashboard = await modules['analytics'].get_user_dashboard(message.from_user.id)
        
        if dashboard.get('error'):
            await message.answer(f"‚ùå {dashboard['error']}")
            return
        
        basic_stats = dashboard.get('basic_stats', {})
        
        response_parts = [
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}</b>\n",
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {basic_stats.get('message_count', 0)}",
            f"üìè <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:</b> {basic_stats.get('avg_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤",
            f"‚ö° <b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {dashboard.get('activity_level', 'unknown')}",
            f"üéØ <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b> {int(dashboard.get('engagement_score', 0) * 100)}%",
            f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {basic_stats.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã
        insights = dashboard.get('insights', [])
        if insights:
            response_parts.append("<b>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>")
            for insight in insights:
                response_parts.append(f"‚Ä¢ {insight}")
        
        await message.answer("\n".join(response_parts))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        sticker = message.sticker
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä
        if modules.get('stickers'):
            sticker_data = {
                'file_id': sticker.file_id,
                'set_name': sticker.set_name,
                'emoji': sticker.emoji,
                'is_animated': sticker.is_animated,
                'is_video': sticker.is_video
            }
            
            analysis = await modules['stickers'].analyze_sticker(
                message.from_user.id, message.chat.id, sticker_data
            )
            
            if not analysis.get('error'):
                emotion = analysis.get('emotion', 'neutral')
                if emotion != 'neutral':
                    emotion_responses = {
                        'happy': 'üòä –í–∏–∂—É, —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!',
                        'sad': 'üò¢ –ù–∞–¥–µ—é—Å—å, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!',
                        'angry': 'üò§ –ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏',
                        'love': 'üíï –õ—é–±–æ–≤—å - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!',
                        'thinking': 'ü§î –û —á–µ–º –∑–∞–¥—É–º–∞–ª–∏—Å—å?'
                    }
                    
                    response = emotion_responses.get(emotion, 'üëç –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!')
                    await message.answer(response)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                message.from_user.id, message.chat.id, 'sticker_sent',
                {'emoji': sticker.emoji, 'set_name': sticker.set_name}
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @router.message(F.text)
    async def text_handler(message: Message):
        user = message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if modules.get('db'):
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'first_name': user.first_name,
                'last_name': user.last_name
            })
            
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': message.chat.id,
                'text': message.text,
                'message_type': 'text'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if modules.get('moderation'):
            moderation_result = await modules['moderation'].check_message(
                user.id, message.chat.id, message.text
            )
            
            if moderation_result['action'] != 'allow':
                action = moderation_result['action']
                reason = moderation_result['reason']
                
                if action == 'delete':
                    try:
                        await message.delete()
                        await message.answer(f"üõ°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {reason}")
                    except:
                        await message.answer(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
                elif action == 'warn':
                    warnings = moderation_result.get('user_warnings', 0)
                    await message.answer(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warnings}): {reason}")
                elif action == 'timeout':
                    await message.answer(f"üïê –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {reason}")
                
                return
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, message.chat.id, 'message_sent',
                {'text_length': len(message.text)}
            )
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        import random
        if (modules.get('config') and 
            random.random() < modules['config'].bot.random_reply_chance):
            
            random_responses = [
                "üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
                "ü§î –ü–æ–Ω–∏–º–∞—é",
                "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                "üí≠ –•–æ—Ä–æ—à–∞—è –º—ã—Å–ª—å",
                "üéØ –°–æ–≥–ª–∞—Å–µ–Ω"
            ]
            
            await message.answer(random.choice(random_responses))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üéõÔ∏è –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


__all__ = ["register_all_handlers"]