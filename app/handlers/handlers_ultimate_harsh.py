#!/usr/bin/env python3
"""
üíÄ HANDLERS v3.0 - –ì–†–£–ë–´–ô –ë–û–¢
üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∂–µ—Å—Ç–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω–æ "–ë–æ—Ç:" –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ üíÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–†–£–ë–´–ô —Å—Ç–∏–ª—å 
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω–æ "–î—É–º–∞—é..." –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏
‚Ä¢ üîí –ê–¥–º–∏–Ω–∫–∞ –¢–û–õ–¨–ö–û –≤ –õ–° –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ üìù ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã
‚Ä¢ üí¨ –í–°–ï –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –†–ï–ü–õ–ê–ï–ú
‚Ä¢ üéØ –û—Ç–≤–µ—Ç—ã –Ω–∞ @ –∏ –∫–æ–º–∞–Ω–¥—ã –†–ï–ü–õ–ê–ï–ú
"""

import logging
import re
import asyncio
import random
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

# –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´ (ID –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –∂–µ—Å—Ç–∫–æ)
ALLOWED_CHAT_IDS = []  # –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞


def register_all_handlers(dp, modules):
    """üíÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ì–†–£–ë–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    global ALLOWED_CHAT_IDS
    
    router = Router()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if modules.get('config') and hasattr(modules['config'].bot, 'allowed_chat_ids'):
        ALLOWED_CHAT_IDS = modules['config'].bot.allowed_chat_ids
        print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –¢–û–õ–¨–ö–û –í –ß–ê–¢–ê–•: {ALLOWED_CHAT_IDS}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
        except:
            pass
    
    asyncio.create_task(get_bot_info())
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ê–¢–û–í
        if not check_chat_allowed(chat_id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        # –í –õ–° –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.reply(f"–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}")
                return
        
        await save_user_and_message(message, modules)
        
        if message.chat.type == 'private':
            # –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨ –í –õ–°
            welcome_text = (
                f"<b>–ë–û–¢ v3.0 - –ê–î–ú–ò–ù–ö–ê</b>\n\n"
                f"–ê–¥–º–∏–Ω: {user.first_name}\n\n"
                f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                f"/moderation - –ú–æ–¥–µ—Ä–∞—Ü–∏—è\n"
                f"/triggers - –¢—Ä–∏–≥–≥–µ—Ä—ã\n" 
                f"/permissions - –î–æ—Å—Ç—É–ø\n"
                f"/chats - –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
                f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"<b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            for chat_id in ALLOWED_CHAT_IDS:
                welcome_text += f"‚Ä¢ {chat_id}\n"
                
        else:
            # –î–õ–Ø –ì–†–£–ü–ü - –ö–û–†–û–¢–ö–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
            welcome_text = (
                f"<b>–ë–û–¢ v3.0</b>\n\n"
                f"{user.first_name}, —Ä–∞–±–æ—Ç–∞—é —Ç—É—Ç.\n\n"
                f"/help - –∫–æ–º–∞–Ω–¥—ã"
            )
        
        await message.reply(welcome_text)
        
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(user.id, chat_id, 'start_command')
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
                return
            # –ê–î–ú–ò–ù–°–ö–ê–Ø –°–ü–†–ê–í–ö–ê
            help_text = (
                "<b>–ê–î–ú–ò–ù–ö–ê</b>\n\n"
                "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                "/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "/permissions - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
                "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
                "/chats - ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
                "<b>–¢—Ä–∏–≥–≥–µ—Ä—ã:</b>\n"
                "/trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø]\n"
                "/trigger_list - –°–ø–∏—Å–æ–∫\n"
                "/trigger_del [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å\n\n"
                "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                "/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/dashboard - –î–µ—Ç–∞–ª–∏\n"
                "/export - –≠–∫—Å–ø–æ—Ä—Ç\n\n"
                "<b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                "/status - –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π"
            )
        else:
            # –û–ë–´–ß–ù–ê–Ø –°–ü–†–ê–í–ö–ê –ë–ï–ó –ê–î–ú–ò–ù–ö–ò
            help_text = (
                "<b>–ë–û–¢ v3.0</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/ai - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
                "/crypto - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
                "/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "<b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
                f"@{bot_info.username if bot_info else 'bot'} - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "–ù–∞–ø–∏—à–∏ '–±–æ—Ç' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )
            
        await message.reply(help_text)
    
    @router.message(Command('chats'))
    async def chats_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´ –í –õ–°
        if message.chat.type != 'private' or message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≤ –õ–°.")
            return
        
        chats_text = "<b>–†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´:</b>\n\n"
        
        for i, chat_id in enumerate(ALLOWED_CHAT_IDS, 1):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –æ —á–∞—Ç–µ
            try:
                chat_info = await modules['bot'].get_chat(chat_id)
                chat_name = chat_info.title or chat_info.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                chats_text += f"{i}. <code>{chat_id}</code>\n   {chat_name}\n\n"
            except:
                chats_text += f"{i}. <code>{chat_id}</code>\n   (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n\n"
        
        if not ALLOWED_CHAT_IDS:
            chats_text += "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n–ù–∞—Å—Ç—Ä–æ–π ALLOWED_CHAT_IDS –≤ .env"
        
        await message.reply(chats_text)
    
    @router.message(Command('about'))
    async def about_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        about_text = (
            "<b>–ë–û–¢ v3.0 - –ì–†–£–ë–ê–Ø –í–ï–†–°–ò–Ø</b>\n\n"
            "–ñ–µ—Å—Ç–∫–∏–π –±–æ—Ç –±–µ–∑ —Å–æ–ø–ª–µ–π.\n\n"
            "<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            "‚Ä¢ Python 3.11 + aiogram 3.8\n"
            "‚Ä¢ AI: GPT-4 + Claude\n"
            "‚Ä¢ SQLite —Å WAL\n\n"
            "<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö\n"
            "‚Ä¢ –ê–¥–º–∏–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°\n"
            "‚Ä¢ –ì—Ä—É–±—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚Ä¢ –ñ–µ—Å—Ç–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            "‚Ä¢ –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Ä–µ–ø–ª–∞–µ–º\n\n"
            f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}\n"
            "<b>–í–µ—Ä—Å–∏—è:</b> 3.0 –ì—Ä—É–±–∞—è"
        )
        
        await message.reply(about_text)
    
    @router.message(Command('status'))
    async def status_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        status_text = await generate_harsh_status_text(message.from_user, modules)
        await message.reply(status_text)
    
    # =================== AI –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('ai'):
            await message.reply("AI –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "<b>AI:</b>\n\n"
                "/ai [–≤–æ–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python\n"
                "/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω"
            )
            return
        
        await process_harsh_ai_request(message, user_message, modules)
    
    @router.message(Command('memory_clear'))
    async def memory_clear_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if not modules.get('memory'):
            await message.reply("–ü–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        success = await modules['memory'].clear_user_memory(
            message.from_user.id, message.chat.id
        )
        
        await message.reply("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞." if success else "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏.")
    
    # =================== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('crypto'):
            await message.reply("–ö—Ä–∏–ø—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.reply(
                "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/crypto bitcoin\n"
                "/crypto BTC"
            )
            return
        
        await process_crypto_request(message, coin_query, modules)
    
    # =================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        await process_user_stats(message, modules)
    
    # =================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–¢–û–õ–¨–ö–û –õ–°) ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
            
        await process_moderation_settings(message, modules)
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_triggers_command(message, modules)
    
    @router.message(Command('trigger_add'))
    async def trigger_add_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_add(message, modules)
    
    @router.message(Command('trigger_del'))
    async def trigger_del_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_delete(message, modules)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_list(message, modules)
    
    @router.message(Command('permissions'))
    async def permissions_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –õ–°.")
            return
            
        await process_permissions_command(message, modules)
    
    @router.message(Command('dashboard'))
    async def dashboard_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_user_dashboard(message, modules)
    
    @router.message(Command('export'))
    async def export_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_data_export(message, modules)
    
    # –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò –í –ì–†–£–ü–ü–ê–• (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´)
    @router.message(Command('ban'))
    async def ban_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type == 'private':
            await message.reply("–¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_ban_command(message, modules)
    
    @router.message(Command('mute'))
    async def mute_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type == 'private':
            await message.reply("–¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_mute_command(message, modules)
    
    @router.message(Command('warn'))
    async def warn_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type == 'private':
            await message.reply("–¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_warn_command(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_sticker(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ü–õ–ê–ï–í ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞—é—Ç –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_reply_to_bot(message, modules)
        else:
            await process_smart_text(message, modules, bot_info)
    
    # =================== –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===================
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üíÄ –ì–†–£–ë–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

def check_chat_allowed(chat_id: int) -> bool:
    """üîí –ñ–ï–°–¢–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    
    if not ALLOWED_CHAT_IDS:
        return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    
    return chat_id in ALLOWED_CHAT_IDS

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        user = message.from_user
        
        if modules.get('db'):
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False)
            })
            
            await modules['db'].save_chat({
                'id': message.chat.id,
                'type': message.chat.type,
                'title': message.chat.title,
                'username': message.chat.username
            })
            
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': message.chat.id,
                'text': message.text or '',
                'message_type': 'text' if message.text else 'other'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def process_harsh_ai_request(message: Message, user_message: str, modules):
    """ü§ñ –ì–†–£–ë–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI - –ë–ï–ó '–ë–æ—Ç:' –∏ '–î—É–º–∞—é...'"""
    
    try:
        # –ù–ò–ö–ê–ö–ò–• "–î—É–º–∞—é..." —Å–æ–æ–±—â–µ–Ω–∏–π!
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
        context = {}
        if modules.get('memory'):
            memory_context = await modules['memory'].get_context(
                message.from_user.id, message.chat.id
            )
            context.update(memory_context)
        
        # –ì–†–£–ë–ê–Ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI
        context['style_instruction'] = (
            "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–æ–≤ –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏. "
            "–ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –∂–µ—Å—Ç–∫–æ, –∫–∞–∫ –∑–ª–æ–π –∞–¥–º–∏–Ω. –ù–∏–∫–∞–∫–∏—Ö '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', "
            "'–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã' –∏ –ø–æ–¥–æ–±–Ω–æ–π —Ö—Ä–µ–Ω–∏. –ö–æ—Ä–æ—Ç–∫–∏–π, —á–µ—Ç–∫–∏–π, –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç. "
            "–ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –≤–µ–∂–ª–∏–≤—ã—Ö —Ñ—Ä–∞–∑. –°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–µ—Ñ–∏–∫—Å "–ë–æ—Ç:" –µ—Å–ª–∏ –µ—Å—Ç—å
        if response.startswith("–ë–æ—Ç:"):
            response = response[4:].strip()
        
        # –ì–†–£–ë–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        response = clean_harsh_response(response)
        
        # –û–¢–í–ï–ß–ê–ï–ú –†–ï–ü–õ–ê–ï–ú!
        await message.reply(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        if modules.get('memory'):
            await modules['memory'].add_interaction(
                message.from_user.id, message.chat.id, 
                user_message, response
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        await message.reply("AI —Å–¥–æ—Ö.")

def clean_harsh_response(response: str) -> str:
    """üßπ –ì–†–£–ë–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI"""
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã
    bad_phrases = [
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã", 
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å",
        "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ",
        "–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
        "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å",
        "–£–¥–∞—á–∏ –≤–∞–º",
        "–í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ",
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å",
        "–ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥",
        "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å"
    ]
    
    cleaned = response
    for phrase in bad_phrases:
        if phrase in cleaned:
            parts = cleaned.split(phrase)
            cleaned = parts[0].rstrip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–º–∞–π–ª—ã
    emoji_pattern = r'[üòäüòÑüòÉüòÜüòÅü§óüéâ‚ú®üí´‚≠êüåüüí°üî•üëçüëåüéØüìöüîçüí≠ü§îüòåüòáü•∞üòçü§©]+$'
    cleaned = re.sub(emoji_pattern, '', cleaned).strip()
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ
    polite_starts = ["–ö–æ–Ω–µ—á–Ω–æ", "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ", "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º", "–†–∞–∑—É–º–µ–µ—Ç—Å—è"]
    for start in polite_starts:
        if cleaned.startswith(start):
            cleaned = cleaned[len(start):].lstrip(", ")
    
    return cleaned.strip()

async def process_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    
    try:
        user = message.from_user
        text = message.text.lower()
        
        await save_user_and_message(message, modules)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        if modules.get('triggers'):
            trigger_response = await modules['triggers'].check_message_triggers(
                message.text, message.chat.id, user.id
            )
            if trigger_response:
                await message.reply(trigger_response)
                return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        moderation_action = await check_moderation(message, modules)
        if moderation_action:
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
        should_respond = await check_bot_mentions(message, bot_info)
        
        if should_respond:
            await process_harsh_smart_response(message, modules)
        else:
            await process_random_responses(message, modules)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, message.chat.id, 'message_sent',
                {'text_length': len(message.text), 'has_mention': should_respond}
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def check_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        if bot_info and bot_info.first_name.lower() in text:
            return True
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        bot_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫']
        if any(keyword in text for keyword in bot_keywords):
            return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if '?' in message.text and len(message.text) > 15:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def process_harsh_smart_response(message: Message, modules):
    """üí° –ì–†–£–ë–´–ô —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    
    try:
        if modules.get('ai'):
            await process_harsh_ai_request(message, message.text, modules)
        else:
            # –ì—Ä—É–±—ã–µ –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
            harsh_responses = [
                "–ß—Ç–æ?",
                "AI –æ—Ç–∫–ª—é—á–µ–Ω.",
                "–ù–∞—Å—Ç—Ä–æ–π API –∫–ª—é—á–∏.",
                "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
                "–°–ª–æ–º–∞–Ω–æ."
            ]
            
            await message.reply(random.choice(harsh_responses))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

async def process_reply_to_bot(message: Message, modules):
    """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞"""
    
    try:
        if modules.get('ai'):
            context_message = f"–ù–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.reply_to_message.text}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: '{message.text}'"
            await process_harsh_ai_request(message, context_message, modules)
        else:
            await message.reply("–ü–æ–Ω—è–ª.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–ª–∞—è: {e}")

async def check_moderation(message: Message, modules) -> bool:
    """üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è"""
    
    try:
        if not modules.get('moderation'):
            return False
            
        moderation_result = await modules['moderation'].check_message(
            message.from_user.id, message.chat.id, message.text
        )
        
        if moderation_result['action'] != 'allow':
            action = moderation_result['action']
            reason = moderation_result['reason']
            
            if action == 'delete':
                try:
                    await message.delete()
                    await message.reply(f"–£–¥–∞–ª–µ–Ω–æ: {reason}")
                except:
                    await message.reply(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
            elif action == 'warn':
                warnings = moderation_result.get('user_warnings', 0)
                await message.reply(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}: {reason}")
            elif action == 'timeout':
                await message.reply(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {reason}")
            
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

async def process_random_responses(message: Message, modules):
    """üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    
    try:
        if (modules.get('config') and 
            random.random() < 0.005):  # –û—á–µ–Ω—å —Ä–µ–¥–∫–æ
            
            harsh_responses = [
                "–ê–≥–∞.",
                "–ü–æ–Ω—è—Ç–Ω–æ.",
                "–Ø—Å–Ω–æ.",
                "–û–∫–µ–π."
            ]
            
            await message.reply(random.choice(harsh_responses))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")

async def generate_harsh_status_text(user, modules) -> str:
    """üìä –ì–†–£–ë–´–ô —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    
    status_parts = ["<b>–ë–û–¢ v3.0 - –°–¢–ê–¢–£–°</b>\n"]
    
    modules_status = []
    
    if modules.get('ai'):
        try:
            ai_stats = modules['ai'].get_usage_stats()
            modules_status.append(f"AI: –†–∞–±–æ—Ç–∞–µ—Ç ({ai_stats.get('daily_usage', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        except:
            modules_status.append("AI: –ï—Å—Ç—å –∫–æ—Å—è–∫–∏")
    else:
        modules_status.append("AI: –û—Ç–∫–ª—é—á–µ–Ω")
    
    if modules.get('crypto'):
        modules_status.append("Crypto: –†–∞–±–æ—Ç–∞–µ—Ç")
    else:
        modules_status.append("Crypto: –û—Ç–∫–ª—é—á–µ–Ω")
    
    if modules.get('triggers'):
        try:
            trigger_stats = await modules['triggers'].get_trigger_statistics()
            total = trigger_stats.get('total_triggers', 0)
            modules_status.append(f"Triggers: {total} —à—Ç—É–∫")
        except:
            modules_status.append("Triggers: –†–∞–±–æ—Ç–∞–µ—Ç")
    else:
        modules_status.append("Triggers: –û—Ç–∫–ª—é—á–µ–Ω")
    
    other = ['analytics', 'memory', 'permissions', 'moderation']
    for module in other:
        status = "–†–∞–±–æ—Ç–∞–µ—Ç" if modules.get(module) else "–û—Ç–∫–ª—é—á–µ–Ω"
        modules_status.append(f"{module.title()}: {status}")
    
    status_parts.append("\n".join(modules_status))
    
    status_parts.append(f"\n<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    status_parts.append(f"<b>ID:</b> {user.id}")
    status_parts.append(f"<b>–†–æ–ª—å:</b> {'–ê–¥–º–∏–Ω' if user.id in modules['config'].bot.admin_ids else '–Æ–∑–µ—Ä'}")
    status_parts.append(f"<b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> {len(ALLOWED_CHAT_IDS)}")
    
    return "\n\n".join(status_parts)

# =================== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ===================

async def process_crypto_request(message, coin_query, modules): 
    await message.reply("–ö—Ä–∏–ø—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_user_stats(message, modules): 
    await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_user_dashboard(message, modules): 
    await message.reply("–î–∞—à–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_data_export(message, modules): 
    await message.reply("–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_sticker(message, modules): 
    await message.reply("–°—Ç–∏–∫–µ—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_triggers_command(message, modules): 
    await message.reply("–¢—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_add(message, modules): 
    await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_delete(message, modules): 
    await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_list(message, modules): 
    await message.reply("–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_moderation_settings(message, modules): 
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_ban_command(message, modules): 
    await message.reply("–ë–∞–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_mute_command(message, modules): 
    await message.reply("–ú—É—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_warn_command(message, modules): 
    await message.reply("–í–∞—Ä–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_permissions_command(message, modules): 
    await message.reply("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


__all__ = ["register_all_handlers"]