#!/usr/bin/env python3
"""
üéõÔ∏è HANDLERS v3.0 - –ü–ê–¶–ê–ù–°–ö–ò–ô –°–¢–ò–õ–¨
üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–º–∞–π–ª–æ–≤ –∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ help

–ò–ó–ú–ï–ù–ï–ù–ò–Ø:
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω–æ "–î—É–º–∞—é..." –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏ AI
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ —Å–º–∞–π–ª—ã –∏ –º–∏–ª–æ–µ –æ–±—â–µ–Ω–∏–µ  
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω–æ "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ..." –≤ –∫–æ–Ω—Ü–µ
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ /help
‚Ä¢ üîí –¢—Ä–∏–≥–≥–µ—Ä—ã –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ üí¨ –õ–° –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –æ–±—ã—á–Ω—ã–µ —é–∑–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –æ—Ç–∫–∞–∑
"""

import logging
import re
import asyncio
import random
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)


def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ v3.0"""
    
    router = Router()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
        except:
            pass
    
    asyncio.create_task(get_bot_info())
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if modules.get('permissions'):
            if not await modules['permissions'].check_chat_access(chat_id, user.id):
                await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
                return
        
        # –í –õ–° –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.answer(
                    f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n"
                    f"–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}"
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_and_message(message, modules)
        
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if message.chat.type == 'private':
            # –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –≤ –õ–°
            welcome_text = (
                f"<b>Enhanced Telegram Bot v3.0 - –ê–¥–º–∏–Ω–∫–∞</b>\n\n"
                f"–ê–¥–º–∏–Ω: <b>{user.first_name}</b>\n\n"
                f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                f"/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n" 
                f"/permissions - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
                f"/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                f"/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
                f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"/stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/dashboard - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
            )
        else:
            # –î–ª—è –≥—Ä—É–ø–ø
            chat_name = message.chat.title or "—ç—Ç–æ–º —á–∞—Ç–µ"
            welcome_text = (
                f"<b>Enhanced Telegram Bot v3.0</b>\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}.\n"
                f"–†–∞–±–æ—Ç–∞—é –≤ {chat_name}.\n\n"
                f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                f"/ai - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
                f"/crypto - –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                f"/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/help - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≥—Ä—É–ø–ø
            welcome_text += (
                f"\n<b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
                f"‚Ä¢ @{bot_info.username if bot_info else 'bot'}\n"
                f"‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ù–∞–ø–∏—à–∏ '–±–æ—Ç' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )
        
        await message.answer(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(user.id, chat_id, 'start_command')
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not await check_permissions(message, modules):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
            # –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
            help_text = generate_admin_help_text()
        else:
            # –û–±—ã—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
            help_text = generate_user_help_text(bot_info)
            
        await message.answer(help_text)
    
    @router.message(Command('about'))
    async def about_handler(message: Message):
        if not await check_permissions(message, modules):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        about_text = generate_about_text(modules)
        await message.answer(about_text)
    
    @router.message(Command('status'))
    async def status_handler(message: Message):
        if not await check_permissions(message, modules):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        status_text = await generate_status_text(message.from_user, modules)
        await message.answer(status_text)
    
    # =================== AI –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not await check_permissions(message, modules, 'ai'):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        if not modules.get('ai'):
            await message.answer("AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π API –∫–ª—é—á–∏.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.answer(
                "<b>AI –ø–æ–º–æ—â–Ω–∏–∫:</b>\n\n"
                "/ai [–≤–æ–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python\n"
                "‚Ä¢ /ai –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç\n"
                "‚Ä¢ /ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω"
            )
            return
        
        await process_ai_request(message, user_message, modules)
    
    @router.message(Command('memory_clear'))
    async def memory_clear_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        if not modules.get('memory'):
            await message.answer("–ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        success = await modules['memory'].clear_user_memory(
            message.from_user.id, message.chat.id
        )
        
        if success:
            await message.answer("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å.")
    
    # =================== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not await check_permissions(message, modules, 'crypto'):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        if not modules.get('crypto'):
            await message.answer("–ö—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.answer(
                "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /crypto bitcoin\n"
                "‚Ä¢ /crypto BTC\n"
                "‚Ä¢ /crypto ethereum\n\n"
                "/crypto_trending - –¢–æ–ø –º–æ–Ω–µ—Ç"
            )
            return
        
        await process_crypto_request(message, coin_query, modules)
    
    @router.message(Command('crypto_trending'))
    async def crypto_trending_handler(message: Message):
        if not await check_permissions(message, modules, 'crypto'):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã  
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        await process_trending_crypto(message, modules)
    
    # =================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not await check_permissions(message, modules, 'analytics'):
            return
            
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        await process_user_stats(message, modules)
    
    @router.message(Command('dashboard'))
    async def dashboard_handler(message: Message):
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_user_dashboard(message, modules)
    
    @router.message(Command('export'))
    async def export_handler(message: Message):
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_data_export(message, modules)
    
    # =================== –ì–†–ê–§–ò–ö–ò ===================
    
    @router.message(Command('chart'))
    async def chart_handler(message: Message):
        if not await check_permissions(message, modules, 'charts'):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        await process_chart_request(message, modules)
    
    # =================== –¢–†–ò–ì–ì–ï–†–´ (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´) ===================
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_triggers_command(message, modules)
    
    @router.message(Command('trigger_add'))
    async def trigger_add_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_add(message, modules)
    
    @router.message(Command('trigger_del'))
    async def trigger_del_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_delete(message, modules)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
            
        await process_trigger_list(message, modules)
    
    # =================== –ú–û–î–ï–†–ê–¶–ò–Ø (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´) ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –¢–û–õ–¨–ö–û –í –õ–°
        if message.chat.type != 'private':
            await message.answer("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
            
        await process_moderation_settings(message, modules)
    
    @router.message(Command('ban'))
    async def ban_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –¢–û–õ–¨–ö–û –í –ì–†–£–ü–ü–ê–•
        if message.chat.type == 'private':
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_ban_command(message, modules)
    
    @router.message(Command('mute'))
    async def mute_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type == 'private':
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_mute_command(message, modules)
    
    @router.message(Command('warn'))
    async def warn_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type == 'private':
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
            
        await process_warn_command(message, modules)
    
    # =================== –ù–ê–°–¢–†–û–ô–ö–ò –î–û–°–¢–£–ü–ê (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´) ===================
    
    @router.message(Command('permissions'))
    async def permissions_handler(message: Message):
        # –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –¢–û–õ–¨–ö–û –í –õ–°
        if message.chat.type != 'private':
            await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –õ–°.")
            return
            
        await process_permissions_command(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not await check_permissions(message, modules, 'stickers'):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        await process_sticker(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ü–õ–ê–ï–í ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not await check_permissions(message, modules):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞—é—Ç –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_reply_to_bot(message, modules)
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            await process_smart_text(message, modules, bot_info)
    
    # =================== –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===================
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not await check_permissions(message, modules):
            return
        
        # –í –õ–° —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            
        await process_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üéõÔ∏è –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ v3.0 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

async def check_permissions(message: Message, modules, module_name: str = None) -> bool:
    """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞"""
    
    try:
        if not modules.get('permissions'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if not await modules['permissions'].check_chat_access(
            message.chat.id, message.from_user.id
        ):
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if module_name:
            if not await modules['permissions'].check_module_access(
                module_name, message.chat.id, message.from_user.id
            ):
                await message.answer(f"–ú–æ–¥—É–ª—å {module_name} –æ—Ç–∫–ª—é—á–µ–Ω.")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return True

async def check_admin_permissions(message: Message, modules) -> bool:
    """üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    user_id = message.from_user.id
    
    if user_id not in modules['config'].bot.admin_ids:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return False
    
    return True

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    try:
        user = message.from_user
        
        if modules.get('db'):
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False)
            })
            
            await modules['db'].save_chat({
                'id': message.chat.id,
                'type': message.chat.type,
                'title': message.chat.title,
                'username': message.chat.username
            })
            
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': message.chat.id,
                'text': message.text or '',
                'message_type': 'text' if message.text else 'other'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def process_ai_request(message: Message, user_message: str, modules):
    """ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ –ë–ï–ó "–î—É–º–∞—é..." –∏ —Å–º–∞–π–ª–æ–≤"""
    
    try:
        # –£–ë–†–ê–ù–û: thinking_msg = await message.answer("ü§î –î—É–º–∞—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
        context = {}
        if modules.get('memory'):
            memory_context = await modules['memory'].get_context(
                message.from_user.id, message.chat.id
            )
            context.update(memory_context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if modules.get('behavior'):
            behavior_analysis = await modules['behavior'].analyze_user_behavior(
                message.from_user.id, message.chat.id, user_message, context
            )
            context['behavior_analysis'] = behavior_analysis
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–∞—Ü–∞–Ω—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è
        context['style_instruction'] = (
            "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–º–∞–π–ª–æ–≤ –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏. "
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤ –∫–æ–Ω—Ü–µ '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ' –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ. "
            "–ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –∫–∞–∫ —Å –¥—Ä—É–≥–∞–Ω–æ–º."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if modules.get('behavior') and context.get('behavior_analysis'):
            response = await modules['behavior'].adapt_response(
                message.from_user.id, response, context['behavior_analysis']
            )
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        response = clean_ai_response(response)
        
        await message.answer(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
        if modules.get('memory'):
            await modules['memory'].add_interaction(
                message.from_user.id, message.chat.id, 
                user_message, response
            )
        
        # –û–±—É—á–∞–µ–º –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        if modules.get('behavior'):
            await modules['behavior'].learn_from_interaction(
                message.from_user.id, message.chat.id, 
                user_message, response
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")

def clean_ai_response(response: str) -> str:
    """üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –æ—Ç –ª–∏—à–Ω–µ–≥–æ"""
    
    # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã –≤ –∫–æ–Ω—Ü–µ
    cleanup_phrases = [
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã",
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å",
        "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ",
        "–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "üìö", "‚ú®", "üéØ", "üí°", "üîç"
    ]
    
    cleaned = response
    for phrase in cleanup_phrases:
        if phrase in cleaned:
            # –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–∑—É –∏ –≤—Å–µ –ø–æ—Å–ª–µ –Ω–µ–µ
            parts = cleaned.split(phrase)
            if len(parts) > 1:
                cleaned = parts[0].rstrip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–º–∞–π–ª—ã –≤ –∫–æ–Ω—Ü–µ
    emoji_pattern = r'[üòäüòÑüòÉüòÜüòÅü§óüéâ‚ú®üí´‚≠êüåüüí°üî•üëçüëåüéØüìöüîçüí≠ü§î]+$'
    cleaned = re.sub(emoji_pattern, '', cleaned).strip()
    
    return cleaned

async def process_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    
    try:
        user = message.from_user
        text = message.text.lower()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await save_user_and_message(message, modules)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        if modules.get('triggers'):
            trigger_response = await modules['triggers'].check_message_triggers(
                message.text, message.chat.id, user.id
            )
            if trigger_response:
                await message.answer(trigger_response)
                return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        moderation_action = await check_moderation(message, modules)
        if moderation_action:
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
        should_respond = await check_bot_mentions(message, bot_info)
        
        if should_respond:
            # –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await process_smart_response(message, modules)
        else:
            # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            await process_random_responses(message, modules)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, message.chat.id, 'message_sent',
                {'text_length': len(message.text), 'has_mention': should_respond}
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def check_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞"""
    
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        if bot_info and bot_info.first_name.lower() in text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞-–æ–±—Ä–∞—â–µ–Ω–∏—è
        bot_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫', 'assistant']
        if any(keyword in text for keyword in bot_keywords):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if '?' in message.text and len(message.text) > 20:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def process_smart_response(message: Message, modules):
    """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if modules.get('ai'):
            await process_ai_request(message, message.text, modules)
        else:
            # –ë–∞–∑–æ–≤—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Å–º–∞–π–ª–æ–≤
            smart_responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ.",
                "AI –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω.",
                "–ù—É–∂–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
                "–ü–æ–ø—Ä–æ–±—É–π /help.",
                "–ù–∞—Å—Ç—Ä–æ–π AI —Å–µ—Ä–≤–∏—Å."
            ]
            
            response = random.choice(smart_responses)
            await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

async def process_reply_to_bot(message: Message, modules):
    """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    
    try:
        # –≠—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ –±–æ—Ç–∞ - –æ—Ç–≤–µ—á–∞–µ–º
        if modules.get('ai'):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            context_message = f"–ù–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.reply_to_message.text}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: '{message.text}'"
            await process_ai_request(message, context_message, modules)
        else:
            await message.answer("–ü–æ–Ω—è–ª. –ù–æ AI –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–ª–∞—è: {e}")

async def check_moderation(message: Message, modules) -> bool:
    """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    try:
        if not modules.get('moderation'):
            return False
            
        moderation_result = await modules['moderation'].check_message(
            message.from_user.id, message.chat.id, message.text
        )
        
        if moderation_result['action'] != 'allow':
            action = moderation_result['action']
            reason = moderation_result['reason']
            
            if action == 'delete':
                try:
                    await message.delete()
                    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {reason}")
                except:
                    await message.answer(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
            elif action == 'warn':
                warnings = moderation_result.get('user_warnings', 0)
                await message.answer(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warnings}): {reason}")
            elif action == 'timeout':
                await message.answer(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {reason}")
            
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

async def process_random_responses(message: Message, modules):
    """üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    
    try:
        import random
        if (modules.get('config') and 
            random.random() < modules['config'].bot.random_reply_chance):
            
            # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª—ã –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            random_responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ.",
                "–ê–≥–∞.",
                "–•–æ—Ä–æ—à–æ.",
                "–Ø—Å–Ω–æ.",
                "–û–∫–µ–π."
            ]
            
            await message.answer(random.choice(random_responses))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ñ–∞–π–ª–µ...
# (process_crypto_request, process_user_stats, etc.)
# –¢–æ–ª—å–∫–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–º–∞–π–ª—ã –∏ –º–µ–Ω—è–µ–º —Ç–æ–Ω –Ω–∞ –±–æ–ª–µ–µ –ø—Ä—è–º–æ–π

# =================== –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ö–°–¢–ê –ë–ï–ó –°–ú–ê–ô–õ–û–í ===================

def generate_user_help_text(bot_info) -> str:
    """üìñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ë–ï–ó –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    help_text = (
        "<b>Enhanced Telegram Bot v3.0 - –ö–æ–º–∞–Ω–¥—ã</b>\n\n"
        "<b>AI:</b>\n"
        "/ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
        "/memory_clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n\n"
        "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã\n"
        "/crypto_trending - –¢–æ–ø –º–æ–Ω–µ—Ç\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "<b>–ì—Ä–∞—Ñ–∏–∫–∏:</b>\n"
        "/chart activity - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "/about - –û –±–æ—Ç–µ\n"
        "/status - –°—Ç–∞—Ç—É—Å\n\n"
        "<b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
        f"‚Ä¢ @{bot_info.username if bot_info else 'bot'}\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ '–±–æ—Ç' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "‚Ä¢ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å '?'"
    )
    
    return help_text

def generate_admin_help_text() -> str:
    """üëë –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    
    return (
        "<b>Enhanced Telegram Bot v3.0 - –ê–¥–º–∏–Ω–∫–∞</b>\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
        "/permissions - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
        "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n\n"
        "<b>–¢—Ä–∏–≥–≥–µ—Ä—ã:</b>\n"
        "/trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø] - –°–æ–∑–¥–∞—Ç—å\n"
        "/trigger_list - –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
        "/trigger_del [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å\n\n"
        "<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö:</b>\n"
        "/ban [ID] - –ó–∞–±–∞–Ω–∏—Ç—å\n"
        "/mute [ID] - –ó–∞–≥–ª—É—à–∏—Ç—å\n"
        "/warn [ID] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "/stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/dashboard - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        "<b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        "/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
    )

def generate_about_text(modules) -> str:
    """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ë–ï–ó —Å–º–∞–π–ª–æ–≤"""
    
    active_modules = sum(1 for m in modules.values() if m is not None and 
                        m != modules.get('config') and m != modules.get('bot') and m != modules.get('db'))
    
    return (
        "<b>Enhanced Telegram Bot v3.0</b>\n\n"
        "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.\n\n"
        "<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
        "‚Ä¢ Python 3.11+ + aiogram 3.8+\n"
        "‚Ä¢ AI: OpenAI GPT-4 + Anthropic Claude\n"
        "‚Ä¢ –ë–∞–∑–∞: SQLite —Å WAL —Ä–µ–∂–∏–º–æ–º\n"
        "‚Ä¢ API: CoinGecko, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "<b>–ú–æ–¥—É–ª–∏:</b>\n"
        "‚Ä¢ Memory - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å\n"
        "‚Ä¢ Behavior - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ Triggers - –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
        "‚Ä¢ Permissions - –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞\n"
        "‚Ä¢ Analytics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ Moderation - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ Crypto - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "‚Ä¢ Charts - –ì—Ä–∞—Ñ–∏–∫–∏\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {active_modules} –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ\n"
        f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}\n"
        "<b>–í–µ—Ä—Å–∏—è:</b> 3.0"
    )

async def generate_status_text(user, modules) -> str:
    """üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ë–ï–ó —Å–º–∞–π–ª–æ–≤"""
    
    status_parts = ["<b>Enhanced Telegram Bot v3.0 - –°—Ç–∞—Ç—É—Å</b>\n"]
    
    # –ú–æ–¥—É–ª–∏
    modules_status = []
    
    if modules.get('ai'):
        try:
            ai_stats = modules['ai'].get_usage_stats()
            modules_status.append(f"AI: –ê–∫—Ç–∏–≤–µ–Ω ({ai_stats.get('daily_usage', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        except:
            modules_status.append("AI: –ï—Å—Ç—å –æ—à–∏–±–∫–∏")
    else:
        modules_status.append("AI: –û—Ç–∫–ª—é—á–µ–Ω")
    
    if modules.get('crypto'):
        modules_status.append("Crypto: –ê–∫—Ç–∏–≤–µ–Ω")
    else:
        modules_status.append("Crypto: –û—Ç–∫–ª—é—á–µ–Ω")
    
    if modules.get('triggers'):
        try:
            trigger_stats = await modules['triggers'].get_trigger_statistics()
            total_triggers = trigger_stats.get('total_triggers', 0)
            modules_status.append(f"Triggers: {total_triggers} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        except:
            modules_status.append("Triggers: –ê–∫—Ç–∏–≤–µ–Ω")
    else:
        modules_status.append("Triggers: –û—Ç–∫–ª—é—á–µ–Ω")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    other_modules = ['analytics', 'memory', 'permissions', 'moderation']
    for module in other_modules:
        if modules.get(module):
            modules_status.append(f"{module.title()}: –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            modules_status.append(f"{module.title()}: –û—Ç–∫–ª—é—á–µ–Ω")
    
    status_parts.append("\n".join(modules_status))
    
    status_parts.append(f"\n<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    status_parts.append(f"<b>–í–∞—à ID:</b> {user.id}")
    status_parts.append(f"<b>–†–æ–ª—å:</b> {'–ê–¥–º–∏–Ω' if user.id in modules['config'].bot.admin_ids else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
    
    return "\n\n".join(status_parts)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (crypto, stats, triggers, moderation, permissions) 
# –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, —Ç–æ–ª—å–∫–æ —Å —É–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–º–∞–π–ª–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def process_crypto_request(message, coin_query, modules): 
    await message.answer("–ö—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trending_crypto(message, modules): 
    await message.answer("–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_user_stats(message, modules): 
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_user_dashboard(message, modules): 
    await message.answer("–î–∞—à–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_data_export(message, modules): 
    await message.answer("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_chart_request(message, modules): 
    await message.answer("–ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_sticker(message, modules): 
    await message.answer("–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_triggers_command(message, modules): 
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_add(message, modules): 
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_delete(message, modules): 
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_trigger_list(message, modules): 
    await message.answer("–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_moderation_settings(message, modules): 
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_ban_command(message, modules): 
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ ban –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_mute_command(message, modules): 
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ mute –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_warn_command(message, modules): 
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ warn –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_permissions_command(message, modules): 
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


__all__ = ["register_all_handlers"]