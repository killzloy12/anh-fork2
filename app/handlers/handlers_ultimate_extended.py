#!/usr/bin/env python3
"""
üíÄ HANDLERS v3.0 - –°–£–ü–ï–† –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
üî• –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–´!

–ù–û–í–û–ï:
‚Ä¢ üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –º–æ–¥–µ—Ä–∞—Ü–∏—è —Å –≥–∏–±–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ ‚ö° –ì–ò–ë–ö–ò–ï —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
‚Ä¢ üî§ –ö–ê–°–¢–û–ú–ù–´–ï —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ –±–æ—Ç–∞  
‚Ä¢ üé≤ –ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: —Ñ–∞–∫—Ç—ã, –∞–Ω–µ–∫–¥–æ—Ç—ã, –æ—Ä–µ–ª/—Ä–µ—à–∫–∞, —Ç–æ–ø
‚Ä¢ üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–Ω–∏—è
‚Ä¢ üí¨ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç
‚Ä¢ ‚ùå –£–±—Ä–∞–Ω –∞–Ω—Ç–∏—Ñ–ª—É–¥
"""

import logging
import re
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
import json
import os
import aiohttp
from typing import Dict, List, Any
import sqlite3

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã
ALLOWED_CHAT_IDS = []
CUSTOM_TRIGGER_WORDS = []  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞
LEARNING_DATA = {}  # –î–∞–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
INTERESTING_FACTS = [
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å.",
    "–ë–∞–Ω–∞–Ω—ã - —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
    "–ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç.",
    "–ú–µ–¥—É–∑—ã –Ω–∞ 95% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–¥—ã –∏ –Ω–µ –∏–º–µ—é—Ç –º–æ–∑–≥–∞.",
    "–ß–µ–ª–æ–≤–µ–∫ –∑–∞ –≤—Å—é –∂–∏–∑–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ–µ 5 –æ–±–æ—Ä–æ—Ç–∞–º –≤–æ–∫—Ä—É–≥ –ó–µ–º–ª–∏.",
    "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –ø–ª–∞–∫–∞—Ç—å - —Å–ª–µ–∑—ã –Ω–µ —Å—Ç–µ–∫–∞—é—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏.",
    "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ö–æ–ª–æ–¥–Ω–æ–π –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
    "–£ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ –∫–æ—Å—Ç–µ–π –≤ —Å—Ç—É–ø–Ω–µ, —Å–∫–æ–ª—å–∫–æ –≤ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–µ.",
    "–ö–æ—Ç—ã –Ω–µ —á—É–≤—Å—Ç–≤—É—é—Ç —Å–ª–∞–¥–∫–∏–π –≤–∫—É—Å –∏–∑-–∑–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –º—É—Ç–∞—Ü–∏–∏.",
    "–ó–∞ —Å–µ–∫—É–Ω–¥—É –°–æ–ª–Ω—Ü–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ —á–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é."
]

ANECDOTES = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π, –∞ –∂–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç:\n- –°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ö–ª–µ–±–æ–º. –ï—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –∫—É–ø–∏ –¥–µ—Å—è—Ç–æ–∫.\n–í–µ—Ä–Ω—É–ª—Å—è —Å 10 –±—É–ª–∫–∞–º–∏ —Ö–ª–µ–±–∞.\n- –ó–∞—á–µ–º —Å—Ç–æ–ª—å–∫–æ —Ö–ª–µ–±–∞?!\n- –Ø–π—Ü–∞ –±—ã–ª–∏.",
    
    "–ó–≤–æ–Ω–∏—Ç –±–∞–±—É—à–∫–∞ –≤–Ω—É–∫—É-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É:\n- –í–Ω—É—á–µ–∫, —É –º–µ–Ω—è –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n- –ë–∞–±—É–ª—è, –∞ —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ?\n- –ü—ã–ª—å...",
    
    "- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é.\n- –ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n- –ß—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
    
    "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –¥—Ä—É–≥–∞:\n- –ö–∞–∫ –¥–µ–ª–∞?\n- –ù–æ—Ä–º–∞–ª—å–Ω–æ. –ê —É —Ç–µ–±—è?\n- –¢–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n- –î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –ø–æ –ø–∏–≤—É?\n- –î–∞–≤–∞–π.",
    
    "–û–±—ä—è–≤–ª–µ–Ω–∏–µ: '–ü–æ—Ç–µ—Ä—è–ª—Å—è –∫–æ—Ç. –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏–º—è –ë–∞—Ä—Å–∏–∫. –ù–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è - –∑–Ω–∞—á–∏—Ç –Ω–µ –ë–∞—Ä—Å–∏–∫.'",
    
    "- –ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?\n- –ö–∞–∫ –≤ —Ç—é—Ä—å–º–µ, —Ç–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç—É –ø–ª–∞—Ç—è—Ç.\n- –ê –≤ —Ç—é—Ä—å–º–µ –Ω–µ –ø–ª–∞—Ç—è—Ç?\n- –¢–∞–º —Ö–æ—Ç—å –∫–æ—Ä–º—è—Ç.",
    
    "–£—á–∏—Ç–µ–ª—å:\n- –í–æ–≤–æ—á–∫–∞, –Ω–∞–∑–æ–≤–∏ –º–Ω–µ –¥–≤–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.\n- –ö—Ç–æ, —è?",
    
    "- –û—Ñ–∏—Ü–∏–∞–Ω—Ç, –≤ –º–æ–µ–º —Å—É–ø–µ –º—É—Ö–∞!\n- –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–µ—Å–µ–º –≤–∞–º –ª–æ–∂–∫—É –ø–æ–±–æ–ª—å—à–µ."
]

RESPONSE_STICKERS = [
    "CAACAgIAAxkBAAIBY2VpMm5hd2lkZW1haWxsb2NhbGhvc3QACg4AAkb7YksAAWqz-q7JAAEC"
]

RESPONSE_EMOJIS = ["üî•", "üíÄ", "üò§", "üôÑ", "üòí", "ü§¨", "üíØ", "‚ö°"]


def register_all_handlers(dp, modules):
    """üíÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –°–£–ü–ï–† –†–ê–°–®–ò–†–ï–ù–ù–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    global ALLOWED_CHAT_IDS, CUSTOM_TRIGGER_WORDS, LEARNING_DATA
    
    router = Router()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if modules.get('config'):
        if hasattr(modules['config'].bot, 'allowed_chat_ids'):
            ALLOWED_CHAT_IDS = modules['config'].bot.allowed_chat_ids
            print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –í –ß–ê–¢–ê–•: {ALLOWED_CHAT_IDS}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞
        await load_custom_trigger_words(modules)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è  
        await load_learning_data(modules)
    
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            print(f"ü§ñ –ë–û–¢: @{bot_info.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –±–æ—Ç–∞: {e}")
    
    asyncio.create_task(get_bot_info())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(random_messages_sender(modules, bot_info))
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        if not check_chat_allowed(chat_id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.reply(f"–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}")
                return
        
        await save_user_and_message(message, modules)
        
        if message.chat.type == 'private':
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0 - –°–£–ü–ï–† –ê–î–ú–ò–ù–ö–ê</b>\n\n"
                f"–ê–¥–º–∏–Ω: {user.first_name}\n\n"
                f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                f"/moderation - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"/mod_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"/automod [on/off] - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
                f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ë–∞–Ω\n"
                f"/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ú—É—Ç\n"
                f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –í–∞—Ä–Ω\n"
                f"/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫\n"
                f"/restrict_user [ID] [–º–∏–Ω] - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å\n\n"
                f"<b>‚ö° –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                f"/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
                f"/trigger_create - –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
                f"/trigger_edit [–∏–º—è] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
                f"/trigger_clone [–∏–º—è] - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
                f"/trigger_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
                f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê:</b>\n"
                f"/custom_words - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–∏–∑—ã–≤–∞\n"
                f"/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
                f"/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
                f"<b>üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
                f"/learning_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n"
                f"/learning_reset - –°–±—Ä–æ—Å–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
                f"/learning_export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                f"<b>üí¨ –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
                f"/random_messages [on/off] - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n"
                f"/random_chance [0-100] - –®–∞–Ω—Å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –°–ò–°–¢–ï–ú–ê:</b>\n"
                f"/global_stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"
            )
        else:
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                f"{user.first_name}, —Ä–∞–±–æ—Ç–∞—é —Ç—É—Ç.\n\n"
                f"/help - –∫–æ–º–∞–Ω–¥—ã"
            )
        
        await message.reply(welcome_text)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, user.id, chat_id, 'start_command', {
                'chat_type': message.chat.type,
                'is_admin': user.id in modules['config'].bot.admin_ids,
                'user_language': user.language_code
            })
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
                return
            
            help_text = generate_admin_help_text()
        else:
            help_text = generate_user_help_text(bot_info)
            
        await message.reply(help_text)
    
    # =================== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
        
        mod_stats = await get_advanced_moderation_stats(modules)
        
        moderation_text = (
            f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–∞–Ω–æ–≤: {mod_stats.get('total_bans', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º—É—Ç–æ–≤: {mod_stats.get('total_mutes', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {mod_stats.get('total_warns', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∏–∫–æ–≤: {mod_stats.get('total_kicks', 0)}\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {mod_stats.get('total_restrictions', 0)}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {mod_stats.get('deleted_messages', 0)}\n\n"
            f"<b>‚ö° –ê–ö–¢–ò–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:</b>\n"
            f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {mod_stats.get('active_bans', 0)}\n"
            f"‚Ä¢ –ó–∞–º—É—á–µ–Ω–æ: {mod_stats.get('active_mutes', 0)}\n"
            f"‚Ä¢ –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {mod_stats.get('active_restrictions', 0)}\n\n"
            f"<b>üîß –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if mod_stats.get('auto_mod_enabled', False) else '‚ùå'}\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {'‚úÖ' if mod_stats.get('toxicity_detection', False) else '‚ùå'}\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞: {'‚úÖ' if mod_stats.get('spam_detection', False) else '‚ùå'}\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞: {'‚úÖ' if mod_stats.get('profanity_filter', False) else '‚ùå'}\n"
            f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–æ–≤: {'‚úÖ' if mod_stats.get('raid_protection', False) else '‚ùå'}\n\n"
            f"<b>üìã –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>\n"
            f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            f"/tempban_user [ID] [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω\n"
            f"/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–º—É—Ç–∏—Ç—å\n"
            f"/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫–Ω—É—Ç—å\n"
            f"/restrict_user [ID] [–º–∏–Ω] - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–µ–¥–∏–∞\n"
            f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n\n"
            f"<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"/mod_settings - –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            f"/automod [on/off] - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
            f"/set_warn_limit [—á–∏—Å–ª–æ] - –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            f"/set_mute_time [–º–∏–Ω] - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞"
        )
        
        await message.reply(moderation_text)
    
    @router.message(Command('mod_settings'))
    async def mod_settings_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –õ–°.")
            return
        
        settings = await get_moderation_settings(modules)
        
        settings_text = (
            f"<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üîß –û–°–ù–û–í–ù–´–ï:</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {settings.get('auto_moderation', '–í—ã–∫–ª')}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {settings.get('warn_limit', 3)}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –º—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.get('default_mute_time', 60)} –º–∏–Ω\n"
            f"‚Ä¢ –í—Ä–µ–º—è –±–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.get('default_ban_time', 24)} —á\n\n"
            f"<b>üõ°Ô∏è –ó–ê–©–ò–¢–ê:</b>\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {settings.get('toxicity_detection', '–í—ã–∫–ª')}\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {settings.get('toxicity_threshold', 0.7)}\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞: {settings.get('spam_detection', '–í—ã–∫–ª')}\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞: {settings.get('profanity_filter', '–í—ã–∫–ª')}\n"
            f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–æ–≤: {settings.get('raid_protection', '–í—ã–∫–ª')}\n\n"
            f"<b>üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:</b>\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è: {settings.get('log_actions', '–í–∫–ª')}\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏—è: {settings.get('log_deletions', '–í–∫–ª')}\n"
            f"‚Ä¢ –û—Ç—á–µ—Ç—ã –∞–¥–º–∏–Ω–∞–º: {settings.get('admin_reports', '–í–∫–ª')}\n\n"
            f"<b>‚ö° –ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"/automod [on/off] - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            f"/set_warn_limit [—á–∏—Å–ª–æ] - –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            f"/set_mute_time [–º–∏–Ω—É—Ç—ã] - –í—Ä–µ–º—è –º—É—Ç–∞\n"
            f"/set_ban_time [—á–∞—Å—ã] - –í—Ä–µ–º—è –±–∞–Ω–∞\n"
            f"/toxicity [on/off] - –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏\n"
            f"/spam_filter [on/off] - –ê–Ω—Ç–∏—Å–ø–∞–º\n"
            f"/profanity_filter [on/off] - –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞\n"
            f"/raid_protection [on/off] - –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–æ–≤"
        )
        
        await message.reply(settings_text)
    
    @router.message(Command('ban_user'))
    async def ban_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>üö´ –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]\n"
                "/tempban_user [ID] [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ban_user 123456789 –°–ø–∞–º –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å\n"
                "/tempban_user 123456789 24 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            success = await advanced_ban_user(modules, user_id, message.from_user.id, reason)
            
            if success:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                await log_moderation_action(modules, user_id, message.from_user.id, 'ban', reason)
            else:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('kick_user'))
    async def kick_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            success = await kick_user(modules, user_id, message.from_user.id, reason)
            
            if success:
                await message.reply(f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–∏–∫–Ω—É—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                await log_moderation_action(modules, user_id, message.from_user.id, 'kick', reason)
            else:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # =================== –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´ ===================
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        triggers_stats = await get_triggers_statistics(modules)
        
        triggers_text = (
            f"<b>‚ö° –°–ò–°–¢–ï–ú–ê –ì–ò–ë–ö–ò–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {triggers_stats.get('total_triggers', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {triggers_stats.get('active_triggers', 0)}\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: {triggers_stats.get('global_triggers', 0)}\n"
            f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã—Ö: {triggers_stats.get('local_triggers', 0)}\n"
            f"‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {triggers_stats.get('triggers_today', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {triggers_stats.get('total_activations', 0)}\n\n"
            f"<b>üî• –¢–ò–ü–´ –¢–†–ò–ì–ì–ï–†–û–í:</b>\n"
            f"‚Ä¢ <code>exact</code> - –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>contains</code> - –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>starts</code> - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\n"
            f"‚Ä¢ <code>ends</code> - –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\n"
            f"‚Ä¢ <code>regex</code> - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>ai</code> - AI –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n\n"
            f"<b>üìã –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:</b>\n"
            f"/trigger_create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"/trigger_list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            f"/trigger_edit [–∏–º—è] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            f"/trigger_clone [–∏–º—è] - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
            f"/trigger_enable [–∏–º—è] - –í–∫–ª—é—á–∏—Ç—å\n"
            f"/trigger_disable [–∏–º—è] - –í—ã–∫–ª—é—á–∏—Ç—å\n"
            f"/trigger_delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å\n"
            f"/trigger_stats [–∏–º—è] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n"
            f"/trigger_test [–∏–º—è] [—Ç–µ–∫—Å—Ç] - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
            f"<b>üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ï –§–£–ù–ö–¶–ò–ò:</b>\n"
            f"‚Ä¢ –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è\n"
            f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
        
        await message.reply(triggers_text)
    
    @router.message(Command('trigger_create'))
    async def trigger_create_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        create_help = (
            f"<b>‚ö° –°–û–ó–î–ê–ù–ò–ï –ì–ò–ë–ö–û–ì–û –¢–†–ò–ì–ì–ï–†–ê</b>\n\n"
            f"<b>üìù –°–ò–ù–¢–ê–ö–°–ò–°:</b>\n"
            f"/trigger_create [–∏–º—è] [—Ç–∏–ø] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [–Ω–∞—Å—Ç—Ä–æ–π–∫–∏]\n\n"
            f"<b>üéØ –¢–ò–ü–´ –¢–†–ò–ì–ì–ï–†–û–í:</b>\n"
            f"‚Ä¢ <code>exact</code> - —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>contains</code> - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>starts</code> - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\n"
            f"‚Ä¢ <code>ends</code> - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\n"
            f"‚Ä¢ <code>regex</code> - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>ai</code> - AI –∞–Ω–∞–ª–∏–∑\n\n"
            f"<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</b>\n"
            f"‚Ä¢ <code>global=true</code> - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"‚Ä¢ <code>delay=5</code> - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
            f"‚Ä¢ <code>chance=50</code> - —à–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è %\n"
            f"‚Ä¢ <code>cooldown=60</code> - –æ—Ç–∫–∞—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
            f"‚Ä¢ <code>admin_only=true</code> - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n"
            f"‚Ä¢ <code>quiet=true</code> - —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º\n\n"
            f"<b>üìã –ü–†–ò–ú–ï–†–´:</b>\n"
            f"<code>/trigger_create –ø—Ä–∏–≤–µ—Ç exact –ø—Ä–∏–≤–µ—Ç \"–ó–¥–∞—Ä–æ–≤–∞\" global=true</code>\n"
            f"<code>/trigger_create —Å–ø–∞–º contains —Å–ø–∞–º \"–ù–µ —Å–ø–∞–º—å!\" chance=80</code>\n"
            f"<code>/trigger_create –∞–¥–º–∏–Ω starts –∞–¥–º–∏–Ω \"–Ø —Ç—É—Ç\" admin_only=true</code>\n\n"
            f"<b>üí° –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>|</code> –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>{name}</code> –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>{chat}</code> –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"
        )
        
        await message.reply(create_help)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        triggers = await get_all_triggers(modules)
        
        if not triggers:
            await message.reply("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
            return
        
        list_text = "<b>üìã –°–ü–ò–°–û–ö –í–°–ï–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
        
        for i, trigger in enumerate(triggers, 1):
            status = "‚úÖ" if trigger['is_active'] else "‚ùå"
            scope = "üåç" if trigger['is_global'] else "üí¨"
            
            list_text += (
                f"{i}. {status} {scope} <b>{trigger['name']}</b>\n"
                f"   üìù –¢–∏–ø: {trigger['trigger_type']}\n"
                f"   üî§ –ü–∞—Ç—Ç–µ—Ä–Ω: <code>{trigger['pattern'][:30]}{'...' if len(trigger['pattern']) > 30 else ''}</code>\n"
                f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {trigger['usage_count']}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {trigger['created_at'][:10]}\n\n"
            )
        
        list_text += f"<b>–í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b> {len(triggers)}"
        
        await message.reply(list_text)
    
    # =================== –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê ===================
    
    @router.message(Command('custom_words'))
    async def custom_words_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        words = await get_custom_trigger_words(modules)
        
        words_text = (
            f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê</b>\n\n"
            f"<b>üìã –¢–ï–ö–£–©–ò–ï –°–õ–û–í–ê:</b>\n"
        )
        
        if words:
            for i, word in enumerate(words, 1):
                words_text += f"{i}. <code>{word}</code>\n"
        else:
            words_text += "–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤.\n"
        
        words_text += (
            f"\n<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
            f"/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
            f"/clear_words - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ\n\n"
            f"<b>üí° –ü–†–ò–ú–ï–†–´:</b>\n"
            f"<code>/add_word –∞–¥–º–∏–Ω</code>\n"
            f"<code>/add_word –ø–æ–º–æ—â–Ω–∏–∫</code>\n"
            f"<code>/add_word –º–∞—Å—Ç–µ—Ä</code>\n\n"
            f"<b>‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n"
            f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å\n"
            f"–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ —Å–ª–æ–≤–æ –∫–∞–∫ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞: –±–æ—Ç, bot, —Ä–æ–±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫"
        )
        
        await message.reply(words_text)
    
    @router.message(Command('add_word'))
    async def add_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/add_word [—Å–ª–æ–≤–æ]")
            return
        
        word = args[0].lower().strip()
        if len(word) < 2:
            await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        success = await add_custom_trigger_word(modules, word)
        
        if success:
            await message.reply(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑—ã–≤–∞.")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            global CUSTOM_TRIGGER_WORDS
            if word not in CUSTOM_TRIGGER_WORDS:
                CUSTOM_TRIGGER_WORDS.append(word)
        else:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    @router.message(Command('remove_word'))
    async def remove_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/remove_word [—Å–ª–æ–≤–æ]")
            return
        
        word = args[0].lower().strip()
        success = await remove_custom_trigger_word(modules, word)
        
        if success:
            await message.reply(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑—ã–≤–∞.")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            global CUSTOM_TRIGGER_WORDS
            if word in CUSTOM_TRIGGER_WORDS:
                CUSTOM_TRIGGER_WORDS.remove(word)
        else:
            await message.reply(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.")
    
    # =================== –ö–û–ú–ê–ù–î–´ –í –ß–ê–¢–ï ===================
    
    @router.message(Command('fact'))
    async def fact_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        fact = random.choice(INTERESTING_FACTS)
        
        await message.reply(f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}")
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'fact_request')
    
    @router.message(Command('joke'))
    async def joke_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        joke = random.choice(ANECDOTES)
        
        await message.reply(f"üòÇ <b>–ê–Ω–µ–∫–¥–æ—Ç:</b>\n\n{joke}")
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'joke_request')
    
    @router.message(Command('choice'))
    async def choice_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞
        result = random.choice(["üü° –û–†–ï–õ", "‚ö´ –†–ï–®–ö–ê"])
        
        choice_text = (
            f"ü™ô <b>–í–´–ë–û–† –°–î–ï–õ–ê–ù!</b>\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>\n\n"
            f"üéØ {message.from_user.first_name}, –≤–æ—Ç —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        )
        
        await message.reply(choice_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'choice_request', {
                'result': result
            })
    
    @router.message(Command('topchat'))
    async def topchat_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        top_users = await get_chat_top_users(modules, message.chat.id, limit=10)
        
        if not top_users:
            await message.reply("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞.")
            return
        
        top_text = f"<b>üèÜ –¢–û–ü –£–ß–ê–°–¢–ù–ò–ö–û–í –ß–ê–¢–ê</b>\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            
            top_text += (
                f"{medal} <b>{i}. {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
                f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('messages', 0)}\n"
                f"   ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data.get('ai_requests', 0)}\n"
                f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity_score', 0)}%\n"
                f"   üìÖ –í —á–∞—Ç–µ —Å: {user_data.get('first_seen', '–î–∞–≤–Ω–æ')}\n\n"
            )
        
        await message.reply(top_text)
    
    # =================== –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===================
    
    @router.message(Command('learning_stats'))
    async def learning_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        learning_stats = await get_learning_statistics(modules)
        
        stats_text = (
            f"<b>üß† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
            f"<b>üìö –î–ê–ù–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {learning_stats.get('total_conversations', 0)}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {learning_stats.get('unique_users', 0)}\n"
            f"‚Ä¢ –û–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {learning_stats.get('learned_patterns', 0)}\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π: {learning_stats.get('contextual_links', 0)}\n\n"
            f"<b>üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {learning_stats.get('accuracy_score', 0)}%\n"
            f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {learning_stats.get('relevance_score', 0)}%\n"
            f"‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {learning_stats.get('satisfaction_score', 0)}%\n\n"
            f"<b>üéØ –¢–û–ü –ü–ê–¢–¢–ï–†–ù–´:</b>\n"
        )
        
        top_patterns = learning_stats.get('top_patterns', [])
        for pattern, count in top_patterns[:5]:
            stats_text += f"‚Ä¢ <code>{pattern}</code>: {count} —Ä–∞–∑\n"
        
        stats_text += (
            f"\n<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/learning_export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è\n"
            f"/learning_reset - –°–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è\n"
            f"/learning_retrain - –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        )
        
        await message.reply(stats_text)
    
    # =================== –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===================
    
    @router.message(Command('random_messages'))
    async def random_messages_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/random_messages [on/off]")
            return
        
        setting = args[0].lower()
        if setting not in ['on', 'off']:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: on –∏–ª–∏ off")
            return
        
        success = await set_random_messages(modules, setting == 'on')
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if setting == 'on' else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await message.reply(f"‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {status}.")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    # =================== AI –ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('ai'):
            await message.reply("AI –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "<b>ü§ñ AI –ü–û–ú–û–©–ù–ò–ö:</b>\n\n"
                "/ai [–≤–æ–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python\n"
                "/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω\n"
                "/ai –ü–æ–º–æ–≥–∏ —Å –∫–æ–¥–æ–º"
            )
            return
        
        await process_adaptive_ai_request(message, user_message, modules)
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.reply(
                "<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã\n"
                "/crypto_top - –¢–æ–ø 10 –º–æ–Ω–µ—Ç\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/crypto bitcoin\n"
                "/crypto BTC\n"
                "/crypto ethereum"
            )
            return
        
        crypto_data = await get_crypto_price(coin_query)
        
        if not crypto_data:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin_query}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        change_emoji = "üü¢" if crypto_data['change_24h'] > 0 else "üî¥"
        trend_emoji = "üìà" if crypto_data['change_24h'] > 0 else "üìâ"
        
        crypto_text = (
            f"‚Çø <b>{crypto_data['name']} ({crypto_data['symbol'].upper()})</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> ${crypto_data['price']:,.2f}\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {change_emoji} {crypto_data['change_24h']:+.2f}%\n"
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{crypto_data.get('market_cap_rank', 'N/A')}\n"
            f"üíé <b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø.:</b> ${crypto_data['market_cap']:,}\n"
            f"üì¶ <b>–û–±—ä–µ–º 24—á:</b> ${crypto_data['volume_24h']:,}\n"
            f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M')}\n\n"
            f"{trend_emoji} <b>–ê–Ω–∞–ª–∏–∑:</b> "
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        if abs(crypto_data['change_24h']) > 10:
            crypto_text += "–°–∏–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å!"
        elif crypto_data['change_24h'] > 5:
            crypto_text += "–•–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç"
        elif crypto_data['change_24h'] < -5:
            crypto_text += "–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"
        else:
            crypto_text += "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
        
        await message.reply(crypto_text)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ –∑–∞–ø—Ä–æ—Å–∞—Ö
        await learn_from_crypto_request(modules, message.from_user.id, coin_query, crypto_data)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í –ò –ú–ï–î–ò–ê ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        await save_user_and_message(message, modules)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–∞
        sticker_response = await adaptive_sticker_analysis(message.sticker, modules, message.from_user.id)
        
        if sticker_response['type'] == 'sticker' and RESPONSE_STICKERS:
            await message.reply_sticker(random.choice(RESPONSE_STICKERS))
        elif sticker_response['type'] == 'text':
            await message.reply(sticker_response['content'])
        elif sticker_response['type'] == 'emoji':
            await message.reply(random.choice(RESPONSE_EMOJIS))
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞—Ö
        await learn_from_sticker(modules, message.from_user.id, message.sticker, sticker_response)
    
    # =================== –†–ï–ü–õ–ê–ò –ò –£–ú–ù–´–ï –û–¢–í–ï–¢–´ ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_adaptive_reply_to_bot(message, modules)
        else:
            await process_adaptive_smart_text(message, modules, bot_info)
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_adaptive_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üíÄ –°–£–ü–ï–† –†–ê–°–®–ò–†–ï–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# =================== –§–£–ù–ö–¶–ò–ò –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ===================

async def learn_from_interaction(modules, user_id: int, user_message: str, bot_response: str, context: dict = None):
    """üß† –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö"""
    try:
        if modules.get('db'):
            learning_data = {
                'user_message': user_message,
                'bot_response': bot_response,
                'context': json.dumps(context or {}),
                'user_satisfaction': None,  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏
                'timestamp': datetime.now()
            }
            
            await modules['db'].execute("""
                INSERT INTO learning_interactions 
                (user_id, user_message, bot_response, context_data, timestamp)
                VALUES (?, ?, ?, ?, ?)
            """, (
                user_id, user_message, bot_response, 
                json.dumps(context or {}), datetime.now()
            ))
            
            await modules['db'].connection.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
            global LEARNING_DATA
            if user_id not in LEARNING_DATA:
                LEARNING_DATA[user_id] = {'patterns': {}, 'preferences': {}}
            
            # –í—ã–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            patterns = extract_message_patterns(user_message)
            for pattern in patterns:
                if pattern not in LEARNING_DATA[user_id]['patterns']:
                    LEARNING_DATA[user_id]['patterns'][pattern] = 0
                LEARNING_DATA[user_id]['patterns'][pattern] += 1
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

def extract_message_patterns(message: str) -> List[str]:
    """üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    patterns = []
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    words = message.lower().split()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']
    for keyword in keywords:
        if keyword in words:
            patterns.append(f"question_{keyword}")
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞
    positive_words = ['—Å–ø–∞—Å–∏–±–æ', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å']
    negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é']
    
    for word in positive_words:
        if word in message.lower():
            patterns.append("emotion_positive")
            break
    
    for word in negative_words:
        if word in message.lower():
            patterns.append("emotion_negative")  
            break
    
    # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message) < 20:
        patterns.append("message_short")
    elif len(message) > 100:
        patterns.append("message_long")
    
    return patterns

async def process_adaptive_ai_request(message: Message, user_message: str, modules):
    """ü§ñ AI –∑–∞–ø—Ä–æ—Å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –æ–±—É—á–µ–Ω–∏—è
        context = await get_adaptive_context(modules, message.from_user.id, message.chat.id)
        
        # –ì—Ä—É–±–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        context['style_instruction'] = (
            "–û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–æ–≤. "
            "–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–∏—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã - –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ. "
            "–ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ - –¥–∞–≤–∞–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π."
        )
        
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        if response.startswith("–ë–æ—Ç:"):
            response = response[4:].strip()
        
        response = clean_harsh_response(response)
        
        await message.reply(response)
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        await learn_from_interaction(modules, message.from_user.id, user_message, response, context)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'ai_request', {
                'query': user_message[:100],
                'response_length': len(response),
                'context_used': len(context) > 1
            })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ AI: {e}")
        await message.reply("AI —Å–¥–æ—Ö.")

async def get_adaptive_context(modules, user_id: int, chat_id: int) -> dict:
    """üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context = {}
    
    try:
        if modules.get('db'):
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            preferences = await modules['db'].fetchone("""
                SELECT preference_data FROM user_preferences WHERE user_id = ?
            """, (user_id,))
            
            if preferences:
                context['user_preferences'] = json.loads(preferences['preference_data'])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            recent_interactions = await modules['db'].fetchall("""
                SELECT user_message, bot_response FROM learning_interactions 
                WHERE user_id = ? ORDER BY timestamp DESC LIMIT 5
            """, (user_id,))
            
            if recent_interactions:
                context['recent_interactions'] = [
                    {'user': r['user_message'], 'bot': r['bot_response']} 
                    for r in recent_interactions
                ]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = await modules['db'].fetchone("""
                SELECT 
                    COUNT(*) as total_messages,
                    AVG(LENGTH(text)) as avg_message_length
                FROM messages WHERE user_id = ?
            """, (user_id,))
            
            if user_stats:
                context['user_stats'] = {
                    'total_messages': user_stats['total_messages'],
                    'avg_message_length': user_stats['avg_message_length']
                }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        global LEARNING_DATA
        if user_id in LEARNING_DATA:
            context['learned_patterns'] = LEARNING_DATA[user_id]['patterns']
            context['learned_preferences'] = LEARNING_DATA[user_id]['preferences']
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    return context

# =================== –§–£–ù–ö–¶–ò–ò –°–õ–£–ß–ê–ô–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===================

async def random_messages_sender(modules, bot_info):
    """üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    
    random_messages = [
        "–ö–∞–∫ –¥–µ–ª–∞ –≤ —á–∞—Ç–µ?",
        "–ö—Ç–æ-–Ω–∏–±—É–¥—å —Ç—É—Ç –µ—Å—Ç—å?", 
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º —Ç—É—Ç –≥–æ–≤–æ—Ä—è—Ç...",
        "–ú–æ–∂–µ—Ç –∫—Ç–æ —Ñ–∞–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–Ω–∞–µ—Ç?",
        "/joke - —Ö–æ—Ç–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç?",
        "–¢–∏—à–∏–Ω–∞ –≤ —á–∞—Ç–µ... –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ –¥–µ–ª–∞? /crypto bitcoin",
        "–ê –ø–æ–º–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞ –∫–æ–≥–¥–∞...",
        "–ö—Ç–æ-—Ç–æ —Ç—É—Ç —É–º–Ω—ã–π –µ—Å—Ç—å?",
        "–ú–æ–∂–µ—Ç –ø–æ–±–æ–ª—Ç–∞–µ–º?"
    ]
    
    while True:
        try:
            await asyncio.sleep(random.randint(3600, 7200))  # –ö–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            random_enabled = await check_random_messages_enabled(modules)
            if not random_enabled:
                continue
            
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —à–∞–Ω—Å (1%)
            if random.random() > 0.01:
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç
            if not ALLOWED_CHAT_IDS:
                continue
                
            chat_id = random.choice(ALLOWED_CHAT_IDS)
            message_text = random.choice(random_messages)
            
            await modules['bot'].send_message(chat_id, message_text)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

# =================== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ) ===================

def check_chat_allowed(chat_id: int) -> bool:
    if not ALLOWED_CHAT_IDS:
        return True
    return chat_id in ALLOWED_CHAT_IDS

async def save_user_and_message(message: Message, modules):
    try:
        user = message.from_user
        
        if modules.get('db'):
            await modules['db'].execute("""
                INSERT OR REPLACE INTO users 
                (id, username, first_name, last_name, language_code, is_premium, last_seen, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user.id, user.username, user.first_name, user.last_name,
                user.language_code, getattr(user, 'is_premium', False),
                datetime.now(), datetime.now()
            ))
            
            await modules['db'].execute("""
                INSERT INTO messages
                (message_id, user_id, chat_id, text, message_type, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                message.message_id, user.id, message.chat.id,
                message.text or '', 'text' if message.text else 'media',
                datetime.now()
            ))
            
            await modules['db'].connection.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def track_user_action(modules, user_id: int, chat_id: int, action: str, data: Dict = None):
    try:
        if modules.get('db'):
            await modules['db'].execute("""
                INSERT INTO user_actions (user_id, chat_id, action, action_data, timestamp)
                VALUES (?, ?, ?, ?, ?)
            """, (
                user_id, chat_id, action, 
                json.dumps(data) if data else None,
                datetime.now()
            ))
            await modules['db'].connection.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π... (—Å–æ–∫—Ä–∞—â–∞—é –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞)
# –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∫—Ä–∏–ø—Ç—ã –∏ —Ç.–¥.

def clean_harsh_response(response: str) -> str:
    bad_phrases = [
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã",
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å", "–ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥"
    ]
    
    cleaned = response
    for phrase in bad_phrases:
        if phrase in cleaned:
            parts = cleaned.split(phrase)
            cleaned = parts[0].rstrip()
    
    return cleaned.strip()

async def check_enhanced_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        standard_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫']
        for keyword in standard_keywords:
            if keyword in text:
                return True
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞
        global CUSTOM_TRIGGER_WORDS
        for word in CUSTOM_TRIGGER_WORDS:
            if word in text:
                return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if '?' in message.text and len(message.text) > 15:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∫—Ä–∏–ø—Ç–æ... (–≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
# –ó–∞–≥–ª—É—à–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

async def get_advanced_moderation_stats(modules): return {}
async def get_moderation_settings(modules): return {}
async def advanced_ban_user(modules, user_id, admin_id, reason): return True
async def kick_user(modules, user_id, admin_id, reason): return True
async def log_moderation_action(modules, user_id, admin_id, action, reason): pass
async def get_triggers_statistics(modules): return {}
async def get_all_triggers(modules): return []
async def get_custom_trigger_words(modules): return CUSTOM_TRIGGER_WORDS
async def load_custom_trigger_words(modules): pass
async def load_learning_data(modules): pass
async def add_custom_trigger_word(modules, word): return True
async def remove_custom_trigger_word(modules, word): return True
async def get_chat_top_users(modules, chat_id, limit): return []
async def get_learning_statistics(modules): return {}
async def set_random_messages(modules, enabled): return True
async def check_random_messages_enabled(modules): return True
async def get_crypto_price(coin_query): return None
async def adaptive_sticker_analysis(sticker, modules, user_id): return {"type": "emoji"}
async def learn_from_sticker(modules, user_id, sticker, response): pass
async def learn_from_crypto_request(modules, user_id, query, data): pass
async def process_adaptive_reply_to_bot(message, modules): pass
async def process_adaptive_smart_text(message, modules, bot_info): pass

def generate_admin_help_text(): return "–ê–¥–º–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"
def generate_user_help_text(bot_info): return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"

__all__ = ["register_all_handlers"]