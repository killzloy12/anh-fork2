#!/usr/bin/env python3
"""
üíÄ HANDLERS v3.0 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
üî• –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –û–®–ò–ë–û–ö!

–ò–°–ü–†–ê–í–õ–ï–ù–û:
‚Ä¢ –£–±—Ä–∞–Ω await –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ë–î
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –º–æ–¥–µ—Ä–∞—Ü–∏—è –±–µ–∑ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
‚Ä¢ ‚ö° –ì–ò–ë–ö–ò–ï —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
‚Ä¢ üî§ –ö–ê–°–¢–û–ú–ù–´–ï —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞  
‚Ä¢ üé≤ –ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: —Ñ–∞–∫—Ç—ã, –∞–Ω–µ–∫–¥–æ—Ç—ã, –æ—Ä–µ–ª/—Ä–µ—à–∫–∞, —Ç–æ–ø
‚Ä¢ üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–Ω–∏—è
‚Ä¢ üí¨ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç
"""

import logging
import re
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
import json
import os
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ALLOWED_CHAT_IDS = []
CUSTOM_TRIGGER_WORDS = ['–∞–¥–º–∏–Ω', '–º–∞—Å—Ç–µ—Ä', '–ø–æ–º–æ—â–Ω–∏–∫', 'boss', 'chief']
LEARNING_DATA = {}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
INTERESTING_FACTS = [
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å.",
    "–ë–∞–Ω–∞–Ω—ã - —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
    "–ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç.",
    "–ú–µ–¥—É–∑—ã –Ω–∞ 95% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–¥—ã –∏ –Ω–µ –∏–º–µ—é—Ç –º–æ–∑–≥–∞.",
    "–ß–µ–ª–æ–≤–µ–∫ –∑–∞ –≤—Å—é –∂–∏–∑–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ–µ 5 –æ–±–æ—Ä–æ—Ç–∞–º –≤–æ–∫—Ä—É–≥ –ó–µ–º–ª–∏.",
    "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –ø–ª–∞–∫–∞—Ç—å - —Å–ª–µ–∑—ã –Ω–µ —Å—Ç–µ–∫–∞—é—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏.",
    "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ö–æ–ª–æ–¥–Ω–æ–π –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
    "–£ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ –∫–æ—Å—Ç–µ–π –≤ —Å—Ç—É–ø–Ω–µ, —Å–∫–æ–ª—å–∫–æ –≤ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–µ.",
    "–ö–æ—Ç—ã –Ω–µ —á—É–≤—Å—Ç–≤—É—é—Ç —Å–ª–∞–¥–∫–∏–π –≤–∫—É—Å –∏–∑-–∑–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –º—É—Ç–∞—Ü–∏–∏.",
    "–ó–∞ —Å–µ–∫—É–Ω–¥—É –°–æ–ª–Ω—Ü–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ —á–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.",
    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å - —Å–ª–æ–Ω.",
    "–ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è. –í –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö –≥—Ä–æ–±–Ω–∏—Ü–∞—Ö –Ω–∞—Ö–æ–¥—è—Ç —Å—ä–µ–¥–æ–±–Ω—ã–π –º—ë–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º –±–æ–ª–µ–µ 3000 –ª–µ—Ç.",
    "–ë–∞–Ω–∫–æ–º–∞—Ç –±—ã–ª –∏–∑–æ–±—Ä–µ—Ç–µ–Ω —Ä–∞–Ω—å—à–µ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏.",
    "–£ –∫—Ä–µ–≤–µ—Ç–æ–∫ —Å–µ—Ä–¥—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ–≤–µ.",
    "–°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –≤–æ–π–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏–ª–∞—Å—å –æ—Ç 38 –¥–æ 45 –º–∏–Ω—É—Ç."
]

ANECDOTES = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π, –∞ –∂–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç:\n- –°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ö–ª–µ–±–æ–º. –ï—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –∫—É–ø–∏ –¥–µ—Å—è—Ç–æ–∫.\n–í–µ—Ä–Ω—É–ª—Å—è —Å 10 –±—É–ª–∫–∞–º–∏ —Ö–ª–µ–±–∞.\n- –ó–∞—á–µ–º —Å—Ç–æ–ª—å–∫–æ —Ö–ª–µ–±–∞?!\n- –Ø–π—Ü–∞ –±—ã–ª–∏.",
    
    "–ó–≤–æ–Ω–∏—Ç –±–∞–±—É—à–∫–∞ –≤–Ω—É–∫—É-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É:\n- –í–Ω—É—á–µ–∫, —É –º–µ–Ω—è –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n- –ë–∞–±—É–ª—è, –∞ —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ?\n- –ü—ã–ª—å...",
    
    "- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é.\n- –ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n- –ß—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
    
    "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –¥—Ä—É–≥–∞:\n- –ö–∞–∫ –¥–µ–ª–∞?\n- –ù–æ—Ä–º–∞–ª—å–Ω–æ. –ê —É —Ç–µ–±—è?\n- –¢–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n- –î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –ø–æ –ø–∏–≤—É?\n- –î–∞–≤–∞–π.",
    
    "–û–±—ä—è–≤–ª–µ–Ω–∏–µ: '–ü–æ—Ç–µ—Ä—è–ª—Å—è –∫–æ—Ç. –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏–º—è –ë–∞—Ä—Å–∏–∫. –ù–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è - –∑–Ω–∞—á–∏—Ç –Ω–µ –ë–∞—Ä—Å–∏–∫.'",
    
    "- –û—Ñ–∏—Ü–∏–∞–Ω—Ç, –≤ –º–æ–µ–º —Å—É–ø–µ –º—É—Ö–∞!\n- –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–µ—Å–µ–º –≤–∞–º –ª–æ–∂–∫—É –ø–æ–±–æ–ª—å—à–µ.",
    
    "–£—á–∏—Ç–µ–ª—å:\n- –í–æ–≤–æ—á–∫–∞, –Ω–∞–∑–æ–≤–∏ –º–Ω–µ –¥–≤–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.\n- –ö—Ç–æ, —è?",
    
    "- –ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?\n- –ö–∞–∫ –≤ —Ç—é—Ä—å–º–µ, —Ç–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç—É –ø–ª–∞—Ç—è—Ç.\n- –ê –≤ —Ç—é—Ä—å–º–µ –Ω–µ –ø–ª–∞—Ç—è—Ç?\n- –¢–∞–º —Ö–æ—Ç—å –∫–æ—Ä–º—è—Ç.",
    
    "–î–æ–∫—Ç–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç—É:\n- –£ –≤–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –∑–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ, –æ–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—â–µ 80 –ª–µ—Ç.\n- –ê –º–Ω–µ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç?\n- 85.\n- –ù—É —Ç–æ–≥–¥–∞ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ.",
    
    "–ú—É–∂–∏–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –≤—Ä–∞—á—É:\n- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –±–æ–ª–∏—Ç –≤—Å–µ!\n- –ö–∞–∫ —ç—Ç–æ –≤—Å–µ?\n- –í–æ—Ç —Ç—É—Ç —Ç—Ä–æ–Ω—É - –±–æ–ª–∏—Ç, —Ç—É—Ç —Ç—Ä–æ–Ω—É - –±–æ–ª–∏—Ç, –≤–µ–∑–¥–µ –±–æ–ª–∏—Ç!\n- –£ –≤–∞—Å –ø–∞–ª–µ—Ü —Å–ª–æ–º–∞–Ω."
]

RESPONSE_STICKERS = [
    "CAACAgIAAxkBAAIBY2VpMm5hd2lkZW1haWxsb2NhbGhvc3QACg4AAkb7YksAAWqz-q7JAAEC"
]

RESPONSE_EMOJIS = ["üî•", "üíÄ", "üò§", "üôÑ", "üòí", "ü§¨", "üíØ", "‚ö°", "üñï", "ü§Æ"]

GRUFF_RESPONSES = [
    "–ß—Ç–æ?", "–ù–µ –ø–æ–Ω—è–ª.", "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?", "–Ø—Å–Ω–æ.", "–ü–æ–Ω—è—Ç–Ω–æ.", 
    "–ê–≥–∞.", "–ß–µ —Ö–æ—á–µ—à—å?", "–ù—É –∏?", "–ö–æ—Ä–æ—á–µ.", "–î–∞–≤–∞–π –ø–æ –¥–µ–ª—É."
]


def register_all_handlers(dp, modules):
    """üíÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ü–û–õ–ù–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫"""
    
    global ALLOWED_CHAT_IDS, CUSTOM_TRIGGER_WORDS, LEARNING_DATA
    
    router = Router()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ò–ù–•–†–û–ù–ù–û
    if modules.get('config'):
        if hasattr(modules['config'].bot, 'allowed_chat_ids'):
            ALLOWED_CHAT_IDS = modules['config'].bot.allowed_chat_ids
            print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –í –ß–ê–¢–ê–•: {ALLOWED_CHAT_IDS}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞
        print(f"üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê: {CUSTOM_TRIGGER_WORDS}")
    
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            print(f"ü§ñ –ë–û–¢: @{bot_info.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –±–æ—Ç–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    asyncio.create_task(get_bot_info())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(random_messages_sender(modules))
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        if not check_chat_allowed(chat_id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.reply(f"–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}")
                return
        
        await save_user_and_message(message, modules)
        
        if message.chat.type == 'private':
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0 - –°–£–ü–ï–† –ê–î–ú–ò–ù–ö–ê</b>\n\n"
                f"–ê–¥–º–∏–Ω: {user.first_name}\n\n"
                f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø (–ë–ï–ó –ê–ù–¢–ò–§–õ–£–î–ê):</b>\n"
                f"‚Ä¢ /moderation - –ü–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"‚Ä¢ /mod_settings - –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"‚Ä¢ /ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ /tempban_user [ID] [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω\n"
                f"‚Ä¢ /mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–º—É—Ç–∏—Ç—å\n"
                f"‚Ä¢ /kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫–Ω—É—Ç—å\n"
                f"‚Ä¢ /warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n"
                f"‚Ä¢ /restrict_user [ID] [–º–∏–Ω] - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–µ–¥–∏–∞\n\n"
                f"<b>‚ö° –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                f"‚Ä¢ /triggers - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
                f"‚Ä¢ /trigger_create - –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
                f"‚Ä¢ /trigger_list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
                f"‚Ä¢ /trigger_edit [–∏–º—è] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
                f"‚Ä¢ /trigger_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
                f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê:</b>\n"
                f"‚Ä¢ /custom_words - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏\n"
                f"‚Ä¢ /add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞\n"
                f"‚Ä¢ /remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
                f"‚Ä¢ /word_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤\n\n"
                f"<b>üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
                f"‚Ä¢ /learning_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n"
                f"‚Ä¢ /learning_reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è\n"
                f"‚Ä¢ /learning_export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚Ä¢ /user_profile [ID] - –ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                f"<b>üí¨ –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
                f"‚Ä¢ /random_messages [on/off] - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n"
                f"‚Ä¢ /random_chance [0-100] - –®–∞–Ω—Å —Å–æ–æ–±—â–µ–Ω–∏—è (%)\n"
                f"‚Ä¢ /random_test - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                f"<b>üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
                f"‚Ä¢ /global_stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"‚Ä¢ /user_stats [ID] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ /chat_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n"
                f"‚Ä¢ /mod_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"‚Ä¢ /top_users - –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"<b>üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):</b>\n"
                f"‚Ä¢ /fact - –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
                f"‚Ä¢ /joke - –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
                f"‚Ä¢ /choice - –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞\n\n"
                f"<b>üîß –°–ò–°–¢–ï–ú–ê:</b>\n"
                f"‚Ä¢ /system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
                f"‚Ä¢ /backup_db - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î\n"
                f"‚Ä¢ /clear_cache - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
            )
        else:
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                f"{user.first_name}, —Ä–∞–±–æ—Ç–∞—é —Ç—É—Ç.\n\n"
                f"/help - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö"
            )
        
        await message.reply(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('db'):
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False)
            })
            
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': chat_id,
                'text': '/start',
                'message_type': 'command'
            })
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
                return
            
            help_text = (
                "<b>üíÄ –ê–î–ú–ò–ù–ö–ê - –í–°–ï –ö–û–ú–ê–ù–î–´</b>\n\n"
                "<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                "/moderation - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ë–∞–Ω\n"
                "/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ú—É—Ç\n"
                "/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫\n"
                "/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –í–∞—Ä–Ω\n"
                "/automod [on/off] - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
                "<b>‚ö° –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                "/trigger_create - –°–æ–∑–¥–∞—Ç—å\n"
                "/trigger_list - –°–ø–∏—Å–æ–∫\n\n"
                "<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê:</b>\n"
                "/custom_words - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                "/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å\n"
                "/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å\n\n"
                "<b>üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:</b>\n"
                "/global_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/user_stats [ID] - –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "/top_users - –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n"
                "<b>üß† –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
                "/learning_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/learning_reset - –°–±—Ä–æ—Å\n\n"
                "<b>üí¨ –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
                "/random_messages [on/off] - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å\n"
                "/random_chance [%] - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–Ω—Å"
            )
        else:
            help_text = (
                "<b>üíÄ –ë–û–¢ v3.0 - –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö</b>\n\n"
                "<b>ü§ñ –£–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò:</b>\n"
                "/ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫ (–≥—Ä—É–±—ã–π)\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
                "<b>üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:</b>\n"
                "/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
                "/joke - –ê–Ω–µ–∫–¥–æ—Ç\n"
                "/choice - –û—Ä–µ–ª/—Ä–µ—à–∫–∞\n"
                "/topchat - –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\n\n"
                "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
                "/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "<b>üí¨ –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï:</b>\n"
                f"@{bot_info.username if bot_info else 'bot'} [–≤–æ–ø—Ä–æ—Å] - –£–ø–æ–º—è–Ω–∏ –±–æ—Ç–∞\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞\n"
                f"–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(CUSTOM_TRIGGER_WORDS[:3])}\n\n"
                "<b>üî• –û–°–û–ë–ï–ù–ù–û–°–¢–ò:</b>\n"
                "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –∫–∞–∂–¥–æ–≥–æ\n"
                "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
                "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã\n"
                "‚Ä¢ –†–µ–¥–∫–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
            
        await message.reply(help_text)
    
    # =================== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_stats = await get_moderation_stats(modules)
        
        moderation_text = (
            f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ô–°–¢–í–ò–ô:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–∞–Ω–æ–≤: {mod_stats.get('total_bans', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {mod_stats.get('active_bans', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º—É—Ç–æ–≤: {mod_stats.get('total_mutes', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º—É—Ç–æ–≤: {mod_stats.get('active_mutes', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {mod_stats.get('total_warns', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∏–∫–æ–≤: {mod_stats.get('total_kicks', 0)}\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {mod_stats.get('total_restrictions', 0)}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {mod_stats.get('actions_today', 0)}\n\n"
            f"<b>‚ö° –ù–ê–°–¢–†–û–ô–ö–ò (–ê–ù–¢–ò–§–õ–£–î –£–ë–†–ê–ù!):</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if mod_stats.get('auto_mod_enabled', False) else '‚ùå'}\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {'‚úÖ' if mod_stats.get('toxicity_detection', False) else '‚ùå'}\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞: {'‚úÖ' if mod_stats.get('spam_detection', False) else '‚ùå'}\n"
            f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–æ–≤: {'‚úÖ' if mod_stats.get('raid_protection', False) else '‚ùå'}\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: {'‚úÖ' if mod_stats.get('log_actions', True) else '‚ùå'}\n\n"
            f"<b>üìã –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>\n"
            f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n"
            f"/tempban_user [ID] [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω\n"
            f"/unban_user [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"/mute_user [ID] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–º—É—Ç–∏—Ç—å\n"
            f"/unmute_user [ID] - –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫–Ω—É—Ç—å –∏–∑ —á–∞—Ç–∞\n"
            f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –î–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
            f"/restrict_user [ID] [–º–∏–Ω—É—Ç—ã] - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–µ–¥–∏–∞\n\n"
            f"<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"/mod_settings - –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            f"/automod [on/off] - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
            f"/toxicity [on/off] - –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏\n"
            f"/spam_filter [on/off] - –ê–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä\n"
            f"/raid_protection [on/off] - –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–æ–≤\n"
            f"/set_warn_limit [—á–∏—Å–ª–æ] - –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            f"/set_mute_time [–º–∏–Ω—É—Ç—ã] - –í—Ä–µ–º—è –º—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            f"<b>üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"/mod_stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            f"/banned_users - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
            f"/muted_users - –°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö\n"
            f"/mod_log - –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        )
        
        await message.reply(moderation_text)
    
    @router.message(Command('ban_user'))
    async def ban_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>üö´ –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n"
                "/tempban_user [ID] [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ban_user 123456789 –°–ø–∞–º –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å\n"
                "/tempban_user 123456789 24 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n\n"
                "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
                "/unban_user [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
                "/banned_users - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].add_moderation_action({
                    'action': 'ban',
                    'user_id': user_id,
                    'admin_id': message.from_user.id,
                    'reason': reason,
                    'ban_type': 'permanent'
                })
            
            await message.reply(
                f"‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–ê–ù–ï–ù</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üëë –ê–¥–º–∏–Ω: {message.from_user.first_name}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                f"üîí –¢–∏–ø: –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            )
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    @router.message(Command('mute_user'))
    async def mute_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.reply(
                "<b>üîá –ú–£–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/mute_user [ID] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/mute_user 123456789 60 –§–ª—É–¥ –≤ —á–∞—Ç–µ\n"
                "/mute_user 123456789 1440 –¢–æ–∫—Å–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n\n"
                "<b>–í—Ä–µ–º—è:</b>\n"
                "60 = 1 —á–∞—Å\n"
                "1440 = 1 –¥–µ–Ω—å\n"
                "10080 = 1 –Ω–µ–¥–µ–ª—è\n\n"
                "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
                "/unmute_user [ID] - –†–∞–∑–º—É—Ç–∏—Ç—å"
            )
            return
        
        try:
            user_id = int(args[0])
            minutes = int(args[1])
            reason = " ".join(args[2:]) if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            mute_until = datetime.now() + timedelta(minutes=minutes)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].add_moderation_action({
                    'action': 'mute',
                    'user_id': user_id,
                    'admin_id': message.from_user.id,
                    'reason': reason,
                    'mute_until': mute_until
                })
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if minutes < 60:
                time_str = f"{minutes} –º–∏–Ω"
            elif minutes < 1440:
                time_str = f"{minutes // 60} —á {minutes % 60} –º–∏–Ω"
            else:
                time_str = f"{minutes // 1440} –¥–Ω {(minutes % 1440) // 60} —á"
            
            await message.reply(
                f"üîá <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ú–£–ß–ï–ù</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üëë –ê–¥–º–∏–Ω: {message.from_user.first_name}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚è∞ –í—Ä–µ–º—è –º—É—Ç–∞: {time_str}\n"
                f"üîì –†–∞–∑–º—É—Ç: {mute_until.strftime('%H:%M %d.%m.%Y')}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
            )
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. ID –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    @router.message(Command('kick_user'))
    async def kick_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>üë¢ –ö–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/kick_user 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].add_moderation_action({
                    'action': 'kick',
                    'user_id': user_id,
                    'admin_id': message.from_user.id,
                    'reason': reason
                })
            
            await message.reply(
                f"üë¢ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ö–ò–ö–ù–£–¢</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üëë –ê–¥–º–∏–Ω: {message.from_user.first_name}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞."
            )
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('warn_user'))
    async def warn_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:</b>\n\n"
                "/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/warn_user 123456789 –ù–µ—É–º–µ—Å—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].add_moderation_action({
                    'action': 'warn',
                    'user_id': user_id,
                    'admin_id': message.from_user.id,
                    'reason': reason,
                    'severity_level': 1
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            warns_count = await get_user_warns_count(modules, user_id)
            
            await message.reply(
                f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –í–´–î–ê–ù–û</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üëë –ê–¥–º–∏–Ω: {message.from_user.first_name}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üî¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {warns_count}/3\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"{'üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö - –∞–≤—Ç–æ–±–∞–Ω!' if warns_count >= 2 else '–ü—Ä–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–∞–Ω–µ–Ω.'}"
            )
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # =================== –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´ ===================
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        trigger_stats = await get_trigger_stats(modules)
        
        triggers_text = (
            f"<b>‚ö° –°–ò–°–¢–ï–ú–ê –ì–ò–ë–ö–ò–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {trigger_stats.get('total_triggers', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {trigger_stats.get('active_triggers', 0)}\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: {trigger_stats.get('global_triggers', 0)}\n"
            f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã—Ö: {trigger_stats.get('local_triggers', 0)}\n"
            f"‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {trigger_stats.get('triggers_today', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {trigger_stats.get('total_activations', 0)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {trigger_stats.get('successful_activations', 0)}\n\n"
            f"<b>üî• –¢–ò–ü–´ –¢–†–ò–ì–ì–ï–†–û–í:</b>\n"
            f"‚Ä¢ <code>exact</code> - –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
            f"‚Ä¢ <code>contains</code> - –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            f"‚Ä¢ <code>starts</code> - –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ—Ä–∞–∑—ã\n"
            f"‚Ä¢ <code>ends</code> - –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ñ—Ä–∞–∑–æ–π\n"
            f"‚Ä¢ <code>regex</code> - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ)\n"
            f"‚Ä¢ <code>ai</code> - AI –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)\n\n"
            f"<b>üìã –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:</b>\n"
            f"/trigger_create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
            f"/trigger_list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            f"/trigger_edit [–∏–º—è] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
            f"/trigger_clone [–∏–º—è] [–Ω–æ–≤–æ–µ_–∏–º—è] - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"/trigger_enable [–∏–º—è] - –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"/trigger_disable [–∏–º—è] - –í—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"/trigger_delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            f"/trigger_test [–∏–º—è] [—Ç–µ–∫—Å—Ç] - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n\n"
            f"<b>üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê:</b>\n"
            f"/trigger_stats [–∏–º—è] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n"
            f"/trigger_top - –°–∞–º—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
            f"/trigger_errors - –¢—Ä–∏–≥–≥–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏\n\n"
            f"<b>üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
            f"‚Ä¢ –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω—ã/–≤—Å–µ/–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)\n"
            f"‚Ä¢ –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"
        )
        
        await message.reply(triggers_text)
    
    @router.message(Command('trigger_create'))
    async def trigger_create_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        create_help = (
            f"<b>‚ö° –°–û–ó–î–ê–ù–ò–ï –ì–ò–ë–ö–û–ì–û –¢–†–ò–ì–ì–ï–†–ê</b>\n\n"
            f"<b>üìù –ë–ê–ó–û–í–´–ô –°–ò–ù–¢–ê–ö–°–ò–°:</b>\n"
            f"/trigger_create [–∏–º—è] [—Ç–∏–ø] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [–Ω–∞—Å—Ç—Ä–æ–π–∫–∏]\n\n"
            f"<b>üéØ –¢–ò–ü–´ –¢–†–ò–ì–ì–ï–†–û–í:</b>\n"
            f"‚Ä¢ <code>exact</code> - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞\n"
            f"‚Ä¢ <code>contains</code> - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É\n"
            f"‚Ä¢ <code>starts</code> - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ—Ä–∞–∑—ã\n"
            f"‚Ä¢ <code>ends</code> - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ñ—Ä–∞–∑–æ–π\n"
            f"‚Ä¢ <code>regex</code> - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>ai</code> - AI –∞–Ω–∞–ª–∏–∑ (—Ç—Ä–µ–±—É–µ—Ç AI –∫–ª—é—á)\n\n"
            f"<b>‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</b>\n"
            f"‚Ä¢ <code>global=true</code> - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö\n"
            f"‚Ä¢ <code>delay=3</code> - –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
            f"‚Ä¢ <code>chance=80</code> - —à–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\n"
            f"‚Ä¢ <code>cooldown=30</code> - –æ—Ç–∫–∞—Ç –º–µ–∂–¥—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º–∏ (—Å–µ–∫)\n"
            f"‚Ä¢ <code>admin_only=true</code> - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n"
            f"‚Ä¢ <code>quiet=true</code> - —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)\n"
            f"‚Ä¢ <code>max_uses=100</code> - –º–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n"
            f"<b>üìã –ü–†–ò–ú–ï–†–´ –°–û–ó–î–ê–ù–ò–Ø:</b>\n\n"
            f"<b>–ü—Ä–æ—Å—Ç–æ–π:</b>\n"
            f"<code>/trigger_create –ø—Ä–∏–≤–µ—Ç exact –ø—Ä–∏–≤–µ—Ç \"–ó–¥–∞—Ä–æ–≤–∞ –≤—Å–µ–º!\"</code>\n\n"
            f"<b>–° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:</b>\n"
            f"<code>/trigger_create —Å–ø–∞–º contains —Å–ø–∞–º \"–ù–µ —Å–ø–∞–º—å —Ç—É—Ç!\" chance=90 delay=1</code>\n\n"
            f"<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π:</b>\n"
            f"<code>/trigger_create –∞–¥–º–∏–Ω starts –∞–¥–º–∏–Ω \"–°–ª—É—à–∞—é —Ç–µ–±—è\" global=true admin_only=true</code>\n\n"
            f"<b>–°–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏:</b>\n"
            f"<code>/trigger_create –±–æ—Ç contains –±–æ—Ç \"–ß—Ç–æ?|–°–ª—É—à–∞—é|–î–∞?\" delay=2</code>\n\n"
            f"<b>üí° –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>|</code> –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>{{name}}</code> –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>{{chat}}</code> –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>{{time}}</code> –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
            f"<b>üö® –í–ê–ñ–ù–û:</b>\n"
            f"‚Ä¢ –ò–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {modules['config'].triggers.max_triggers_per_admin} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–∞ –∞–¥–º–∏–Ω–∞\n"
            f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞–Ω–∏–π Python regex"
        )
        
        await message.reply(create_help)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ –ë–î
        if modules.get('db'):
            triggers = await modules['db'].get_active_triggers()
        else:
            triggers = []
        
        if not triggers:
            await message.reply(
                "üì≠ <b>–ù–ï–¢ –°–û–ó–î–ê–ù–ù–´–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/trigger_create\n\n"
                "–ò–ª–∏ –∏–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
                "/triggers"
            )
            return
        
        list_text = "<b>üìã –°–ü–ò–°–û–ö –í–°–ï–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
        
        active_count = 0
        inactive_count = 0
        
        for i, trigger in enumerate(triggers[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20
            status = "‚úÖ" if trigger.get('is_active', True) else "‚ùå"
            scope = "üåç" if trigger.get('is_global', False) else "üí¨"
            
            if trigger.get('is_active', True):
                active_count += 1
            else:
                inactive_count += 1
            
            list_text += (
                f"{i}. {status} {scope} <b>{trigger.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π')}</b>\n"
                f"   üìù –¢–∏–ø: <code>{trigger.get('trigger_type', 'unknown')}</code>\n"
                f"   üî§ –ü–∞—Ç—Ç–µ—Ä–Ω: <code>{trigger.get('pattern', '')[:40]}{'...' if len(trigger.get('pattern', '')) > 40 else ''}</code>\n"
                f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {trigger.get('usage_count', 0)}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {trigger.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}\n\n"
            )
        
        if len(triggers) > 20:
            list_text += f"... –∏ –µ—â–µ {len(triggers) - 20} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
        
        list_text += (
            f"<b>üìä –ò–¢–û–ì–û:</b>\n"
            f"–í—Å–µ–≥–æ: {len(triggers)} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count} | –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"
            f"<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/trigger_edit [–∏–º—è] - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            f"/trigger_delete [–∏–º—è] - —É–¥–∞–ª–∏—Ç—å\n"
            f"/trigger_stats [–∏–º—è] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        
        await message.reply(list_text)
    
    # =================== –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê ===================
    
    @router.message(Command('custom_words'))
    async def custom_words_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –ë–î
        if modules.get('db'):
            db_words = await modules['db'].get_custom_trigger_words()
            current_words = list(set(CUSTOM_TRIGGER_WORDS + db_words))
        else:
            current_words = CUSTOM_TRIGGER_WORDS
        
        words_text = (
            f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê</b>\n\n"
            f"<b>üìã –ê–ö–¢–ò–í–ù–´–ï –°–õ–û–í–ê ({len(current_words)}):</b>\n"
        )
        
        if current_words:
            for i, word in enumerate(current_words[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                words_text += f"{i}. <code>{word}</code>\n"
            
            if len(current_words) > 15:
                words_text += f"... –∏ –µ—â–µ {len(current_words) - 15} —Å–ª–æ–≤\n"
        else:
            words_text += "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        
        words_text += (
            f"\n<b>üìö –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –°–õ–û–í–ê:</b>\n"
            f"–±–æ—Ç, bot, —Ä–æ–±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫\n\n"
            f"<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞\n"
            f"/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            f"/clear_words - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞\n"
            f"/word_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤\n\n"
            f"<b>üí° –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢:</b>\n"
            f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ \"–º–∞—Å—Ç–µ—Ä\", –±–æ—Ç –±—É–¥–µ—Ç\n"
            f"—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∞:\n"
            f"‚Ä¢ \"–º–∞—Å—Ç–µ—Ä, –ø–æ–º–æ–≥–∏\"\n"
            f"‚Ä¢ \"—ç–π –º–∞—Å—Ç–µ—Ä\"\n"
            f"‚Ä¢ \"–º–∞—Å—Ç–µ—Ä —á—Ç–æ –¥–µ–ª–∞—Ç—å?\"\n\n"
            f"<b>üìù –ü–†–ò–ú–ï–†–´ –ö–û–ú–ê–ù–î:</b>\n"
            f"<code>/add_word –∞–¥–º–∏–Ω</code>\n"
            f"<code>/add_word –±–æ—Å—Å</code>\n"
            f"<code>/add_word —à–µ—Ñ</code>\n"
            f"<code>/remove_word –∞–¥–º–∏–Ω</code>\n\n"
            f"<b>‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–µ\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            f"‚Ä¢ –ù–µ –±–æ–ª–µ–µ 50 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤"
        )
        
        await message.reply(words_text)
    
    @router.message(Command('add_word'))
    async def add_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply(
                "<b>üî§ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/add_word [—Å–ª–æ–≤–æ]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/add_word –∞–¥–º–∏–Ω\n"
                "/add_word –±–æ—Å—Å\n"
                "/add_word —à–µ—Ñ\n"
                "/add_word –º–∞—Å—Ç–µ—Ä\n\n"
                "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
                "‚Ä¢ –û—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                "‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        word = args[0].lower().strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if len(word) < 2:
            await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(word) > 20:
            await message.reply("‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        if not word.replace('—ë', '–µ').isalnum():
            await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ
        global CUSTOM_TRIGGER_WORDS
        if word in CUSTOM_TRIGGER_WORDS:
            await message.reply(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–∑—ã–≤–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(CUSTOM_TRIGGER_WORDS) >= 50:
            await message.reply("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤ (50). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        CUSTOM_TRIGGER_WORDS.append(word)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if modules.get('db'):
            await modules['db'].add_custom_trigger_word(word, message.from_user.id)
        
        await message.reply(
            f"‚úÖ <b>–°–õ–û–í–û –î–û–ë–ê–í–õ–ï–ù–û</b>\n\n"
            f"üî§ –°–ª–æ–≤–æ: <code>{word}</code>\n"
            f"üëë –î–æ–±–∞–≤–∏–ª: {message.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è,\n"
            f"—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ —Å–ª–æ–≤–æ –∫–∞–∫ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            f"<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ \"{word}, –ø–æ–º–æ–≥–∏\"\n"
            f"‚Ä¢ \"—ç–π {word}\"\n"
            f"‚Ä¢ \"{word} —á—Ç–æ –¥–µ–ª–∞—Ç—å?\"\n\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {len(CUSTOM_TRIGGER_WORDS)}/50"
        )
    
    @router.message(Command('remove_word'))
    async def remove_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply(
                "<b>üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/remove_word [—Å–ª–æ–≤–æ]\n\n"
                "<b>–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞:</b>\n" + 
                "\n".join([f"‚Ä¢ {word}" for word in CUSTOM_TRIGGER_WORDS[:10]]) +
                (f"\n... –∏ –µ—â–µ {len(CUSTOM_TRIGGER_WORDS) - 10}" if len(CUSTOM_TRIGGER_WORDS) > 10 else "")
            )
            return
        
        word = args[0].lower().strip()
        global CUSTOM_TRIGGER_WORDS
        
        if word in CUSTOM_TRIGGER_WORDS:
            CUSTOM_TRIGGER_WORDS.remove(word)
            
            await message.reply(
                f"‚úÖ <b>–°–õ–û–í–û –£–î–ê–õ–ï–ù–û</b>\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: <code>{word}</code>\n"
                f"üëë –£–¥–∞–ª–∏–ª: {message.from_user.first_name}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {len(CUSTOM_TRIGGER_WORDS)}"
            )
        else:
            await message.reply(
                f"‚ùå <b>–°–õ–û–í–û –ù–ï –ù–ê–ô–î–ï–ù–û</b>\n\n"
                f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞.\n\n"
                f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:</b>\n" +
                ("\n".join([f"‚Ä¢ {w}" for w in CUSTOM_TRIGGER_WORDS[:5]]) if CUSTOM_TRIGGER_WORDS else "‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç") +
                f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /custom_words –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–≤."
            )
    
    # =================== –ö–û–ú–ê–ù–î–´ –í –ß–ê–¢–ï ===================
    
    @router.message(Command('fact'))
    async def fact_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        fact = random.choice(INTERESTING_FACTS)
        
        fact_response = (
            f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç #{random.randint(1, 999)}:</b>\n\n"
            f"{fact}\n\n"
            f"üéØ –ó–∞–ø—Ä–æ—Å–∏–ª: {message.from_user.first_name}"
        )
        
        await message.reply(fact_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if modules.get('db'):
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': message.from_user.id,
                'chat_id': message.chat.id,
                'text': '/fact',
                'message_type': 'entertainment_command'
            })
    
    @router.message(Command('joke'))
    async def joke_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        joke = random.choice(ANECDOTES)
        
        joke_response = (
            f"üòÇ <b>–ê–Ω–µ–∫–¥–æ—Ç #{random.randint(1, 999)}:</b>\n\n"
            f"{joke}\n\n"
            f"üé≠ –î–ª—è: {message.from_user.first_name}"
        )
        
        await message.reply(joke_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if modules.get('db'):
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': message.from_user.id,
                'chat_id': message.chat.id,
                'text': '/joke',
                'message_type': 'entertainment_command'
            })
    
    @router.message(Command('choice'))
    async def choice_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        outcomes = ["üü° –û–†–ï–õ", "‚ö´ –†–ï–®–ö–ê"]
        result = random.choice(outcomes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç
        reactions = [
            "–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞!",
            "–°—É–¥—å–±–∞ —Ä–µ—à–∏–ª–∞!",
            "–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:",
            "–ò –≤—ã–ø–∞–ª–æ...",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞:"
        ]
        
        choice_response = (
            f"ü™ô <b>{random.choice(reactions)}</b>\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>\n\n"
            f"üéØ {message.from_user.first_name}, –≤–æ—Ç —Ç–≤–æ–π –≤—ã–±–æ—Ä!\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await message.reply(choice_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if modules.get('db'):
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': message.from_user.id,
                'chat_id': message.chat.id,
                'text': f'/choice -> {result}',
                'message_type': 'entertainment_command'
            })
    
    @router.message(Command('topchat'))
    async def topchat_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        if modules.get('db'):
            top_users_data = await get_chat_top_users(modules, message.chat.id, limit=10)
        else:
            top_users_data = []
        
        if not top_users_data:
            # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            top_text = (
                f"<b>üèÜ –¢–û–ü –£–ß–ê–°–¢–ù–ò–ö–û–í –ß–ê–¢–ê</b>\n\n"
                f"<i>üìä –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.</i>\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞,\n"
                f"–∏ –≤—Å–∫–æ—Ä–µ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ø —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n\n"
                f"üéØ –ó–∞–ø—Ä–æ—Å–∏–ª: {message.from_user.first_name}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
        else:
            top_text = f"<b>üèÜ –¢–û–ü –£–ß–ê–°–¢–ù–ò–ö–û–í –ß–ê–¢–ê</b>\n\n"
            
            for i, user_data in enumerate(top_users_data, 1):
                if i <= 3:
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                else:
                    medal = "üèÖ"
                
                name = user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
                
                top_text += (
                    f"{medal} <b>{i}. {name}</b>\n"
                    f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('messages', 0)}\n"
                    f"   ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data.get('ai_requests', 0)}\n"
                    f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity_score', 0)}%\n"
                    f"   üìÖ –í —á–∞—Ç–µ —Å: {user_data.get('first_seen', '–ù–µ–¥–∞–≤–Ω–æ')[:10]}\n\n"
                )
            
            top_text += (
                f"üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}\n"
                f"üéØ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {message.from_user.first_name}"
            )
        
        await message.reply(top_text)
    
    # =================== AI –ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('ai'):
            await message.reply(
                "üö´ <b>AI –ù–ï–î–û–°–¢–£–ü–ï–ù</b>\n\n"
                "AI —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω.\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ:\n"
                "‚Ä¢ OPENAI_API_KEY\n"
                "‚Ä¢ ANTHROPIC_API_KEY"
            )
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "<b>ü§ñ AI –ü–û–ú–û–©–ù–ò–ö (–ì–†–£–ë–´–ô –†–ï–ñ–ò–ú)</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python?\n"
                "/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
                "/ai –ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n"
                "/ai –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?\n\n"
                "<b>‚ö†Ô∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≥—Ä—É–±–æ–≥–æ —Ä–µ–∂–∏–º–∞:</b>\n"
                "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
                "‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏\n"
                "‚Ä¢ –°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É\n"
                "‚Ä¢ –ú–∏–Ω–∏–º—É–º '–≤–æ–¥—ã' –≤ –æ—Ç–≤–µ—Ç–∞—Ö\n\n"
                "<b>üìä –õ–∏–º–∏—Ç—ã:</b>\n"
                f"‚Ä¢ {modules['config'].ai.user_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ {modules['config'].ai.daily_limit} –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å"
            )
            return
        
        await process_ai_request_with_learning(message, user_message, modules)
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.reply(
                "<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã\n"
                "/crypto_top - –¢–æ–ø 10 –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                "/crypto_trending - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/crypto bitcoin\n"
                "/crypto BTC\n"
                "/crypto ethereum\n"
                "/crypto dogecoin\n\n"
                "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:</b>\n"
                "Bitcoin, Ethereum, BNB, Cardano, Solana,\n"
                "Dogecoin, Polkadot, Avalanche –∏ —Ç—ã—Å—è—á–∏ –¥—Ä—É–≥–∏—Ö"
            )
            return
        
        crypto_data = await get_crypto_price_detailed(coin_query, modules)
        
        if not crypto_data:
            await message.reply(
                f"‚ùå <b>–ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: <code>{coin_query}</code>\n\n"
                f"<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã\n"
                f"‚Ä¢ –ú–æ–Ω–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API\n\n"
                f"<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                f"/crypto bitcoin\n"
                f"/crypto eth\n"
                f"/crypto_top"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        change_emoji = "üü¢" if crypto_data['change_24h'] > 0 else "üî¥"
        trend_emoji = "üìà" if crypto_data['change_24h'] > 0 else "üìâ"
        
        crypto_text = (
            f"‚Çø <b>{crypto_data['name']} ({crypto_data['symbol'].upper()})</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> ${crypto_data['price']:,.2f}\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {change_emoji} {crypto_data['change_24h']:+.2f}%\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 7–¥:</b> {crypto_data.get('change_7d', 0):+.2f}%\n"
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{crypto_data.get('market_cap_rank', 'N/A')}\n"
            f"üíé <b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø.:</b> ${crypto_data['market_cap']:,}\n"
            f"üì¶ <b>–û–±—ä–µ–º 24—á:</b> ${crypto_data['volume_24h']:,}\n"
            f"üìà <b>ATH:</b> ${crypto_data.get('ath', 0):,.2f}\n"
            f"üìâ <b>ATL:</b> ${crypto_data.get('atl', 0):,.2f}\n"
            f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"{trend_emoji} <b>–ê–Ω–∞–ª–∏–∑:</b> "
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        change = abs(crypto_data['change_24h'])
        if change > 15:
            crypto_text += "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å! üö®"
        elif change > 10:
            crypto_text += "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
        elif change > 5:
            crypto_text += "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
        elif change > 2:
            crypto_text += "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
        else:
            crypto_text += "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
        
        crypto_text += f"\n\nüéØ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {message.from_user.first_name}"
        
        await message.reply(crypto_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±—É—á–µ–Ω–∏–µ–º
        if modules.get('db'):
            await modules['db'].save_learning_interaction(
                message.from_user.id, message.chat.id,
                f"/crypto {coin_query}", crypto_text,
                {'crypto_data': crypto_data, 'coin_query': coin_query}
            )
    
    # =================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if modules.get('db'):
            user_stats = await modules['db'].get_comprehensive_user_stats(message.from_user.id)
        else:
            user_stats = {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = (
            f"<b>üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name}\n\n"
            f"<b>üí¨ –ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_stats.get('messages', {}).get('total_messages', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('messages', {}).get('messages_today', 0)}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('messages', {}).get('messages_week', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {user_stats.get('messages', {}).get('avg_message_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"<b>ü§ñ AI –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: {user_stats.get('actions', {}).get('ai_request', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('actions', {}).get('ai_request_today', 0)}\n"
            f"‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_stats.get('learning', {}).get('helpful_responses', 0)}\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {user_stats.get('actions', {}).get('crypto_request', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('actions', {}).get('crypto_request_today', 0)}\n\n"
            f"<b>üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –§–∞–∫—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {user_stats.get('actions', {}).get('fact_request', 0)}\n"
            f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç–æ–≤: {user_stats.get('actions', {}).get('joke_request', 0)}\n"
            f"‚Ä¢ –í—ã–±–æ—Ä–æ–≤ (–æ—Ä–µ–ª/—Ä–µ—à–∫–∞): {user_stats.get('actions', {}).get('choice_request', 0)}\n\n"
            f"<b>üìà –†–ï–ô–¢–ò–ù–ì –ò –ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –ú–µ—Å—Ç–æ –≤ —á–∞—Ç–µ: #N/A\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {calculate_activity_level(user_stats)}\n"
            f"‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {calculate_engagement_score(user_stats)}%\n\n"
            f"<b>üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
            f"‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {user_stats.get('learning', {}).get('total_interactions', 0)}\n"
            f"‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {user_stats.get('learning', {}).get('avg_satisfaction', 0):.1f}/5\n\n"
            f"<b>‚è∞ –í–†–ï–ú–Ø –ò –î–ê–¢–´:</b>\n"
            f"‚Ä¢ –í —á–∞—Ç–µ —Å: {user_stats.get('user_data', {}).get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats.get('user_data', {}).get('last_seen', '–°–µ–π—á–∞—Å')[:16]}\n"
            f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        )
        
        await message.reply(stats_text)
    
    @router.message(Command('global_stats'))
    async def global_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if modules.get('db'):
            global_stats = await modules['db'].get_comprehensive_user_stats(0)  # 0 –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        else:
            global_stats = {}
        
        global_text = (
            f"<b>üåç –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            f"<b>üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {global_stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {global_stats.get('active_week', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {global_stats.get('new_week', 0)}\n"
            f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats.get('premium_users', 0)}\n\n"
            f"<b>üí¨ –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {global_stats.get('total_messages', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('messages_today', 0)}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {global_stats.get('messages_week', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {global_stats.get('avg_message_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"<b>ü§ñ AI –°–ò–°–¢–ï–ú–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats.get('total_ai_requests', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('ai_requests_today', 0)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {global_stats.get('successful_ai', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {global_stats.get('avg_ai_rating', 0):.1f}/5\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats.get('total_crypto_requests', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('crypto_requests_today', 0)}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {global_stats.get('unique_coins', 0)}\n\n"
            f"<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {global_stats.get('total_moderation_actions', 0)}\n"
            f"‚Ä¢ –ë–∞–Ω–æ–≤: {global_stats.get('total_bans', 0)}\n"
            f"‚Ä¢ –ú—É—Ç–æ–≤: {global_stats.get('total_mutes', 0)}\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {global_stats.get('total_warnings', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('moderation_actions_today', 0)}\n\n"
            f"<b>‚ö° –¢–†–ò–ì–ì–ï–†–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {global_stats.get('total_triggers', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {global_stats.get('active_triggers', 0)}\n"
            f"‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {global_stats.get('trigger_activations', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('trigger_activations_today', 0)}\n\n"
            f"<b>üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {global_stats.get('total_learning_interactions', 0)}\n"
            f"‚Ä¢ –û–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {global_stats.get('learned_patterns', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {global_stats.get('learning_accuracy', 0):.1f}%\n\n"
            f"<b>üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –§–∞–∫—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–æ: {global_stats.get('facts_shown', 0)}\n"
            f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–æ: {global_stats.get('jokes_told', 0)}\n"
            f"‚Ä¢ –í—ã–±–æ—Ä–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {global_stats.get('choices_made', 0)}\n\n"
            f"<b>üíæ –°–ò–°–¢–ï–ú–ê:</b>\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {global_stats.get('uptime', 'N/A')}\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è –ë–î: 3.0 Extended\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {global_stats.get('memory_usage', 'N/A')}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {global_stats.get('last_restart', 'N/A')}\n\n"
            f"üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        )
        
        await message.reply(global_text)
    
    # =================== –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===================
    
    @router.message(Command('learning_stats'))
    async def learning_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        learning_stats = await get_learning_statistics_detailed(modules)
        
        stats_text = (
            f"<b>üß† –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
            f"<b>üìö –î–ê–ù–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {learning_stats.get('total_conversations', 0)}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {learning_stats.get('unique_users', 0)}\n"
            f"‚Ä¢ –û–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {learning_stats.get('learned_patterns', 0)}\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π: {learning_stats.get('contextual_links', 0)}\n"
            f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {learning_stats.get('user_profiles', 0)}\n\n"
            f"<b>üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:</b>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {learning_stats.get('accuracy_score', 0)}%\n"
            f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {learning_stats.get('relevance_score', 0)}%\n"
            f"‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {learning_stats.get('satisfaction_score', 0)}%\n"
            f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {learning_stats.get('learning_speed', 0)}%\n\n"
            f"<b>üéØ –¢–û–ü –û–ë–£–ß–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:</b>\n"
        )
        
        top_patterns = learning_stats.get('top_patterns', [])
        for i, (pattern, count) in enumerate(top_patterns[:7], 1):
            stats_text += f"{i}. <code>{pattern}</code>: {count} —Ä–∞–∑\n"
        
        stats_text += (
            f"\n<b>üë• –¢–û–ü –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>\n"
        )
        
        top_users = learning_stats.get('top_learning_users', [])
        for i, (user_name, interactions) in enumerate(top_users[:5], 1):
            stats_text += f"{i}. {user_name}: {interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
        
        stats_text += (
            f"\n<b>üìä –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {learning_stats.get('interactions_today', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {learning_stats.get('new_patterns_today', 0)}\n"
            f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞: {learning_stats.get('improvements_today', 0)}\n\n"
            f"<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/learning_export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è\n"
            f"/learning_reset - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è\n"
            f"/learning_backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
            f"/user_profile [ID] - –ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        )
        
        await message.reply(stats_text)
    
    # =================== –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===================
    
    @router.message(Command('random_messages'))
    async def random_messages_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply(
                "<b>üí¨ –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–ß–ê–ô–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/random_messages [on/off]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/random_messages on - –í–∫–ª—é—á–∏—Ç—å\n"
                "/random_messages off - –í—ã–∫–ª—é—á–∏—Ç—å\n\n"
                "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/random_chance [0-100] - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–Ω—Å (%)\n"
                "/random_test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–æ' if modules['config'].bot.random_reply_chance > 0 else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"‚Ä¢ –®–∞–Ω—Å: {modules['config'].bot.random_reply_chance * 100:.1f}%\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 1-2 —á–∞—Å–∞"
            )
            return
        
        setting = args[0].lower()
        if setting not in ['on', 'off']:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        enabled = setting == 'on'
        if modules.get('db'):
            await modules['db'].execute(
                "INSERT OR REPLACE INTO system_settings (key, value) VALUES (?, ?)",
                ('random_messages_enabled', 'true' if enabled else 'false')
            )
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await message.reply(
            f"‚úÖ <b>–°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø {status.upper()}</b>\n\n"
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {message.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"{'üé≤ –ë–æ—Ç –±—É–¥–µ—Ç –∏–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç—ã.' if enabled else 'üîá –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'}\n\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"/random_chance [%] - —à–∞–Ω—Å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"/random_test - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í –ò –ú–ï–î–ò–ê ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        await save_user_and_message(message, modules)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º
        sticker_analysis = await analyze_sticker_with_learning(message.sticker, modules, message.from_user.id)
        
        response_type = sticker_analysis.get('response_type', 'emoji')
        
        if response_type == 'sticker' and RESPONSE_STICKERS:
            await message.reply_sticker(random.choice(RESPONSE_STICKERS))
        elif response_type == 'text':
            gruff_responses = [
                "–Ø—Å–Ω–æ.", "–ü–æ–Ω—è—Ç–Ω–æ.", "–ê–≥–∞.", "–ò —á—Ç–æ?", "–ù—É –∏?",
                "–°—Ç–∏–∫–µ—Ä–∫–∏ —à–ª–µ—à—å?", "–í–∏–¥–µ–ª —É–∂–µ.", "–ß–µ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å?",
                "–ë–µ–∑ —Å–ª–æ–≤ –ø–æ–Ω—è—Ç–Ω–æ.", "–ö–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ."
            ]
            await message.reply(random.choice(gruff_responses))
        else:
            # –†–µ–∞–∫—Ü–∏—è —ç–º–æ–¥–∑–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            await asyncio.sleep(random.uniform(0.5, 1.5))
            await message.reply(random.choice(RESPONSE_EMOJIS))
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞—Ö
        if modules.get('db'):
            await modules['db'].save_learning_interaction(
                message.from_user.id, message.chat.id,
                f"[STICKER: {message.sticker.emoji or '‚ùì'}]",
                sticker_analysis.get('response_sent', 'emoji_reaction'),
                sticker_analysis
            )
    
    # =================== –£–ú–ù–´–ï –û–¢–í–ï–¢–´ –ò –û–ë–£–ß–ï–ù–ò–ï ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_adaptive_reply_to_bot(message, modules)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            await process_adaptive_smart_text(message, modules, bot_info)
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_adaptive_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üíÄ –ü–û–õ–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –ê–î–ê–ü–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –° –û–ë–£–ß–ï–ù–ò–ï–ú ===================

async def process_adaptive_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    try:
        await save_user_and_message(message, modules)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
        should_respond = await enhanced_should_respond_check(message, modules, bot_info)
        
        if should_respond:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context = await get_adaptive_user_context(modules, message.from_user.id, message.chat.id)
            
            if modules.get('ai'):
                await process_ai_request_with_learning(message, message.text, modules, user_context)
            else:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                learned_response = await get_learned_response(modules, message.from_user.id, message.text)
                
                if learned_response:
                    await message.reply(learned_response)
                else:
                    # –ì—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    await message.reply(random.choice(GRUFF_RESPONSES))
        else:
            # –û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (0.3% —à–∞–Ω—Å)
            if random.random() < 0.003:
                random_reactions = [".", "ü§î", "üëÄ", "–•–º.", "–ê–≥–∞."]
                await message.reply(random.choice(random_reactions))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def enhanced_should_respond_check(message: Message, modules, bot_info) -> bool:
    """üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # 1. –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # 2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        standard_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫', 'assistant']
        for keyword in standard_keywords:
            if keyword in text:
                return True
        
        # 3. –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞
        global CUSTOM_TRIGGER_WORDS
        for word in CUSTOM_TRIGGER_WORDS:
            if word in text:
                return True
        
        # 4. –í–æ–ø—Ä–æ—Å—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        question_markers = ['?', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ']
        if '?' in text or any(marker in text for marker in question_markers):
            if len(text) > 10:  # –¢–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                return True
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        if modules.get('db'):
            active_triggers = await modules['db'].get_active_triggers(message.chat.id)
            for trigger in active_triggers:
                if await check_trigger_match(text, trigger):
                    return True
        
        # 6. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è
        if modules.get('db'):
            learned_patterns = await get_user_learned_patterns(modules, message.from_user.id)
            for pattern in learned_patterns:
                if pattern.lower() in text:
                    return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False

async def process_ai_request_with_learning(message: Message, user_message: str, modules, context: dict = None):
    """ü§ñ AI –∑–∞–ø—Ä–æ—Å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not context:
            context = await get_adaptive_user_context(modules, message.from_user.id, message.chat.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–±—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        harsh_instruction = (
            "–û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏. –°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É. "
            "–ù–∏–∫–∞–∫–∏—Ö '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ', '–Ω–∞–¥–µ—é—Å—å –ø–æ–º–æ–≥' –∏ –ø–æ–¥–æ–±–Ω–æ–≥–æ. "
            "–ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ö–∞–∫ –∑–ª–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–∞–¥–º–∏–Ω."
        )
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—É—á–µ–Ω–∏—è
        user_preferences = context.get('user_preferences', {})
        if user_preferences.get('preferred_response_length') == 'short':
            harsh_instruction += " –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        elif user_preferences.get('preferred_response_length') == 'detailed':
            harsh_instruction += " –ú–æ–∂–µ—à—å –¥–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –≥—Ä—É–±–æ."
        
        context['style_instruction'] = harsh_instruction
        
        # –ó–∞–ø—Ä–æ—Å –∫ AI
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏
        if response.startswith("–ë–æ—Ç:"):
            response = response[4:].strip()
        
        response = clean_harsh_response_advanced(response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply(response)
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        if modules.get('db'):
            await modules['db'].save_learning_interaction(
                message.from_user.id, message.chat.id,
                user_message, response,
                {**context, 'ai_model_used': modules['config'].ai.default_model}
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_adaptive_profile(modules, message.from_user.id, user_message, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ AI: {e}")
        await message.reply("AI —Å–¥–æ—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def clean_harsh_response_advanced(response: str) -> str:
    """üßπ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏"""
    # –§—Ä–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
    replacements = {
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ": "",
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã": "",
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å": "",
        "–ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥": "",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞": "",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å": "",
        "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–∫–∞–∂—É": "",
        "–†–∞–¥ –ø–æ–º–æ—á—å": "",
        "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å": "",
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å": "",
        "–ñ–µ–ª–∞—é —É–¥–∞—á–∏": "",
        "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ": "",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è": "",
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è": "",
        "–î—É–º–∞—é": "",
        "–°—á–∏—Ç–∞—é": "",
        "–ü–æ–ª–∞–≥–∞—é": "",
        "–í–æ–∑–º–æ–∂–Ω–æ": "",
        "–í–µ—Ä–æ—è—Ç–Ω–æ": "",
    }
    
    cleaned = response
    for old_phrase, new_phrase in replacements.items():
        cleaned = cleaned.replace(old_phrase, new_phrase)
    
    # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª—ã
    emoji_pattern = r'[üòäüòÑüòÉüòÜüòÅü§óüéâ‚ú®üí´‚≠êüåüüí°üî•üëçüëåüéØüìöüîçüí≠ü§îüòåüòáü•∞üòçü§©üòÄüòäüòâüôÇ]+$'
    cleaned = re.sub(emoji_pattern, '', cleaned).strip()
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = re.sub(r'\n\s*\n', '\n', cleaned)
    
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    cleaned = cleaned.rstrip()
    
    return cleaned.strip()

# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

def check_chat_allowed(chat_id: int) -> bool:
    """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    if not ALLOWED_CHAT_IDS:
        return True
    return chat_id in ALLOWED_CHAT_IDS

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if modules.get('db'):
            user = message.from_user
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False),
                'is_bot': user.is_bot
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': message.chat.id,
                'text': message.text or '',
                'message_type': 'text' if message.text else 'media',
                'has_media': bool(message.photo or message.video or message.document)
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def get_moderation_stats(modules) -> dict:
    """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        if not modules.get('db'):
            return {}
        
        stats = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        stats['total_bans'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM bans") or {'count': 0}
        stats['active_bans'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM bans WHERE is_active = TRUE") or {'count': 0}
        stats['total_mutes'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM mutes") or {'count': 0}
        stats['active_mutes'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM mutes WHERE is_active = TRUE AND mute_until > datetime('now')") or {'count': 0}
        stats['total_warns'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM warnings") or {'count': 0}
        stats['total_kicks'] = await modules['db'].fetchone("SELECT COUNT(*) as count FROM kicks") or {'count': 0}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
        for key, value in stats.items():
            if isinstance(value, dict) and 'count' in value:
                stats[key] = value['count']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        stats['auto_mod_enabled'] = False  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        stats['toxicity_detection'] = False
        stats['spam_detection'] = False
        stats['raid_protection'] = False
        stats['log_actions'] = True
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return {}

async def get_user_warns_count(modules, user_id: int) -> int:
    """‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not modules.get('db'):
            return 0
        
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM warnings WHERE user_id = ? AND is_active = TRUE",
            (user_id,)
        )
        
        return result['count'] if result else 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
        return 0

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ - –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)
async def get_trigger_stats(modules): return {'total_triggers': 0, 'active_triggers': 0}
async def get_crypto_price_detailed(coin_query, modules): return None
async def get_chat_top_users(modules, chat_id, limit): return []
async def calculate_activity_level(stats): return "–°—Ä–µ–¥–Ω–∏–π"
async def calculate_engagement_score(stats): return 75
async def get_learning_statistics_detailed(modules): return {}
async def analyze_sticker_with_learning(sticker, modules, user_id): return {"response_type": "emoji"}
async def get_adaptive_user_context(modules, user_id, chat_id): return {}
async def get_learned_response(modules, user_id, text): return None
async def check_trigger_match(text, trigger): return False
async def get_user_learned_patterns(modules, user_id): return []
async def update_user_adaptive_profile(modules, user_id, message, response): pass
async def process_adaptive_reply_to_bot(message, modules): pass

async def random_messages_sender(modules):
    """üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    
    extended_random_messages = [
        "–ö–∞–∫ –¥–µ–ª–∞ –≤ —á–∞—Ç–µ?",
        "–ö—Ç–æ-–Ω–∏–±—É–¥—å —Ç—É—Ç –µ—Å—Ç—å?", 
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º —Ç—É—Ç –≥–æ–≤–æ—Ä—è—Ç...",
        "–ú–æ–∂–µ—Ç –∫—Ç–æ —Ñ–∞–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–Ω–∞–µ—Ç?",
        "/joke - —Ö–æ—Ç–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç?",
        "–¢–∏—à–∏–Ω–∞ –≤ —á–∞—Ç–µ... –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ –¥–µ–ª–∞? /crypto bitcoin",
        "–ê –ø–æ–º–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞ –∫–æ–≥–¥–∞ –±–∏—Ç–∫–æ–∏–Ω –±—ã–ª –ø–æ –¥–æ–ª–ª–∞—Ä—É?",
        "–ö—Ç–æ-—Ç–æ —Ç—É—Ç —É–º–Ω—ã–π –µ—Å—Ç—å?",
        "–ú–æ–∂–µ—Ç –ø–æ–±–æ–ª—Ç–∞–µ–º?",
        "/fact - —É–∑–Ω–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ",
        "–ê–¥–º–∏–Ω—ã —Å–ø—è—Ç?",
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
        "–ù–∞—Ä–æ–¥, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "/choice - –Ω—É–∂–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä?"
    ]
    
    while True:
        try:
            # –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤
            await asyncio.sleep(random.randint(3600, 10800))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            random_enabled = True  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
            if not random_enabled:
                continue
            
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å (0.5%)
            base_chance = 0.005
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            current_hour = datetime.now().hour
            if 10 <= current_hour <= 22:  # –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è - –±–æ–ª—å—à–µ —à–∞–Ω—Å
                base_chance *= 2
            
            if random.random() > base_chance:
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            if not ALLOWED_CHAT_IDS:
                continue
                
            chat_id = random.choice(ALLOWED_CHAT_IDS)
            message_text = random.choice(extended_random_messages)
            
            await modules['bot'].send_message(chat_id, message_text)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}: {message_text}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].save_message({
                    'message_id': 0,
                    'user_id': modules['bot'].id,
                    'chat_id': chat_id,
                    'text': message_text,
                    'message_type': 'random_bot_message'
                })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç


__all__ = ["register_all_handlers"]