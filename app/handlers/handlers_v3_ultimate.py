#!/usr/bin/env python3
"""
üß† UPDATED HANDLERS v3.0 - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ï–õ–û–í–ï–ö–û–ü–û–î–û–ë–ù–û–ì–û AI –ò –ú–ï–î–ò–ê
üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π

–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –ú–û–î–£–õ–ò:
‚Ä¢ Human-like AI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π
‚Ä¢ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã (—Å—Ç–∏–∫–µ—Ä—ã, GIF, –∞—É–¥–∏–æ)
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã
"""

import logging
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, Sticker
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from human_ai_service import HumanLikeAI, create_conversation_context
from conversation_memory import ConversationMemoryModule
from advanced_triggers import AdvancedTriggersModule
from media_triggers import MediaTriggersModule

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
last_activity_time = {}
conversation_contexts = {}
bot_trigger_words = ["–±–æ—Ç", "bot", "—Ä–æ–±–æ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "assistant", "—ç–π", "—Å–ª—É—à–∞–π", "–º–∞–∫—Å"]


def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ AI –º–æ–¥—É–ª—è–º–∏"""
    
    router = Router()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    human_ai = None
    memory_module = None
    advanced_triggers = None
    media_triggers = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username} ({bot_info.first_name})")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
    
    async def initialize_ai_modules():
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥—É–ª–µ–π"""
        nonlocal human_ai, memory_module, advanced_triggers, media_triggers
        
        try:
            # Human-like AI
            if modules.get('ai'):
                human_ai = HumanLikeAI(modules['config'])
                logger.info("üß† Human-like AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
            if modules.get('db'):
                memory_module = ConversationMemoryModule(modules['db'])
                await memory_module.initialize()
                logger.info("üí≠ –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if modules.get('db'):
                advanced_triggers = AdvancedTriggersModule(
                    modules['db'], 
                    modules['config'], 
                    modules.get('ai')
                )
                await advanced_triggers.initialize()
                logger.info("‚ö° –ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ú–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if modules.get('db') and modules.get('bot'):
                media_triggers = MediaTriggersModule(
                    modules['db'],
                    modules['config'],
                    modules['bot']
                )
                await media_triggers.initialize()
                logger.info("üé≠ –ú–æ–¥—É–ª—å –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π: {e}")
    
    asyncio.create_task(get_bot_info())
    asyncio.create_task(initialize_ai_modules())
    
    # ================= –§–ò–õ–¨–¢–† –î–û–°–¢–£–ü–ê –ö –ß–ê–¢–ê–ú =================
    
    async def check_chat_access(message: Message) -> bool:
        """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        config = modules['config']
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –≤–µ–∑–¥–µ
        if user_id in config.bot.admin_ids:
            return True
            
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
        if not config.bot.allowed_chat_ids:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if chat_id not in config.bot.allowed_chat_ids:
            logger.info(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —á–∞—Ç {chat_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
            return False
            
        return True
    
    # ================= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–ë–£–ß–ï–ù–ò–ï =================
    
    async def log_and_learn(message: Message):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            if modules.get('db'):
                await modules['db'].log_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    username=message.from_user.username or '',
                    full_name=message.from_user.full_name or '',
                    text=message.text or '',
                    message_type='text',
                    timestamp=datetime.now()
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if memory_module:
                await memory_module.update_user_interaction(
                    message.from_user.id,
                    message.text or '',
                    "general",  # –¢–µ–º–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                    "neutral"   # –≠–º–æ—Ü–∏—è –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if memory_module and message.text:
                facts = await memory_module.extract_facts_from_message(
                    message.from_user.id, 
                    message.text
                )
                for fact in facts:
                    await memory_module.add_personal_fact(
                        fact.user_id, 
                        fact.category, 
                        fact.fact, 
                        fact.confidence
                    )
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # ================= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        """üöÄ –ö–æ–º–∞–Ω–¥–∞ /start —Å AI –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        user = message.from_user
        user_name = user.first_name or "–¥—Ä—É–≥"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context = create_conversation_context(user.id, message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if memory_module:
            user_context = await memory_module.get_user_context(user.id, message.chat.id)
            context.last_messages = user_context.get('memories', [])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            profile = user_context.get('profile', {})
            context.relationship_level = profile.get('relationship_level', 'stranger')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if human_ai:
            greeting_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –µ–≥–æ —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –ú–∞–∫—Å. –£—á–∏—Ç—ã–≤–∞–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {context.relationship_level}"
            
            try:
                greeting = await human_ai.generate_human_response(greeting_prompt, context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
                greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –Ø –ú–∞–∫—Å, —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ –±–æ–ª—Ç–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã!"
        else:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –Ø –ú–∞–∫—Å, –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!"
        
        await message.reply(greeting)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        conversation_contexts[f"{user.id}_{message.chat.id}"] = context
        
        logger.info(f"‚úÖ /start: {user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        """üìñ –°–ø—Ä–∞–≤–∫–∞ —Å AI –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        # –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞
        help_text = (
            "üß† **–ú–∞–∫—Å - –£–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫**\n\n"
            "‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤\n"
            "‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã –∏ GIF\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n\n"
            "üí¨ **–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è:**\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /ai, /stats, /about\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Ç–∏–∫–µ—Ä—ã - –æ—Ç–≤–µ—á—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "üéØ **–û–±—Ä–∞—â–µ–Ω–∏—è –∫–æ –º–Ω–µ:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ '–ú–∞–∫—Å' –∏–ª–∏ '–±–æ—Ç'\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è - —è –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç!"
        )
        
        await message.reply(help_text)
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        """üß† AI –ø–æ–º–æ—â–Ω–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "üí° **–£–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤!**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –º—ã—Å–ª—å:\n"
                "‚Ä¢ /ai –ö–∞–∫ –¥–µ–ª–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º?\n"
                "‚Ä¢ /ai –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –∂–∏–∑–Ω–∏?\n"
                "‚Ä¢ /ai –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å Python\n\n"
                "–Ø –æ—Ç–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏! ü§ñ‚û°Ô∏èüë®"
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            context_key = f"{message.from_user.id}_{message.chat.id}"
            context = conversation_contexts.get(context_key)
            
            if not context:
                context = create_conversation_context(message.from_user.id, message.chat.id)
                conversation_contexts[context_key] = context
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç—å—é
            if memory_module:
                user_context = await memory_module.get_user_context(
                    message.from_user.id, 
                    message.chat.id
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_preferences = user_context.get('profile', {})
                context.last_messages.extend([
                    {'role': 'user', 'content': memory['summary']} 
                    for memory in user_context.get('memories', [])[-3:]
                ])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Human-like AI
            if human_ai:
                response = await human_ai.generate_human_response(user_message, context)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                await human_ai.update_context(context, user_message, response)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
                if memory_module:
                    await memory_module.save_conversation_memory(
                        message.from_user.id,
                        message.chat.id,
                        context.topic or "general",
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–û—Ç–≤–µ—Ç: {response}",
                        [user_message],
                        context.mood,
                        0.8  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                    )
            else:
                response = "AI –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é! üòä"
            
            await message.reply(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∑–≥–æ–º... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§Ø")
    
    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í =================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        """üé≠ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        if not await check_chat_access(message):
            return
        
        await log_and_learn(message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = {
                'user_id': message.from_user.id,
                'chat_id': message.chat.id,
                'user_name': message.from_user.first_name,
                'chat_type': message.chat.type
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞ –º–æ–¥—É–ª—å
            if media_triggers:
                media_responses = await media_triggers.process_sticker(
                    message.sticker,
                    message.from_user.id,
                    message.chat.id,
                    context
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç—ã
                for media_response in media_responses:
                    await media_triggers.send_media_response(message.chat.id, media_response)
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä
            elif random.random() < 0.1:  # 10% —à–∞–Ω—Å
                sticker_responses = [
                    "–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üëç",
                    "–ü–æ–Ω—è–ª —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä",
                    "üé≠",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
                    "üòÑ"
                ]
                await message.reply(random.choice(sticker_responses))
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
    
    # ================= –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê =================
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å AI"""
        
        # –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        await log_and_learn(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if not await check_chat_access(message):
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if message.text.startswith('/'):
            return
            
        text_lower = message.text.lower()
        should_respond = False
        response_type = "none"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context_key = f"{message.from_user.id}_{message.chat.id}"
        context = conversation_contexts.get(context_key)
        
        if not context:
            context = create_conversation_context(message.from_user.id, message.chat.id)
            conversation_contexts[context_key] = context
        
        # –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        enriched_context = {
            'user_id': message.from_user.id,
            'chat_id': message.chat.id,
            'user_name': message.from_user.first_name or '–¥—Ä—É–≥',
            'chat_type': message.chat.type,
            'original_message': message.text,
            'timestamp': datetime.now()
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message and message.reply_to_message.from_user.id == modules['bot'].id:
            should_respond = True
            response_type = "reply"
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        elif any(trigger_word in text_lower for trigger_word in bot_trigger_words):
            should_respond = True
            response_type = "mention"
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ (@username)
        elif bot_info and f'@{bot_info.username.lower()}' in text_lower:
            should_respond = True
            response_type = "username_mention"
        
        # 4. –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º
        elif message.chat.type == 'private':
            should_respond = True
            response_type = "private"
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        elif advanced_triggers:
            try:
                trigger_responses = await advanced_triggers.process_message(
                    message.text,
                    message.from_user.id,
                    message.chat.id,
                    enriched_context
                )
                
                if trigger_responses:
                    should_respond = True
                    response_type = "advanced_trigger"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                    for trigger_response in trigger_responses:
                        await message.reply(trigger_response)
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
                    
                    return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        if media_triggers:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                emotion = enriched_context.get('detected_emotion', 'neutral')
                
                media_responses = await media_triggers.process_text_for_media(
                    message.text,
                    emotion,
                    enriched_context
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç—ã
                for media_response in media_responses:
                    await media_triggers.send_media_response(message.chat.id, media_response)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if should_respond:
            await handle_intelligent_response(message, context, response_type, enriched_context)
        
        # –û—á–µ–Ω—å —Ä–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        elif random.random() < 0.001:  # 0.1% —à–∞–Ω—Å
            await handle_random_activity(message, modules)
    
    async def handle_intelligent_response(message: Message, context, response_type: str, enriched_context: Dict):
        """üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            logger.info(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç: —Ç–∏–ø={response_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={message.from_user.id}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if memory_module:
                user_context = await memory_module.get_user_context(
                    message.from_user.id, 
                    message.chat.id
                )
                enriched_context.update(user_context.get('profile', {}))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                personal_facts = user_context.get('personal_facts', [])
                if personal_facts:
                    enriched_context['personal_facts'] = personal_facts[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–∫—Ç–æ–≤
            
            response = None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Human-like AI
            if human_ai:
                try:
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                    if response_type == "reply":
                        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."
                    elif response_type in ["mention", "username_mention"]:
                        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫–æ –º–Ω–µ: {message.text}. –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
                    elif response_type == "private":
                        prompt = message.text
                    else:
                        prompt = message.text
                    
                    response = await human_ai.generate_human_response(prompt, context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    await human_ai.update_context(context, message.text, response)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Human-like AI: {e}")
            
            # Fallback –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç AI
            if not response:
                fallback_responses = {
                    "reply": [
                        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å!",
                        "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è",
                        "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω",
                        "–ê —á—Ç–æ —Ç—ã –µ—â–µ –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
                        "–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç!"
                    ],
                    "mention": [
                        "–°–ª—É—à–∞—é —Ç–µ–±—è!",
                        "–ß—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å?",
                        "–î–∞, —è –∑–¥–µ—Å—å üëã",
                        "–û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?",
                        "–ß–µ –Ω–∞–¥–æ? üòÑ"
                    ],
                    "private": [
                        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!",
                        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ü—Ä–æ–¥–æ–ª–∂–∞–π",
                        "–ò –∫–∞–∫ —Ç–µ–±–µ —ç—Ç–æ?",
                        "–ü–æ–Ω—è–ª, —á—Ç–æ –¥–∞–ª—å—à–µ?",
                        "–•–º, –ª—é–±–æ–ø—ã—Ç–Ω–æ ü§î"
                    ]
                }
                
                responses_list = fallback_responses.get(response_type, fallback_responses["mention"])
                response = random.choice(responses_list)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.reply(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
            if memory_module:
                await memory_module.save_conversation_memory(
                    message.from_user.id,
                    message.chat.id,
                    context.topic or "general",
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({response_type}): {message.text}\n–û—Ç–≤–µ—Ç: {response}",
                    [message.text],
                    context.mood,
                    0.7  # –í–∞–∂–Ω–æ—Å—Ç—å –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def handle_random_activity(message: Message, modules):
        """üé≤ –û—á–µ–Ω—å —Ä–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            chat_id = message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            now = datetime.now()
            if chat_id in last_activity_time:
                if now - last_activity_time[chat_id] < timedelta(hours=3):
                    return  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            last_activity_time[chat_id] = now
            
            random_responses = [
                "–ö—Å—Ç–∞—Ç–∏...",
                "–ê —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ —Ç–æ–º, —á—Ç–æ...",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –≤–∞—à–µ–π –±–µ—Å–µ–¥–æ–π ü§î",
                "–¢–∏—à–∏–Ω–∞... üëÄ",
                "–ï—Å—Ç—å –∫—Ç–æ –∂–∏–≤–æ–π?",
                "–ß—Ç–æ-—Ç–æ —Ç–∏—Ö–æ —Å—Ç–∞–ª–æ",
                "–ú-–¥–∞..."
            ]
            
            response = random.choice(random_responses)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await asyncio.sleep(random.randint(10, 60))
            
            await modules['bot'].send_message(chat_id, response)
            logger.info(f"üé≤ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ {chat_id}: {response}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    # ================= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =================
    
    @router.message(Command('memory_stats'))
    async def memory_stats_handler(message: Message):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        if not memory_module:
            await message.reply("‚ùå –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
            user_count = len(memory_module.user_profiles)
            memory_count = len(memory_module.conversation_memories)
            facts_count = sum(len(facts) for facts in memory_module.personal_facts.values())
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏**\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏:** {user_count}\n"
                f"üí≠ **–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {memory_count}\n"
                f"üìù **–õ–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤:** {facts_count}\n\n"
                f"üß† **–ü–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–±—É—á–∞–µ—Ç—Å—è!**"
            )
            
            await message.reply(stats_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏")
    
    @router.message(Command('triggers_stats'))
    async def triggers_stats_handler(message: Message):
        """‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        if not advanced_triggers:
            await message.reply("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        
        try:
            stats = await advanced_triggers.get_triggers_stats()
            
            stats_text = (
                f"‚ö° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤**\n\n"
                f"üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {stats['total_triggers']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_triggers']}\n"
                f"‚Ä¢ –û–±—â–∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {stats['total_usage']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {stats['average_success_rate']:.1%}\n\n"
                f"üèÜ **–¢–æ–ø —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:**\n"
            )
            
            for i, trigger in enumerate(stats['top_triggers'], 1):
                stats_text += f"{i}. {trigger['name']}: {trigger['usage_count']} ({trigger['success_rate']:.1%})\n"
            
            await message.reply(stats_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üéõÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å AI –º–æ–¥—É–ª—è–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


def register_basic_handlers(dp, modules):
    """üîß –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"""
    register_all_handlers(dp, modules)


# ================= –≠–ö–°–ü–û–†–¢ =================

__all__ = ["register_all_handlers", "register_basic_handlers"]