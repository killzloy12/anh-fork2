#!/usr/bin/env python3
"""
üíÄ HANDLERS v3.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
üî• –í–°–ï –û–®–ò–ë–ö–ò –£–°–¢–†–ê–ù–ï–ù–´!

–ò–°–ü–†–ê–í–õ–ï–ù–û:
‚Ä¢ –£–±—Ä–∞–Ω await –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
‚Ä¢ –£–±—Ä–∞–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import logging
import re
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
import json
import os
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ALLOWED_CHAT_IDS = []
CUSTOM_TRIGGER_WORDS = []
LEARNING_DATA = {}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
INTERESTING_FACTS = [
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å.",
    "–ë–∞–Ω–∞–Ω—ã - —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
    "–ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç.",
    "–ú–µ–¥—É–∑—ã –Ω–∞ 95% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–¥—ã –∏ –Ω–µ –∏–º–µ—é—Ç –º–æ–∑–≥–∞.",
    "–ß–µ–ª–æ–≤–µ–∫ –∑–∞ –≤—Å—é –∂–∏–∑–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ–µ 5 –æ–±–æ—Ä–æ—Ç–∞–º –≤–æ–∫—Ä—É–≥ –ó–µ–º–ª–∏.",
    "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –ø–ª–∞–∫–∞—Ç—å - —Å–ª–µ–∑—ã –Ω–µ —Å—Ç–µ–∫–∞—é—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏.",
    "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ö–æ–ª–æ–¥–Ω–æ–π –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
    "–£ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ –∫–æ—Å—Ç–µ–π –≤ —Å—Ç—É–ø–Ω–µ, —Å–∫–æ–ª—å–∫–æ –≤ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–µ.",
    "–ö–æ—Ç—ã –Ω–µ —á—É–≤—Å—Ç–≤—É—é—Ç —Å–ª–∞–¥–∫–∏–π –≤–∫—É—Å –∏–∑-–∑–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –º—É—Ç–∞—Ü–∏–∏.",
    "–ó–∞ —Å–µ–∫—É–Ω–¥—É –°–æ–ª–Ω—Ü–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ —á–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é."
]

ANECDOTES = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π, –∞ –∂–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç:\n- –°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ö–ª–µ–±–æ–º. –ï—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –∫—É–ø–∏ –¥–µ—Å—è—Ç–æ–∫.\n–í–µ—Ä–Ω—É–ª—Å—è —Å 10 –±—É–ª–∫–∞–º–∏ —Ö–ª–µ–±–∞.\n- –ó–∞—á–µ–º —Å—Ç–æ–ª—å–∫–æ —Ö–ª–µ–±–∞?!\n- –Ø–π—Ü–∞ –±—ã–ª–∏.",
    
    "–ó–≤–æ–Ω–∏—Ç –±–∞–±—É—à–∫–∞ –≤–Ω—É–∫—É-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É:\n- –í–Ω—É—á–µ–∫, —É –º–µ–Ω—è –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n- –ë–∞–±—É–ª—è, –∞ —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ?\n- –ü—ã–ª—å...",
    
    "- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é.\n- –ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n- –ß—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
    
    "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –¥—Ä—É–≥–∞:\n- –ö–∞–∫ –¥–µ–ª–∞?\n- –ù–æ—Ä–º–∞–ª—å–Ω–æ. –ê —É —Ç–µ–±—è?\n- –¢–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n- –î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –ø–æ –ø–∏–≤—É?\n- –î–∞–≤–∞–π.",
    
    "–û–±—ä—è–≤–ª–µ–Ω–∏–µ: '–ü–æ—Ç–µ—Ä—è–ª—Å—è –∫–æ—Ç. –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏–º—è –ë–∞—Ä—Å–∏–∫. –ù–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è - –∑–Ω–∞—á–∏—Ç –Ω–µ –ë–∞—Ä—Å–∏–∫.'",
]

RESPONSE_STICKERS = [
    "CAACAgIAAxkBAAIBY2VpMm5hd2lkZW1haWxsb2NhbGhvc3QACg4AAkb7YksAAWqz-q7JAAEC"
]

RESPONSE_EMOJIS = ["üî•", "üíÄ", "üò§", "üôÑ", "üòí", "ü§¨", "üíØ", "‚ö°"]


def register_all_handlers(dp, modules):
    """üíÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    global ALLOWED_CHAT_IDS, CUSTOM_TRIGGER_WORDS, LEARNING_DATA
    
    router = Router()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ò–ù–•–†–û–ù–ù–û
    if modules.get('config'):
        if hasattr(modules['config'].bot, 'allowed_chat_ids'):
            ALLOWED_CHAT_IDS = modules['config'].bot.allowed_chat_ids
            print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –í –ß–ê–¢–ê–•: {ALLOWED_CHAT_IDS}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ (–ë–ï–ó await)
        CUSTOM_TRIGGER_WORDS = ['–∞–¥–º–∏–Ω', '–º–∞—Å—Ç–µ—Ä', '–ø–æ–º–æ—â–Ω–∏–∫']
        print(f"üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê: {CUSTOM_TRIGGER_WORDS}")
    
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            print(f"ü§ñ –ë–û–¢: @{bot_info.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –±–æ—Ç–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    asyncio.create_task(get_bot_info())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(random_messages_sender(modules))
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        if not check_chat_allowed(chat_id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.reply(f"–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}")
                return
        
        await save_user_and_message(message, modules)
        
        if message.chat.type == 'private':
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0 - –°–£–ü–ï–† –ê–î–ú–ò–ù–ö–ê</b>\n\n"
                f"–ê–¥–º–∏–Ω: {user.first_name}\n\n"
                f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                f"/moderation - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ú—É—Ç\n"
                f"/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫\n"
                f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –í–∞—Ä–Ω\n\n"
                f"<b>‚ö° –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                f"/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
                f"/trigger_create - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
                f"/trigger_list - –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
                f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê:</b>\n"
                f"/custom_words - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏\n"
                f"/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
                f"/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
                f"<b>üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
                f"/learning_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
                f"<b>üí¨ –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
                f"/random_messages [on/off] - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n\n"
                f"<b>üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:</b>\n"
                f"/global_stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/user_stats [ID] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        else:
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                f"{user.first_name}, —Ä–∞–±–æ—Ç–∞—é —Ç—É—Ç.\n\n"
                f"/help - –∫–æ–º–∞–Ω–¥—ã"
            )
        
        await message.reply(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await track_user_action(modules, user.id, chat_id, 'start_command', {
                'chat_type': message.chat.type,
                'is_admin': user.id in modules['config'].bot.admin_ids
            })
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
                return
            
            help_text = (
                "<b>üíÄ –ê–î–ú–ò–ù–ö–ê - –í–°–ï –ö–û–ú–ê–ù–î–´</b>\n\n"
                "<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                "/moderation - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ë–∞–Ω\n"
                "/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ú—É—Ç\n"
                "/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫\n"
                "/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –í–∞—Ä–Ω\n\n"
                "<b>‚ö° –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                "/trigger_create - –°–æ–∑–¥–∞—Ç—å\n"
                "/trigger_list - –°–ø–∏—Å–æ–∫\n\n"
                "<b>üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:</b>\n"
                "/global_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/user_stats [ID] - –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "/top_users - –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n"
                "<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê:</b>\n"
                "/custom_words - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏\n"
                "/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å\n"
                "/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å\n\n"
                "<b>üß† –û–ë–£–ß–ï–ù–ò–ï:</b>\n"
                "/learning_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/learning_reset - –°–±—Ä–æ—Å\n\n"
                "<b>üí¨ –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
                "/random_messages [on/off] - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å"
            )
        else:
            help_text = (
                "<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
                "/joke - –ê–Ω–µ–∫–¥–æ—Ç\n"
                "/choice - –û—Ä–µ–ª/—Ä–µ—à–∫–∞\n"
                "/topchat - –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "<b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
                f"@{bot_info.username if bot_info else 'bot'} - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "–ù–∞–ø–∏—à–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ"
            )
            
        await message.reply(help_text)
    
    # =================== –ú–û–î–ï–†–ê–¶–ò–Ø ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
        
        moderation_text = (
            f"<b>üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–∞–Ω–æ–≤: 0\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º—É—Ç–æ–≤: 0\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: 0\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∏–∫–æ–≤: 0\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 0\n\n"
            f"<b>‚ö° –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: ‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞\n"
            f"‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: ‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞\n"
            f"‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º: ‚ùå –í—ã–∫–ª—é—á–µ–Ω\n"
            f"‚Ä¢ –ê–Ω—Ç–∏—Ñ–ª—É–¥: ‚ùå –£–ë–†–ê–ù\n\n"
            f"<b>üìã –ö–û–ú–ê–ù–î–´:</b>\n"
            f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å\n"
            f"/mute_user [ID] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–º—É—Ç–∏—Ç—å\n"
            f"/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ö–∏–∫–Ω—É—Ç—å\n"
            f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n"
            f"/unban_user [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
            f"/unmute_user [ID] - –†–∞–∑–º—É—Ç–∏—Ç—å\n\n"
            f"<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"/automod [on/off] - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            f"/toxicity [on/off] - –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏\n"
            f"/spam_filter [on/off] - –ê–Ω—Ç–∏—Å–ø–∞–º"
        )
        
        await message.reply(moderation_text)
    
    @router.message(Command('ban_user'))
    async def ban_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>üö´ –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/ban_user 123456789 –°–ø–∞–º –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            success = await ban_user_action(modules, user_id, message.from_user.id, reason)
            
            if success:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('kick_user'))
    async def kick_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("/kick_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            await message.reply(f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–∏–∫–Ω—É—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('mute_user'))
    async def mute_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.reply(
                "<b>üîá –ú–£–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/mute_user [ID] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/mute_user 123456789 60 –§–ª—É–¥"
            )
            return
        
        try:
            user_id = int(args[0])
            minutes = int(args[1])
            reason = " ".join(args[2:]) if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ"
            
            await message.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('warn_user'))
    async def warn_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            
            await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # =================== –ì–ò–ë–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´ ===================
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        triggers_text = (
            f"<b>‚ö° –°–ò–°–¢–ï–ú–ê –ì–ò–ë–ö–ò–• –¢–†–ò–ì–ì–ï–†–û–í</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: 0\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 0\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: 0\n"
            f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã—Ö: 0\n"
            f"‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: 0\n\n"
            f"<b>üî• –¢–ò–ü–´ –¢–†–ò–ì–ì–ï–†–û–í:</b>\n"
            f"‚Ä¢ <code>exact</code> - –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>contains</code> - –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>starts</code> - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\n"
            f"‚Ä¢ <code>ends</code> - –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\n"
            f"‚Ä¢ <code>regex</code> - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ <code>ai</code> - AI –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n\n"
            f"<b>üìã –ö–û–ú–ê–ù–î–´:</b>\n"
            f"/trigger_create - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
            f"/trigger_list - –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            f"/trigger_edit [–∏–º—è] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            f"/trigger_delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å\n"
            f"/trigger_test [–∏–º—è] [—Ç–µ–∫—Å—Ç] - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
            f"<b>üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
            f"‚Ä¢ –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è\n"
            f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        )
        
        await message.reply(triggers_text)
    
    @router.message(Command('trigger_create'))
    async def trigger_create_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        create_help = (
            f"<b>‚ö° –°–û–ó–î–ê–ù–ò–ï –ì–ò–ë–ö–û–ì–û –¢–†–ò–ì–ì–ï–†–ê</b>\n\n"
            f"<b>üìù –°–ò–ù–¢–ê–ö–°–ò–°:</b>\n"
            f"/trigger_create [–∏–º—è] [—Ç–∏–ø] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç]\n\n"
            f"<b>üéØ –¢–ò–ü–´:</b>\n"
            f"‚Ä¢ <code>exact</code> - —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>contains</code> - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ\n"
            f"‚Ä¢ <code>starts</code> - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\n"
            f"‚Ä¢ <code>ends</code> - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\n\n"
            f"<b>üìã –ü–†–ò–ú–ï–†–´:</b>\n"
            f"<code>/trigger_create –ø—Ä–∏–≤–µ—Ç exact –ø—Ä–∏–≤–µ—Ç \"–ó–¥–∞—Ä–æ–≤–∞\"</code>\n"
            f"<code>/trigger_create —Å–ø–∞–º contains —Å–ø–∞–º \"–ù–µ —Å–ø–∞–º—å!\"</code>\n"
            f"<code>/trigger_create –∞–¥–º–∏–Ω starts –∞–¥–º–∏–Ω \"–Ø —Ç—É—Ç\"</code>\n\n"
            f"<b>üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π | –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
            f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è"
        )
        
        await message.reply(create_help)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        await message.reply("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
    
    # =================== –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê ===================
    
    @router.message(Command('custom_words'))
    async def custom_words_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        global CUSTOM_TRIGGER_WORDS
        
        words_text = (
            f"<b>üî§ –ö–ê–°–¢–û–ú–ù–´–ï –°–õ–û–í–ê –ü–†–ò–ó–´–í–ê</b>\n\n"
            f"<b>üìã –¢–ï–ö–£–©–ò–ï –°–õ–û–í–ê:</b>\n"
        )
        
        if CUSTOM_TRIGGER_WORDS:
            for i, word in enumerate(CUSTOM_TRIGGER_WORDS, 1):
                words_text += f"{i}. <code>{word}</code>\n"
        else:
            words_text += "–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤.\n"
        
        words_text += (
            f"\n<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/add_word [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
            f"/remove_word [—Å–ª–æ–≤–æ] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
            f"<b>üí° –ü–†–ò–ú–ï–†–´:</b>\n"
            f"<code>/add_word –∞–¥–º–∏–Ω</code>\n"
            f"<code>/add_word –º–∞—Å—Ç–µ—Ä</code>\n\n"
            f"<b>‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n"
            f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å\n"
            f"–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: –±–æ—Ç, bot, —Ä–æ–±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫"
        )
        
        await message.reply(words_text)
    
    @router.message(Command('add_word'))
    async def add_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/add_word [—Å–ª–æ–≤–æ]")
            return
        
        word = args[0].lower().strip()
        if len(word) < 2:
            await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        global CUSTOM_TRIGGER_WORDS
        if word not in CUSTOM_TRIGGER_WORDS:
            CUSTOM_TRIGGER_WORDS.append(word)
            await message.reply(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑—ã–≤–∞.")
        else:
            await message.reply(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    @router.message(Command('remove_word'))
    async def remove_word_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/remove_word [—Å–ª–æ–≤–æ]")
            return
        
        word = args[0].lower().strip()
        global CUSTOM_TRIGGER_WORDS
        
        if word in CUSTOM_TRIGGER_WORDS:
            CUSTOM_TRIGGER_WORDS.remove(word)
            await message.reply(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑—ã–≤–∞.")
        else:
            await message.reply(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.")
    
    # =================== –ö–û–ú–ê–ù–î–´ –í –ß–ê–¢–ï ===================
    
    @router.message(Command('fact'))
    async def fact_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        fact = random.choice(INTERESTING_FACTS)
        await message.reply(f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}")
        
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'fact_request')
    
    @router.message(Command('joke'))
    async def joke_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        joke = random.choice(ANECDOTES)
        await message.reply(f"üòÇ <b>–ê–Ω–µ–∫–¥–æ—Ç:</b>\n\n{joke}")
        
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'joke_request')
    
    @router.message(Command('choice'))
    async def choice_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        result = random.choice(["üü° –û–†–ï–õ", "‚ö´ –†–ï–®–ö–ê"])
        
        choice_text = (
            f"ü™ô <b>–í–´–ë–û–† –°–î–ï–õ–ê–ù!</b>\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>\n\n"
            f"üéØ {message.from_user.first_name}, –≤–æ—Ç —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        )
        
        await message.reply(choice_text)
        
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'choice_request', {
                'result': result
            })
    
    @router.message(Command('topchat'))
    async def topchat_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        top_text = (
            f"<b>üèÜ –¢–û–ü –£–ß–ê–°–¢–ù–ò–ö–û–í –ß–ê–¢–ê</b>\n\n"
            f"ü•á <b>1. –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
            f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 1,234\n"
            f"   ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: 89\n"
            f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 95%\n\n"
            f"ü•à <b>2. –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
            f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 987\n"
            f"   ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: 45\n"
            f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 87%\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        await message.reply(top_text)
    
    # =================== AI –ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('ai'):
            await message.reply("AI –æ—Ç–∫–ª—é—á–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "<b>ü§ñ AI –ü–û–ú–û–©–ù–ò–ö:</b>\n\n"
                "/ai [–≤–æ–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python\n"
                "/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω\n"
                "/ai –ü–æ–º–æ–≥–∏ —Å –∫–æ–¥–æ–º"
            )
            return
        
        await process_ai_request(message, user_message, modules)
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.reply(
                "<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/crypto bitcoin\n"
                "/crypto BTC\n"
                "/crypto ethereum"
            )
            return
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö
        crypto_text = (
            f"‚Çø <b>{coin_query.title()} (SYMBOL)</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> $43,250.67\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> üü¢ +2.34%\n"
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #1\n"
            f"üíé <b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø.:</b> $846,789,123,456\n"
            f"üì¶ <b>–û–±—ä–µ–º 24—á:</b> $28,456,789,012\n"
            f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M')}\n\n"
            f"üìà <b>–ê–Ω–∞–ª–∏–∑:</b> –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
        )
        
        await message.reply(crypto_text)
        
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'crypto_request', {
                'coin': coin_query
            })
    
    # =================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        stats_text = (
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê {message.from_user.first_name}</b>\n\n"
            f"<b>üí¨ –ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 234\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: 12\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: 89\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: 45 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"<b>ü§ñ AI –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: 23\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: 3\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: 8\n\n"
            f"<b>üìà –†–ï–ô–¢–ò–ù–ì:</b>\n"
            f"‚Ä¢ –ú–µ—Å—Ç–æ –≤ —á–∞—Ç–µ: #5\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π\n"
            f"‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 75%\n\n"
            f"<b>‚è∞ –í–†–ï–ú–Ø:</b>\n"
            f"‚Ä¢ –í —á–∞—Ç–µ —Å: 15.08.2024\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –°–µ–π—á–∞—Å"
        )
        
        await message.reply(stats_text)
    
    @router.message(Command('global_stats'))
    async def global_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        global_text = (
            f"<b>üåç –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"<b>üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: 1,234\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: 89\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: 23\n\n"
            f"<b>üí¨ –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: 45,678\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: 567\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: 3,456\n\n"
            f"<b>ü§ñ AI:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 2,345\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: 67\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 456\n\n"
            f"<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: 12\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 34\n\n"
            f"<b>üíæ –°–ò–°–¢–ï–ú–ê:</b>\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 15 –¥–Ω–µ–π\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: 3.0 –°—É–ø–µ—Ä"
        )
        
        await message.reply(global_text)
    
    # =================== –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===================
    
    @router.message(Command('learning_stats'))
    async def learning_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        learning_text = (
            f"<b>üß† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
            f"<b>üìö –î–ê–ù–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: 1,234\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 456\n"
            f"‚Ä¢ –û–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: 789\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π: 234\n\n"
            f"<b>üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: 85%\n"
            f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: 78%\n"
            f"‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 92%\n\n"
            f"<b>üéØ –¢–û–ü –ü–ê–¢–¢–ï–†–ù–´:</b>\n"
            f"‚Ä¢ question_what: 234 —Ä–∞–∑–∞\n"
            f"‚Ä¢ emotion_positive: 123 —Ä–∞–∑–∞\n"
            f"‚Ä¢ message_short: 89 —Ä–∞–∑\n\n"
            f"<b>üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:</b>\n"
            f"/learning_reset - –°–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è\n"
            f"/learning_export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
        )
        
        await message.reply(learning_text)
    
    # =================== –°–õ–£–ß–ê–ô–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===================
    
    @router.message(Command('random_messages'))
    async def random_messages_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if not args:
            await message.reply("/random_messages [on/off]")
            return
        
        setting = args[0].lower()
        if setting not in ['on', 'off']:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: on –∏–ª–∏ off")
            return
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if setting == 'on' else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await message.reply(f"‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {status}.")
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        await save_user_and_message(message, modules)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–∞
        emoji = message.sticker.emoji or "ü§î"
        
        if emoji in ["üòÇ", "ü§£", "üòÑ"]:
            await message.reply("–ù—É —Å–º–µ—à–Ω–æ —Ç–µ–±–µ")
        elif emoji in ["üò¢", "üò≠", "üòû"]:
            await message.reply("–ß–µ–≥–æ –Ω–æ–µ—à—å")
        elif emoji in ["üò°", "ü§¨", "üò†"]:
            await message.reply(random.choice(RESPONSE_EMOJIS))
        elif RESPONSE_STICKERS:
            await message.reply_sticker(random.choice(RESPONSE_STICKERS))
        else:
            await message.reply(random.choice(RESPONSE_EMOJIS))
        
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'sticker_sent', {
                'emoji': emoji
            })
    
    # =================== –£–ú–ù–´–ï –û–¢–í–ï–¢–´ ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_reply_to_bot(message, modules)
        else:
            await process_smart_text(message, modules, bot_info)
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üíÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

def check_chat_allowed(chat_id: int) -> bool:
    """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    if not ALLOWED_CHAT_IDS:
        return True
    return chat_id in ALLOWED_CHAT_IDS

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if modules.get('db'):
            user = message.from_user
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def track_user_action(modules, user_id: int, chat_id: int, action: str, data: dict = None):
    """üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        if modules.get('db'):
            # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–∏–Ω–≥
            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")

async def ban_user_action(modules, user_id: int, admin_id: int, reason: str) -> bool:
    """üö´ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
            pass
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
        return False

async def process_ai_request(message: Message, user_message: str, modules):
    """ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        if modules.get('ai'):
            context = {
                'style_instruction': (
                    "–û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–æ–≤. "
                    "–ö–∞–∫ –∑–ª–æ–π –∞–¥–º–∏–Ω. –°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É."
                )
            }
            
            response = await modules['ai'].generate_response(
                user_message, message.from_user.id, context
            )
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ë–æ—Ç:"
            if response.startswith("–ë–æ—Ç:"):
                response = response[4:].strip()
            
            response = clean_harsh_response(response)
            await message.reply(response)
            
            if modules.get('analytics'):
                await track_user_action(modules, message.from_user.id, message.chat.id, 'ai_request', {
                    'query': user_message[:100],
                    'response_length': len(response)
                })
        else:
            await message.reply("AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        await message.reply("AI —Å–¥–æ—Ö.")

def clean_harsh_response(response: str) -> str:
    """üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    bad_phrases = [
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã",
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å", "–ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥", "–¥—É–º–∞—é"
    ]
    
    cleaned = response
    for phrase in bad_phrases:
        if phrase.lower() in cleaned.lower():
            parts = cleaned.split(phrase)
            cleaned = parts[0].rstrip()
    
    # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª—ã
    emoji_pattern = r'[üòäüòÑüòÉüòÜüòÅü§óüéâ‚ú®üí´‚≠êüåüüí°üî•üëçüëåüéØüìöüîçüí≠ü§îüòåüòáü•∞üòçü§©]+$'
    cleaned = re.sub(emoji_pattern, '', cleaned).strip()
    
    return cleaned.strip()

async def check_enhanced_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        standard_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫']
        for keyword in standard_keywords:
            if keyword in text:
                return True
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞
        global CUSTOM_TRIGGER_WORDS
        for word in CUSTOM_TRIGGER_WORDS:
            if word in text:
                return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if '?' in message.text and len(message.text) > 15:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def process_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    try:
        await save_user_and_message(message, modules)
        
        should_respond = await check_enhanced_bot_mentions(message, bot_info)
        
        if should_respond:
            if modules.get('ai'):
                await process_ai_request(message, message.text, modules)
            else:
                responses = ["–ß—Ç–æ?", "–ù–µ –ø–æ–Ω—è–ª.", "AI –æ—Ç–∫–ª—é—á–µ–Ω."]
                await message.reply(random.choice(responses))
        else:
            # –û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (0.5% —à–∞–Ω—Å)
            if random.random() < 0.005:
                responses = ["–ê–≥–∞.", "–ü–æ–Ω—è—Ç–Ω–æ.", "–Ø—Å–Ω–æ."]
                await message.reply(random.choice(responses))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def process_reply_to_bot(message: Message, modules):
    """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞"""
    try:
        if modules.get('ai'):
            context_message = f"–ù–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: '{message.text}'"
            await process_ai_request(message, context_message, modules)
        else:
            await message.reply("–ü–æ–Ω—è–ª.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–ª–∞—è: {e}")

async def random_messages_sender(modules):
    """üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    
    random_messages = [
        "–ö–∞–∫ –¥–µ–ª–∞ –≤ —á–∞—Ç–µ?",
        "–ö—Ç–æ-–Ω–∏–±—É–¥—å —Ç—É—Ç –µ—Å—Ç—å?", 
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º —Ç—É—Ç –≥–æ–≤–æ—Ä—è—Ç...",
        "–ú–æ–∂–µ—Ç –∫—Ç–æ —Ñ–∞–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–Ω–∞–µ—Ç?",
        "/joke - —Ö–æ—Ç–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç?",
        "–¢–∏—à–∏–Ω–∞ –≤ —á–∞—Ç–µ... –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.",
        "–ö—Ç–æ-—Ç–æ —Ç—É—Ç —É–º–Ω—ã–π –µ—Å—Ç—å?",
        "–ú–æ–∂–µ—Ç –ø–æ–±–æ–ª—Ç–∞–µ–º?"
    ]
    
    while True:
        try:
            await asyncio.sleep(random.randint(3600, 7200))  # –ö–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞
            
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —à–∞–Ω—Å (0.5%)
            if random.random() > 0.005:
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç
            if not ALLOWED_CHAT_IDS:
                continue
                
            chat_id = random.choice(ALLOWED_CHAT_IDS)
            message_text = random.choice(random_messages)
            
            await modules['bot'].send_message(chat_id, message_text)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(300)


__all__ = ["register_all_handlers"]