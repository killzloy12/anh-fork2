#!/usr/bin/env python3
"""
üß† FINAL HANDLERS v3.1 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø  
üöÄ –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ
"""

import logging
import asyncio
import random
import re
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, Sticker
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

# AI –ú–û–î–£–õ–ò
human_ai = None
memory_module = None
advanced_triggers = None
media_triggers = None

try:
    from app.services.human_ai_service import HumanLikeAI, create_conversation_context
    AI_AVAILABLE = True
    logger.info("‚úÖ Human-like AI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Human AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    AI_AVAILABLE = False

try:
    from app.modules.conversation_memory import ConversationMemoryModule
    MEMORY_AVAILABLE = True
    logger.info("‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ü–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    MEMORY_AVAILABLE = False

try:
    from app.modules.advanced_triggers import AdvancedTriggersModule
    TRIGGERS_AVAILABLE = True
    logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    TRIGGERS_AVAILABLE = False

try:
    from app.modules.media_triggers import MediaTriggersModule
    MEDIA_AVAILABLE = True
    logger.info("‚úÖ –ú–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    MEDIA_AVAILABLE = False

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
last_activity_time = {}
conversation_contexts = {}
bot_trigger_words = ["–±–æ—Ç", "bot", "—Ä–æ–±–æ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "assistant", "—ç–π", "—Å–ª—É—à–∞–π", "–º–∞–∫—Å"]
chat_stats = {}
user_stats = {}


def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    
    global human_ai, memory_module, advanced_triggers, media_triggers
    
    router = Router()
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username} ({bot_info.first_name})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
    
    async def initialize_ai_modules():
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥—É–ª–µ–π"""
        global human_ai, memory_module, advanced_triggers, media_triggers
        
        try:
            if AI_AVAILABLE and modules.get('ai'):
                human_ai = HumanLikeAI(modules['config'])
                logger.info("üß† Ultimate Human-like AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∂–∏–≤–æ–π —Å—Ç–∏–ª—å)")
            
            if MEMORY_AVAILABLE and modules.get('db'):
                memory_module = ConversationMemoryModule(modules['db'])
                await memory_module.initialize()
                logger.info("üí≠ Ultimate –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            if TRIGGERS_AVAILABLE and modules.get('db'):
                advanced_triggers = AdvancedTriggersModule(modules['db'], modules['config'], modules.get('ai'))
                await advanced_triggers.initialize()
                logger.info("‚ö° Ultimate —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            if MEDIA_AVAILABLE and modules.get('db') and modules.get('bot'):
                media_triggers = MediaTriggersModule(modules['db'], modules['config'], modules['bot'])
                await media_triggers.initialize()
                logger.info("üé≠ Ultimate –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π: {e}")
    
    asyncio.create_task(get_bot_info())
    asyncio.create_task(initialize_ai_modules())
    
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    async def update_stats(message: Message):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            chat_id = message.chat.id
            user_id = message.from_user.id
            now = datetime.now()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
            if chat_id not in chat_stats:
                chat_stats[chat_id] = {
                    'messages_count': 0,
                    'unique_users': set(),
                    'first_message': now,
                    'last_activity': now,
                    'chat_type': message.chat.type,
                    'chat_title': message.chat.title or message.chat.first_name or '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
                }
            
            chat_stats[chat_id]['messages_count'] += 1
            chat_stats[chat_id]['unique_users'].add(user_id)
            chat_stats[chat_id]['last_activity'] = now
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_stats:
                user_stats[user_id] = {
                    'messages_count': 0,
                    'first_seen': now,
                    'last_seen': now,
                    'name': message.from_user.first_name or '–ê–Ω–æ–Ω–∏–º',
                    'username': message.from_user.username,
                    'chats': set()
                }
            
            user_stats[user_id]['messages_count'] += 1
            user_stats[user_id]['last_seen'] = now
            user_stats[user_id]['chats'].add(chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê
    async def check_chat_access(message: Message) -> bool:
        """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        config = modules['config']
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        if user_id in config.bot.admin_ids:
            return True
            
        if not config.bot.allowed_chat_ids:
            return True
            
        if chat_id not in config.bot.allowed_chat_ids:
            return False
            
        return True
    
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    async def log_and_learn(message: Message):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            await update_stats(message)
            
            if modules.get('db'):
                await modules['db'].log_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    username=message.from_user.username or '',
                    full_name=message.from_user.full_name or '',
                    text=message.text or '',
                    message_type='text',
                    timestamp=datetime.now()
                )
            
            if memory_module:
                await memory_module.update_user_interaction(
                    message.from_user.id,
                    message.text or '',
                    "general",
                    "neutral"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Ultimate: –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ö–û–ú–ê–ù–î–´
    @router.message(CommandStart())
    async def start_handler(message: Message):
        """üöÄ –ö–æ–º–∞–Ω–¥–∞ /start"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"
        
        casual_greetings = [
            f"–ô–æ, {user_name}! üëã –ß–µ –∫–∞–∫?",
            f"–î–∞—Ä–æ–≤–∞, {user_name}! üòÑ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", 
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –†–∞–¥ –≤–∏–¥–µ—Ç—å üëç",
            f"–•–∞–π, {user_name}! –ö–∞–∫ –¥–µ–ª–∞? üòä",
            f"–°–∞–ª—é—Ç, {user_name}! –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
        ]
        
        greeting = random.choice(casual_greetings)
        await message.reply(greeting)
        
        logger.info(f"‚úÖ Ultimate /start: {message.from_user.id}")
    
    # ================= –ö–û–ú–ê–ù–î–´ –ü–†–û–ò–ó–í–û–õ–¨–ù–´–• –ü–ï–†–°–û–ù–ê–ñ–ï–ô =================
    
    @router.message(Command('be'))
    async def be_personality_handler(message: Message):
        """üé≠ –°—Ç–∞—Ç—å –∫–µ–º —É–≥–æ–¥–Ω–æ: /be —Ç—ã –∫—Ä—É—Ç–æ–π —Ö–∞–∫–µ—Ä –∏–∑ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CustomPersonalityManager –µ—Å–ª–∏ –Ω–µ—Ç
            if not hasattr(modules, 'custom_personality_manager'):
                from app.modules.custom_personality_system import CustomPersonalityManager
                modules['custom_personality_manager'] = CustomPersonalityManager(modules['db'], modules['config'], modules.get('ai'))
                await modules['custom_personality_manager'].initialize()
            
            custom_pm = modules['custom_personality_manager']
            
            description = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º /be
            
            if not description:
                await message.reply(
                    "üé≠ **–ü–†–û–ò–ó–í–û–õ–¨–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò**\n\n"
                    "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                    "‚Ä¢ `/be —Ç—ã –∫—Ä—É—Ç–æ–π —Ö–∞–∫–µ—Ä –∏–∑ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞` - —Å—Ç–∞—Ç—å —Ö–∞–∫–µ—Ä–æ–º\n"
                    "‚Ä¢ `/be —Ç—ã –¥–æ–±—Ä–∞—è –±–∞–±—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–µ—Ç –ø–∏—Ä–æ–≥–∏` - —Å—Ç–∞—Ç—å –±–∞–±—É—à–∫–æ–π\n"
                    "‚Ä¢ `/be —Ç—ã —Å—Ç—Ä–æ–≥–∏–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏` - —Å—Ç–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–º\n"
                    "‚Ä¢ `/be temp —Ç—ã –ø–∏—Ä–∞—Ç –Ω–∞ —á–∞—Å` - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂\n\n"
                    "**–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ `/who` - –∫—Ç–æ —è —Å–µ–π—á–∞—Å?\n"
                    "‚Ä¢ `/my_personas` - –º–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏\n"
                    "‚Ä¢ `/reset_persona` - —Å–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            is_temporary = description.lower().startswith('temp ')
            if is_temporary:
                description = description[5:].strip()
            
            if not description:
                await message.reply("‚ùå –û–ø–∏—à–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ 'temp'")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            personality = await custom_pm.create_personality_from_description(
                description, message.chat.id, message.from_user.id, is_temporary
            )
            
            if personality:
                temp_text = " (–≤—Ä–µ–º–µ–Ω–Ω–æ)" if is_temporary else ""
                await message.reply(
                    f"üé≠ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è {description}{temp_text}\n\n"
                    f"üß† **–ú–æ–π –ø—Ä–æ–º–ø—Ç:** {personality.system_prompt[:200]}...\n\n"
                    f"üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π - —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–π —Ä–æ–ª–∏!"
                )
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /be: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    
    @router.message(Command('my_personas'))
    async def my_personas_handler(message: Message):
        """üë§ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        try:
            if not hasattr(modules, 'custom_personality_manager'):
                await message.reply("‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /be")
                return
            
            custom_pm = modules['custom_personality_manager']
            personas = await custom_pm.get_user_personalities(message.from_user.id, 10)
            
            if not personas:
                await message.reply(
                    "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n"
                    "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                    "`/be —Ç–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`"
                )
                return
            
            text = f"üë§ **–¢–í–û–ò –ü–ï–†–°–û–ù–ê–ñ–ò** ({len(personas)})\n\n"
            
            for i, persona in enumerate(personas, 1):
                temp_mark = " üïê" if persona['is_temporary'] else ""
                created = datetime.fromisoformat(persona['created_at']).strftime('%d.%m.%y')
                
                text += f"`{i}.` **{persona['description'][:50]}**{temp_mark}\n"
                text += f"   üìÖ {created} ‚Ä¢ üî• {persona['usage_count']} —Ä–∞–∑\n"
                text += f"   ID: `{persona['id']}`\n\n"
            
            text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            text += "‚Ä¢ `/use_persona ID` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            text += "‚Ä¢ `/del_persona ID` - —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            
            await message.reply(text)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_personas: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    
    @router.message(Command('reset_persona'))
    async def reset_persona_handler(message: Message):
        """üîÑ –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        try:
            if not hasattr(modules, 'custom_personality_manager'):
                await message.reply("‚ÑπÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Ç–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return
            
            custom_pm = modules['custom_personality_manager']
            success = await custom_pm.clear_active_personality(message.chat.id)
            
            if success:
                await message.reply("üîÑ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å —è –æ–±—ã—á–Ω—ã–π AI")
            else:
                await message.reply("‚ÑπÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset_persona: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    
    # ================= –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´ =================
    
    @router.message(Command('karma'))
    async def karma_handler(message: Message):
        """‚öñÔ∏è –ú–æ—è –∫–∞—Ä–º–∞"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º KarmaManager –µ—Å–ª–∏ –Ω–µ—Ç
            if not hasattr(modules, 'karma_manager'):
                from app.modules.karma_system import KarmaManager
                modules['karma_manager'] = KarmaManager(modules['db'], modules['config'])
                await modules['karma_manager'].initialize()
            
            karma_manager = modules['karma_manager']
            user_karma = await karma_manager.get_user_karma(message.from_user.id, message.chat.id)
            level_info = karma_manager.get_level_info(user_karma.level)
            
            # –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            next_level_info = None
            karma_to_next = 0
            if user_karma.level < len(karma_manager.settings.levels) - 1:
                next_level_info = karma_manager.get_level_info(user_karma.level + 1)
                karma_to_next = next_level_info.min_karma - user_karma.karma
            
            text = f"‚öñÔ∏è **–ö–ê–†–ú–ê {message.from_user.first_name}**\n\n"
            text += f"üî• **–ö–∞—Ä–º–∞:** {user_karma.karma}\n"
            text += f"{level_info.emoji} **–£—Ä–æ–≤–µ–Ω—å:** {level_info.name} (lvl {user_karma.level})\n"
            text += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {user_karma.message_count}\n\n"
            
            text += f"üìà **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è:** +{user_karma.total_positive}\n"
            text += f"üìâ **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è:** -{user_karma.total_negative}\n\n"
            
            if next_level_info and karma_to_next > 0:
                text += f"‚¨ÜÔ∏è **–î–æ {next_level_info.name}:** {karma_to_next} –∫–∞—Ä–º—ã\n\n"
            
            text += f"üí° **–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:**\n{level_info.description}\n\n"
            text += f"üéÅ **–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:**\n" + "\n".join([f"‚Ä¢ {benefit}" for benefit in level_info.benefits])
            
            await message.reply(text)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä–º—ã")
    
    @router.message(Command('karma_top'))
    async def karma_top_handler(message: Message):
        """üèÜ –¢–æ–ø –ø–æ –∫–∞—Ä–º–µ"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        try:
            if not hasattr(modules, 'karma_manager'):
                await message.reply("‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /karma")
                return
            
            karma_manager = modules['karma_manager']
            leaderboard = await karma_manager.get_karma_leaderboard(message.chat.id, 10)
            
            if not leaderboard:
                await message.reply("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ä–º–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
                return
            
            text = f"üèÜ **–¢–û–ü –ö–ê–†–ú–´ –ß–ê–¢–ê**\n\n"
            
            for entry in leaderboard:
                medal = ["ü•á", "ü•à", "ü•â"][entry['rank'] - 1] if entry['rank'] <= 3 else f"{entry['rank']}."
                text += f"{medal} {entry['level_emoji']} **{entry['karma']}** –∫–∞—Ä–º—ã\n"
                text += f"   {entry['level_name']} ‚Ä¢ {entry['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            
            await message.reply(text)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma_top: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        """üìñ –°–ø—Ä–∞–≤–∫–∞"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        help_text = (
            "ü§ñ **–ú–∞–∫—Å - –ñ–∏–≤–æ–π AI —Å –ü–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏**\n\n"
            "**üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n"
            "‚Ä¢ `/be –æ–ø–∏—Å–∞–Ω–∏–µ` - —Å—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º\n"
            "‚Ä¢ `/my_personas` - –º–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏\n"
            "‚Ä¢ `/reset_persona` - —Å–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n"
            "**‚öñÔ∏è –ö–∞—Ä–º–∞:**\n"
            "‚Ä¢ `/karma` - –º–æ—è –∫–∞—Ä–º–∞\n"
            "‚Ä¢ `/karma_top` - —Ç–æ–ø –ø–æ –∫–∞—Ä–º–µ\n\n"
            "**üéØ –û—Å–Ω–æ–≤–Ω—ã–µ:**\n"
            "‚Ä¢ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ `/ai [—Ç–µ–∫—Å—Ç]` - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
            "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**üí¨ –ü—Ä–∏–º–µ—Ä:**\n"
            "`/be —Ç—ã –∫—Ä—É—Ç–æ–π —Ö–∞–∫–µ—Ä`\n"
            "–ü—Ä–∏–≤–µ—Ç! (–±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ö–∞–∫–µ—Ä)"
        )
        
        await message.reply(help_text)
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        """üß† AI –ø–æ–º–æ—â–Ω–∏–∫"""
        if not await check_chat_access(message):
            return
            
        await log_and_learn(message)
        
        user_message = message.text[4:].strip()
        
        if not user_message:
            await message.reply("üß† **AI –≥–æ—Ç–æ–≤!**\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: `/ai –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?`")
            return
        
        if not human_ai:
            await message.reply("AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü§∑‚Äç‚ôÇÔ∏è")
            return
        
        try:
            context_key = f"{message.from_user.id}_{message.chat.id}"
            context = conversation_contexts.get(context_key)
            
            if not context:
                context = create_conversation_context(message.from_user.id, message.chat.id)
                context.formality_level = 0.3
                conversation_contexts[context_key] = context
            
            response = await human_ai.generate_human_response(user_message, context)
            await message.reply(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            await message.reply("–ß—Ç–æ-—Ç–æ —Å –º–æ–∑–≥–æ–º... ü§Ø")
    
    # –°–¢–ò–ö–ï–†–´
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        """üé≠ –°—Ç–∏–∫–µ—Ä—ã"""
        if not await check_chat_access(message):
            return
        
        await log_and_learn(message)
        
        if random.random() < 0.15:
            reactions = ["üëç", "üòÑ", "ü§∑‚Äç‚ôÇÔ∏è", "–ù–æ—Ä–º!", "–û–∫"]
            await message.reply(random.choice(reactions))
    
    # –¢–ï–ö–°–¢ - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
    @router.message(F.text)
    async def text_handler(message: Message):
        """üí¨ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –∫–∞—Ä–º–æ–π"""
        
        await log_and_learn(message)
        
        if not await check_chat_access(message):
            return
        
        if message.text.startswith('/'):
            return
            
        text_lower = message.text.lower()
        should_respond = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
        if message.reply_to_message and message.reply_to_message.from_user.id == modules['bot'].id:
            should_respond = True
        elif any(word in text_lower for word in bot_trigger_words):
            should_respond = True
        elif bot_info and f'@{bot_info.username.lower()}' in text_lower:
            should_respond = True
        elif message.chat.type == 'private':
            should_respond = True
        
        # –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ü–†–û–ò–ó–í–û–õ–¨–ù–´–• –ü–ï–†–°–û–ù–ê–ñ–ï–ô –ò –ö–ê–†–ú–´
        if should_respond and human_ai:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not hasattr(modules, 'custom_personality_manager'):
                    try:
                        from app.modules.custom_personality_system import CustomPersonalityManager
                        modules['custom_personality_manager'] = CustomPersonalityManager(modules['db'], modules['config'], modules.get('ai'))
                        await modules['custom_personality_manager'].initialize()
                        logger.info("üé≠ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
                        modules['custom_personality_manager'] = None
                
                if not hasattr(modules, 'karma_manager'):
                    try:
                        from app.modules.karma_system import KarmaManager, KarmaActionType
                        modules['karma_manager'] = KarmaManager(modules['db'], modules['config'])
                        await modules['karma_manager'].initialize()
                        logger.info("‚öñÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                        globals()['KarmaActionType'] = KarmaActionType
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–∞—Ä–º—ã: {e}")
                        modules['karma_manager'] = None
                else:
                    try:
                        from app.modules.karma_system import KarmaActionType
                        globals()['KarmaActionType'] = KarmaActionType
                    except ImportError:
                        pass
                
                context_key = f"{message.from_user.id}_{message.chat.id}"
                context = conversation_contexts.get(context_key)
                
                if not context:
                    context = create_conversation_context(message.from_user.id, message.chat.id)
                    context.formality_level = 0.3
                    conversation_contexts[context_key] = context
                
                # –ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–í–ï–¢ –° –ö–ê–°–¢–û–ú–ù–´–ú –ü–ï–†–°–û–ù–ê–ñ–ï–ú!
                if modules.get('custom_personality_manager'):
                    try:
                        ai_response = await human_ai.generate_response_with_custom_personality(message.text, context, message.chat.id)
                    except:
                        ai_response = await human_ai.generate_human_response(message.text, context)
                else:
                    ai_response = await human_ai.generate_human_response(message.text, context)
                
                await message.reply(ai_response)
                
                # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–†–ú–£ –ó–ê –ê–ö–¢–ò–í–ù–û–°–¢–¨
                if modules.get('karma_manager') and 'KarmaActionType' in globals():
                    try:
                        await modules['karma_manager'].add_karma(
                            message.from_user.id, 
                            message.chat.id, 
                            KarmaActionType.MESSAGE, 
                            "–ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ"
                        )
                        
                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–ê–†–ú–ê –ó–ê –û–°–û–ë–´–ï –î–ï–ô–°–¢–í–ò–Ø
                        message_lower = message.text.lower()
                        
                        if '?' in message.text and len(message.text) > 10:
                            await modules['karma_manager'].add_karma(
                                message.from_user.id, message.chat.id,
                                KarmaActionType.QUESTION_ANSWER,
                                "–ó–∞–¥–∞–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
                            )
                        
                        helpful_keywords = ['–ø–æ–º–æ–≥—É', '–æ–±—ä—è—Å–Ω—é', '–ø–æ–∫–∞–∂—É', '—Ä–∞—Å—Å–∫–∞–∂—É']
                        if any(keyword in message_lower for keyword in helpful_keywords):
                            await modules['karma_manager'].add_karma(
                                message.from_user.id, message.chat.id,
                                KarmaActionType.HELPFUL_REPLY,
                                "–ü—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–º–æ—â—å"
                            )
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã: {e}")
                
                return
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: {e}")
                
                # Fallback –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                try:
                    ai_response = await human_ai.generate_human_response(message.text, context)
                    await message.reply(ai_response)
                    return
                except Exception as e2:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ AI: {e2}")
        
        # FALLBACK: –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        if should_respond:
            casual_responses = [
                "–ê–≥–∞", "–ü–æ–Ω—è—Ç–Ω–æ", "–ù–æ—Ä–º", "–û–∫–µ–π", "–£–≥—É", "–¢–æ—á–Ω–æ",
                "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–•–º", "–Ø—Å–Ω–æ"
            ]
            
            response = random.choice(casual_responses)
            await message.reply(response)
    
    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
    logger.info("üéõÔ∏è ULTIMATE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ v3.1 —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    dp.include_router(router)