#!/usr/bin/env python3
"""
üéõÔ∏è HANDLERS v3.0 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û
üöÄ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚Ä¢ ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–µ–ø–ª–∞–∏
‚Ä¢ ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /ai
‚Ä¢ ‚úÖ –†–∞–±–æ—á–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è  
‚Ä¢ ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
"""

import logging
import re
import asyncio
import random
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)


def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ v3.0"""
    
    router = Router()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
        except:
            pass
    
    asyncio.create_task(get_bot_info())
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if modules.get('permissions'):
            if not await modules['permissions'].check_chat_access(chat_id, user.id):
                await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_and_message(message, modules)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        chat_type_text = ""
        if message.chat.type == 'private':
            chat_type_text = "–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        else:
            chat_type_text = f"—á–∞—Ç–µ <b>{message.chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç'}</b>"
        
        welcome_text = (
            f"üöÄ <b>Enhanced Telegram Bot v3.0</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º–æ–≥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ {chat_type_text}!\n\n"
            f"üÜï <b>–ù–û–í–û–ï –≤ v3.0:</b>\n"
            f"üéØ –û—Ç–≤–µ—á–∞—é –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–ø–ª–∞–∏\n"
            f"‚ö° –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            f"üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            f"üîí –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
            f"üìö –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
            f"‚ú® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            f"ü§ñ /ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫ GPT-4\n"
            f"‚Çø /crypto bitcoin - –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            f"üìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"üìà /chart activity - –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            f"‚ö° /triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
            f"üõ°Ô∏è /moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            f"üé≠ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ —ç–º–æ—Ü–∏–π\n\n"
            f"üí° /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
            f"‚ÑπÔ∏è /about - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if message.chat.type != 'private':
            welcome_text += (
                f"\n\nüéØ <b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
                f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è @{bot_info.username if bot_info else 'bot'}\n"
                f"‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '–±–æ—Ç' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )
        
        await message.answer(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, chat_id, 'start_command'
            )
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        help_text = generate_help_text(message.chat.type, bot_info)
        await message.answer(help_text)
    
    @router.message(Command('about'))
    async def about_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        about_text = generate_about_text(modules)
        await message.answer(about_text)
    
    @router.message(Command('status'))
    async def status_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        status_text = await generate_status_text(message.from_user, modules)
        await message.answer(status_text)
    
    # =================== AI –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not await check_permissions(message, modules, 'ai'):
            return
            
        if not modules.get('ai'):
            await message.answer("‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.answer(
                "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞:</b>\n\n"
                "üìù /ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n"
                "üéØ –ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ Python\n"
                "‚Ä¢ /ai –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç?\n"
                "‚Ä¢ /ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
            )
            return
        
        await process_ai_request(message, user_message, modules)
    
    @router.message(Command('memory_clear'))
    async def memory_clear_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        if not modules.get('memory'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = await modules['memory'].clear_user_memory(
            message.from_user.id, message.chat.id
        )
        
        if success:
            await message.answer("üóëÔ∏è <b>–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞</b>\n\n–Ø –∑–∞–±—ã–ª –Ω–∞—à—É –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Å–µ–¥—É –∏ –Ω–∞—á–∏–Ω–∞—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # =================== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not await check_permissions(message, modules, 'crypto'):
            return
            
        if not modules.get('crypto'):
            await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.answer(
                "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è:</b>\n\n"
                "üìù /crypto [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã]\n"
                "üéØ –ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /crypto bitcoin\n"
                "‚Ä¢ /crypto BTC\n"
                "‚Ä¢ /crypto ethereum\n"
                "‚Ä¢ /crypto ton\n\n"
                "üìà /crypto_trending - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã"
            )
            return
        
        await process_crypto_request(message, coin_query, modules)
    
    @router.message(Command('crypto_trending'))
    async def crypto_trending_handler(message: Message):
        if not await check_permissions(message, modules, 'crypto'):
            return
            
        await process_trending_crypto(message, modules)
    
    # =================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not await check_permissions(message, modules, 'analytics'):
            return
            
        await process_user_stats(message, modules)
    
    @router.message(Command('dashboard'))
    async def dashboard_handler(message: Message):
        if not await check_permissions(message, modules, 'analytics'):
            return
            
        await process_user_dashboard(message, modules)
    
    @router.message(Command('export'))
    async def export_handler(message: Message):
        if not await check_permissions(message, modules, 'analytics'):
            return
            
        await process_data_export(message, modules)
    
    # =================== –ì–†–ê–§–ò–ö–ò ===================
    
    @router.message(Command('chart'))
    async def chart_handler(message: Message):
        if not await check_permissions(message, modules, 'charts'):
            return
            
        await process_chart_request(message, modules)
    
    # =================== –¢–†–ò–ì–ì–ï–†–´ ===================
    
    @router.message(Command('triggers'))
    async def triggers_handler(message: Message):
        if not await check_permissions(message, modules, 'triggers'):
            return
            
        await process_triggers_command(message, modules)
    
    @router.message(Command('trigger_add'))
    async def trigger_add_handler(message: Message):
        if not await check_permissions(message, modules, 'triggers'):
            return
            
        await process_trigger_add(message, modules)
    
    @router.message(Command('trigger_del'))
    async def trigger_del_handler(message: Message):
        if not await check_permissions(message, modules, 'triggers'):
            return
            
        await process_trigger_delete(message, modules)
    
    @router.message(Command('trigger_list'))
    async def trigger_list_handler(message: Message):
        if not await check_permissions(message, modules, 'triggers'):
            return
            
        await process_trigger_list(message, modules)
    
    # =================== –ú–û–î–ï–†–ê–¶–ò–Ø (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´) ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if not await check_admin_permissions(message, modules):
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ –õ–°
        if message.chat.type != 'private':
            await message.answer(
                "üîí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                "üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–° –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /moderation"
            )
            return
            
        await process_moderation_settings(message, modules)
    
    @router.message(Command('ban'))
    async def ban_handler(message: Message):
        if not await check_admin_permissions(message, modules):
            return
            
        # –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type == 'private':
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ /ban –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            return
            
        await process_ban_command(message, modules)
    
    @router.message(Command('mute'))
    async def mute_handler(message: Message):
        if not await check_admin_permissions(message, modules):
            return
            
        if message.chat.type == 'private':
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ /mute –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            return
            
        await process_mute_command(message, modules)
    
    @router.message(Command('warn'))
    async def warn_handler(message: Message):
        if not await check_admin_permissions(message, modules):
            return
            
        if message.chat.type == 'private':
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ /warn –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            return
            
        await process_warn_command(message, modules)
    
    # =================== –ù–ê–°–¢–†–û–ô–ö–ò –î–û–°–¢–£–ü–ê ===================
    
    @router.message(Command('permissions'))
    async def permissions_handler(message: Message):
        if not await check_admin_permissions(message, modules):
            return
            
        await process_permissions_command(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not await check_permissions(message, modules, 'stickers'):
            return
            
        await process_sticker(message, modules)
    
    # =================== –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ü–õ–ê–ï–í ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞—é—Ç –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_reply_to_bot(message, modules)
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            await process_smart_text(message, modules, bot_info)
    
    # =================== –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===================
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not await check_permissions(message, modules):
            return
            
        await process_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üéõÔ∏è –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ v3.0 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

async def check_permissions(message: Message, modules, module_name: str = None) -> bool:
    """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞"""
    
    try:
        if not modules.get('permissions'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if not await modules['permissions'].check_chat_access(
            message.chat.id, message.from_user.id
        ):
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if module_name:
            if not await modules['permissions'].check_module_access(
                module_name, message.chat.id, message.from_user.id
            ):
                await message.answer(f"üö´ –ú–æ–¥—É–ª—å {module_name} –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return True

async def check_admin_permissions(message: Message, modules) -> bool:
    """üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    user_id = message.from_user.id
    
    if user_id not in modules['config'].bot.admin_ids:
        await message.answer("üëë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")
        return False
    
    return True

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    try:
        user = message.from_user
        
        if modules.get('db'):
            await modules['db'].save_user({
                'id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code,
                'is_premium': getattr(user, 'is_premium', False)
            })
            
            await modules['db'].save_chat({
                'id': message.chat.id,
                'type': message.chat.type,
                'title': message.chat.title,
                'username': message.chat.username
            })
            
            await modules['db'].save_message({
                'message_id': message.message_id,
                'user_id': user.id,
                'chat_id': message.chat.id,
                'text': message.text or '',
                'message_type': 'text' if message.text else 'other'
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def process_ai_request(message: Message, user_message: str, modules):
    """ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞"""
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
        thinking_msg = await message.answer("ü§î –î—É–º–∞—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
        context = {}
        if modules.get('memory'):
            memory_context = await modules['memory'].get_context(
                message.from_user.id, message.chat.id
            )
            context.update(memory_context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if modules.get('behavior'):
            behavior_analysis = await modules['behavior'].analyze_user_behavior(
                message.from_user.id, message.chat.id, user_message, context
            )
            context['behavior_analysis'] = behavior_analysis
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if modules.get('behavior') and context.get('behavior_analysis'):
            response = await modules['behavior'].adapt_response(
                message.from_user.id, response, context['behavior_analysis']
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–∏
        try:
            await thinking_msg.delete()
        except:
            pass
        
        await message.answer(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
        if modules.get('memory'):
            await modules['memory'].add_interaction(
                message.from_user.id, message.chat.id, 
                user_message, response
            )
        
        # –û–±—É—á–∞–µ–º –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        if modules.get('behavior'):
            await modules['behavior'].learn_from_interaction(
                message.from_user.id, message.chat.id, 
                user_message, response
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    
    try:
        user = message.from_user
        text = message.text.lower()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await save_user_and_message(message, modules)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        if modules.get('triggers'):
            trigger_response = await modules['triggers'].check_message_triggers(
                message.text, message.chat.id, user.id
            )
            if trigger_response:
                await message.answer(trigger_response)
                return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        moderation_action = await check_moderation(message, modules)
        if moderation_action:
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
        should_respond = await check_bot_mentions(message, bot_info)
        
        if should_respond:
            # –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await process_smart_response(message, modules)
        else:
            # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            await process_random_responses(message, modules)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                user.id, message.chat.id, 'message_sent',
                {'text_length': len(message.text), 'has_mention': should_respond}
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def check_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞"""
    
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        if bot_info and bot_info.first_name.lower() in text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞-–æ–±—Ä–∞—â–µ–Ω–∏—è
        bot_keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫', 'assistant']
        if any(keyword in text for keyword in bot_keywords):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if '?' in message.text and len(message.text) > 20:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def process_smart_response(message: Message, modules):
    """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if modules.get('ai'):
            await process_ai_request(message, message.text, modules)
        else:
            # –ë–∞–∑–æ–≤—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            smart_responses = [
                "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–π AI –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω.",
                "üí≠ –Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–¥—É–º–∞–ª –Ω–∞–¥ —ç—Ç–∏–º, –Ω–æ –Ω—É–∂–µ–Ω AI –º–æ–¥—É–ª—å.",
                "üß† –î–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AI –º–æ–¥—É–ª—å —Å API –∫–ª—é—á–∞–º–∏.",
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.",
                "‚ú® –Ø –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫–æ –º–Ω–µ, –Ω–æ AI —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            ]
            
            response = random.choice(smart_responses)
            await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

async def process_reply_to_bot(message: Message, modules):
    """üí¨ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    
    try:
        # –≠—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ –±–æ—Ç–∞ - —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —É–º–Ω–æ
        if modules.get('ai'):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            context_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.reply_to_message.text}'\n\n–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message.text}'"
            await process_ai_request(message, context_message, modules)
        else:
            await message.answer("üëç –ü–æ–Ω—è–ª! –ù–æ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω—É–∂–µ–Ω AI –º–æ–¥—É–ª—å.")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–ª–∞—è: {e}")

async def check_moderation(message: Message, modules) -> bool:
    """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    try:
        if not modules.get('moderation'):
            return False
            
        moderation_result = await modules['moderation'].check_message(
            message.from_user.id, message.chat.id, message.text
        )
        
        if moderation_result['action'] != 'allow':
            action = moderation_result['action']
            reason = moderation_result['reason']
            
            if action == 'delete':
                try:
                    await message.delete()
                    await message.answer(f"üõ°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {reason}")
                except:
                    await message.answer(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
            elif action == 'warn':
                warnings = moderation_result.get('user_warnings', 0)
                await message.answer(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warnings}): {reason}")
            elif action == 'timeout':
                await message.answer(f"üïê –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {reason}")
            
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

async def process_random_responses(message: Message, modules):
    """üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    
    try:
        import random
        if (modules.get('config') and 
            random.random() < modules['config'].bot.random_reply_chance):
            
            random_responses = [
                "üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
                "ü§î –ü–æ–Ω–∏–º–∞—é",
                "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                "üí≠ –•–æ—Ä–æ—à–∞—è –º—ã—Å–ª—å",
                "üéØ –°–æ–≥–ª–∞—Å–µ–Ω"
            ]
            
            await message.answer(random.choice(random_responses))
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")

# =================== –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î ===================

async def process_crypto_request(message: Message, coin_query: str, modules):
    """‚Çø –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    
    try:
        crypto_data = await modules['crypto'].handle_crypto_request(
            message.from_user.id, coin_query
        )
        
        if crypto_data.get('error'):
            await message.answer(f"‚ùå {crypto_data['message']}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = [
            f"‚Çø <b>{crypto_data['coin_name']} ({crypto_data['symbol']})</b>\n",
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {crypto_data['price']}",
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {crypto_data['change_24h_formatted']} {crypto_data['trend_emoji']}",
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{crypto_data['market_cap_rank']}",
            f"üíé <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> {crypto_data['market_cap']}",
            f"üì¶ <b>–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤:</b> {crypto_data['volume_24h']}",
            f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {crypto_data['last_updated']}\n",
            f"üìà <b>–ê–Ω–∞–ª–∏–∑:</b> {crypto_data['price_analysis']}"
        ]
        
        await message.answer("\n".join(response_parts))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ")

async def process_trending_crypto(message: Message, modules):
    """üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    try:
        if not modules.get('crypto'):
            await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        trending_data = await modules['crypto'].get_trending_crypto()
        
        if trending_data.get('error'):
            await message.answer(f"‚ùå {trending_data['message']}")
            return
        
        response_parts = ["üî• <b>–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"]
        
        for i, coin in enumerate(trending_data['trending_coins'], 1):
            response_parts.append(
                f"{i}. <b>{coin['name']} ({coin['symbol']})</b>\n"
                f"   üí∞ {coin['price']} ({coin['change_24h']})\n"
                f"   üèÜ #{coin['market_cap_rank']} | üíé {coin['market_cap']}"
            )
        
        response_parts.append(f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {trending_data['update_time']}")
        
        await message.answer("\n\n".join(response_parts))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

async def process_user_stats(message: Message, modules):
    """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    try:
        if not modules.get('analytics'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        dashboard = await modules['analytics'].get_user_dashboard(message.from_user.id)
        
        if dashboard.get('error'):
            await message.answer(f"‚ùå {dashboard['error']}")
            return
        
        basic_stats = dashboard.get('basic_stats', {})
        
        response_parts = [
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}</b>\n",
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {basic_stats.get('message_count', 0)}",
            f"üìè <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:</b> {basic_stats.get('avg_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤",
            f"‚ö° <b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {dashboard.get('activity_level', 'unknown')}",
            f"üéØ <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b> {int(dashboard.get('engagement_score', 0) * 100)}%",
            f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {basic_stats.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã
        insights = dashboard.get('insights', [])
        if insights:
            response_parts.append("<b>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>")
            for insight in insights:
                response_parts.append(f"‚Ä¢ {insight}")
        
        await message.answer("\n".join(response_parts))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def process_user_dashboard(message: Message, modules):
    """üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    await message.answer("üöß –î–µ—Ç–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def process_data_export(message: Message, modules):
    """üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    await message.answer("üöß –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_chart_request(message: Message, modules):
    """üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    
    await message.answer("üöß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def process_sticker(message: Message, modules):
    """üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞"""
    
    try:
        sticker = message.sticker
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä
        if modules.get('stickers'):
            sticker_data = {
                'file_id': sticker.file_id,
                'set_name': sticker.set_name,
                'emoji': sticker.emoji,
                'is_animated': sticker.is_animated,
                'is_video': sticker.is_video
            }
            
            analysis = await modules['stickers'].analyze_sticker(
                message.from_user.id, message.chat.id, sticker_data
            )
            
            if not analysis.get('error'):
                emotion = analysis.get('emotion', 'neutral')
                if emotion != 'neutral':
                    emotion_responses = {
                        'happy': 'üòä –í–∏–∂—É, —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!',
                        'sad': 'üò¢ –ù–∞–¥–µ—é—Å—å, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!',
                        'angry': 'üò§ –ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏',
                        'love': 'üíï –õ—é–±–æ–≤—å - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!',
                        'thinking': 'ü§î –û —á–µ–º –∑–∞–¥—É–º–∞–ª–∏—Å—å?'
                    }
                    
                    response = emotion_responses.get(emotion, 'üëç –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!')
                    await message.answer(response)
        
        # –¢—Ä–µ–∫–∏–Ω–≥
        if modules.get('analytics'):
            await modules['analytics'].track_user_action(
                message.from_user.id, message.chat.id, 'sticker_sent',
                {'emoji': sticker.emoji, 'set_name': sticker.set_name}
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")

# =================== –§–£–ù–ö–¶–ò–ò –¢–†–ò–ì–ì–ï–†–û–í ===================

async def process_triggers_command(message: Message, modules):
    """‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""
    
    try:
        if not modules.get('triggers'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        user_triggers = await modules['triggers'].get_user_triggers(
            message.from_user.id, message.chat.id
        )
        
        response = "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏</b>\n\n"
        
        if user_triggers:
            response += f"üìã <b>–í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã ({len(user_triggers)}):</b>\n"
            for trigger in user_triggers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status = "‚úÖ" if trigger.get('is_active') else "‚ùå"
                response += f"{status} <b>{trigger['name']}</b> - {trigger.get('type', 'contains')}\n"
            
            if len(user_triggers) > 5:
                response += f"\n... –∏ –µ—â–µ {len(user_triggers) - 5} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
        else:
            response += "üìù –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
        
        response += (
            "\n<b>üìö –ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/trigger_add - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
            "/trigger_list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            "/trigger_del [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n\n"
            "<b>üí° –ü—Ä–∏–º–µ—Ä:</b>\n"
            "/trigger_add –ø—Ä–∏–≤–µ—Ç '–ü—Ä–∏–≤–µ—Ç! üëã' contains"
        )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")

async def process_trigger_add(message: Message, modules):
    """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    
    try:
        if not modules.get('triggers'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(' ', 4)
        if len(parts) < 4:
            await message.answer(
                "üí° <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞:</b>\n\n"
                "üìù /trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø]\n\n"
                "<b>üéØ –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /trigger_add –ø—Ä–∏–≤–µ—Ç hello '–ü—Ä–∏–≤–µ—Ç! üëã' contains\n"
                "‚Ä¢ /trigger_add –ø—Ä–∞–≤–∏–ª–∞ rules '–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞...' exact\n"
                "‚Ä¢ /trigger_add —É—Ç—Ä–æ '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ' '‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!' starts_with\n\n"
                "<b>üìã –¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>\n"
                "‚Ä¢ contains - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ exact - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ starts_with - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\n"
                "‚Ä¢ ends_with - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\n"
                "‚Ä¢ regex - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            )
            return
        
        trigger_name = parts[1]
        trigger_pattern = parts[2]
        trigger_response = parts[3]
        trigger_type = parts[4] if len(parts) > 4 else 'contains'
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if trigger_response.startswith('"') and trigger_response.endswith('"'):
            trigger_response = trigger_response[1:-1]
        elif trigger_response.startswith("'") and trigger_response.endswith("'"):
            trigger_response = trigger_response[1:-1]
        
        result = await modules['triggers'].add_trigger(
            message.from_user.id, message.chat.id,
            trigger_name, trigger_pattern, trigger_response, trigger_type
        )
        
        if result['success']:
            await message.answer(f"‚úÖ {result['message']}")
        else:
            await message.answer(f"‚ùå {result['error']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞")

async def process_trigger_delete(message: Message, modules):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    
    try:
        if not modules.get('triggers'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            await message.answer(
                "üí° <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞:</b>\n\n"
                "üìù /trigger_del [–∏–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞]\n\n"
                "<b>üéØ –ü—Ä–∏–º–µ—Ä:</b>\n"
                "/trigger_del –ø—Ä–∏–≤–µ—Ç"
            )
            return
        
        trigger_name = parts[1]
        
        result = await modules['triggers'].delete_trigger(
            message.from_user.id, message.chat.id, trigger_name
        )
        
        if result['success']:
            await message.answer(f"‚úÖ {result['message']}")
        else:
            await message.answer(f"‚ùå {result['error']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞")

async def process_trigger_list(message: Message, modules):
    """üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    
    try:
        if not modules.get('triggers'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        user_triggers = await modules['triggers'].get_user_triggers(
            message.from_user.id, message.chat.id
        )
        
        if not user_triggers:
            await message.answer("üìù –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trigger_add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞")
            return
        
        response = f"üìã <b>–í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã ({len(user_triggers)}):</b>\n\n"
        
        for i, trigger in enumerate(user_triggers, 1):
            status = "‚úÖ" if trigger.get('is_active') else "‚ùå"
            usage = trigger.get('usage_count', 0)
            
            response += (
                f"{i}. {status} <b>{trigger['name']}</b>\n"
                f"   üéØ –ü–∞—Ç—Ç–µ—Ä–Ω: {trigger['pattern']}\n"
                f"   üìù –û—Ç–≤–µ—Ç: {trigger['response'][:50]}...\n"
                f"   üîß –¢–∏–ø: {trigger.get('type', 'contains')}\n"
                f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {usage}\n\n"
            )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")

# =================== –§–£–ù–ö–¶–ò–ò –ú–û–î–ï–†–ê–¶–ò–ò ===================

async def process_moderation_settings(message: Message, modules):
    """üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    try:
        if not modules.get('moderation'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await message.answer(
            "üõ°Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            "‚öôÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "üåä –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞\n"
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"
            "<b>üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø:</b>\n"
            "/ban [ID] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/mute [ID] - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/warn [ID] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "üìä –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def process_ban_command(message: Message, modules):
    """üö´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞"""
    
    await message.answer("üöß –ö–æ–º–∞–Ω–¥–∞ /ban –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def process_mute_command(message: Message, modules):
    """üîá –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º—É—Ç–∞"""
    
    await message.answer("üöß –ö–æ–º–∞–Ω–¥–∞ /mute –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def process_warn_command(message: Message, modules):
    """‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    
    await message.answer("üöß –ö–æ–º–∞–Ω–¥–∞ /warn –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# =================== –§–£–ù–ö–¶–ò–ò –†–ê–ó–†–ï–®–ï–ù–ò–ô ===================

async def process_permissions_command(message: Message, modules):
    """üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    
    try:
        if not modules.get('permissions'):
            await message.answer("‚ùå –ú–æ–¥—É–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        global_settings = await modules['permissions'].get_global_settings()
        
        response = (
            "üîí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            f"üìù <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b> {len(global_settings.get('allowed_chats', []))}\n"
            f"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:</b> {len(global_settings.get('blocked_chats', []))}\n"
            f"üë• <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b> {global_settings.get('configured_chats', 0)}\n"
            f"‚ö° <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b> {len(global_settings.get('command_restrictions', {}))}\n\n"
            "<b>üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ whitelist\n"
            "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è —á–∞—Ç–∞\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")

# =================== –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ö–°–¢–ê ===================

def generate_help_text(chat_type: str, bot_info) -> str:
    """üìñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ Enhanced Telegram Bot v3.0</b>\n\n"
        "üÜï <b>–ù–æ–≤–æ–µ –≤ v3.0:</b>\n"
        "üéØ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚ö° –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
        "üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "üîí –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n\n"
        "ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫:</b>\n"
        "/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI\n"
        "/memory_clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "/crypto_trending - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n\n"
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        "/stats - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/dashboard - –î–µ—Ç–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏:</b>\n"
        "/chart activity - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "/chart emotions - –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π\n\n"
        "‚ö° <b>–¢—Ä–∏–≥–≥–µ—Ä—ã:</b>\n"
        "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
        "/trigger_add - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
        "/trigger_list - –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
        "üé≠ <b>–°—Ç–∏–∫–µ—Ä—ã:</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π\n\n"
    )
    
    if chat_type != 'private':
        help_text += (
            "üéØ <b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
            f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ @{bot_info.username if bot_info else 'bot'}\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞: –±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å '?'\n\n"
        )
    
    help_text += (
        "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω—ã):</b>\n"
        "/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)\n"
        "/ban [ID] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/warn [ID] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n"
        "/mute [ID] - –ó–∞–≥–ª—É—à–∏—Ç—å\n\n"
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "/about - –û –±–æ—Ç–µ\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/permissions - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
    )
    
    return help_text

def generate_about_text(modules) -> str:
    """‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    
    active_modules = sum(1 for m in modules.values() if m is not None and 
                        m != modules.get('config') and m != modules.get('bot') and m != modules.get('db'))
    
    return (
        "‚ÑπÔ∏è <b>Enhanced Telegram Bot v3.0 - Ultimate Edition</b>\n\n"
        "üéØ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "–°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, "
        "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
        "‚ö° <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
        "‚Ä¢ Python 3.11+ —Å aiogram 3.8+\n"
        "‚Ä¢ AI: OpenAI GPT-4 + Anthropic Claude-3\n"
        "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite —Å WAL —Ä–µ–∂–∏–º–æ–º\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: CoinGecko API\n"
        "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: matplotlib + seaborn\n\n"
        "üß© <b>–ú–æ–¥—É–ª–∏ (v3.0):</b>\n"
        "‚Ä¢ Memory Module - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å\n"
        "‚Ä¢ Behavior Module - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ Triggers Module - –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚≠ê\n"
        "‚Ä¢ Permissions Module - –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ ‚≠ê\n"
        "‚Ä¢ Analytics Module - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚Ä¢ Moderation Module - –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ Crypto Module - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ Stickers Module - –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        "‚Ä¢ Charts Module - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {active_modules} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π\n"
        f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now().strftime('%H:%M:%S')}\n"
        "üîß <b>–í–µ—Ä—Å–∏—è:</b> 3.0 Ultimate Edition\n\n"
        "‚≠ê <b>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ v3.0:</b>\n"
        "üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
        "üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "üîí –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
        "üìö –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤"
    )

async def generate_status_text(user, modules) -> str:
    """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    status_parts = ["üî• <b>–°—Ç–∞—Ç—É—Å Enhanced Telegram Bot v3.0</b>\n"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏
    modules_status = []
    
    if modules.get('ai'):
        try:
            ai_stats = modules['ai'].get_usage_stats()
            modules_status.append(f"üß† AI: ‚úÖ ({ai_stats.get('daily_usage', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        except:
            modules_status.append("üß† AI: ‚ö†Ô∏è (–µ—Å—Ç—å –æ—à–∏–±–∫–∏)")
    else:
        modules_status.append("üß† AI: ‚ùå")
    
    if modules.get('crypto'):
        modules_status.append("‚Çø Crypto: ‚úÖ")
    else:
        modules_status.append("‚Çø Crypto: ‚ùå")
    
    if modules.get('analytics'):
        modules_status.append("üìä Analytics: ‚úÖ")
    else:
        modules_status.append("üìä Analytics: ‚ùå")
    
    if modules.get('memory'):
        modules_status.append("üß† Memory: ‚úÖ")
    else:
        modules_status.append("üß† Memory: ‚ùå")
    
    if modules.get('triggers'):
        try:
            trigger_stats = await modules['triggers'].get_trigger_statistics()
            total_triggers = trigger_stats.get('total_triggers', 0)
            modules_status.append(f"‚ö° Triggers: ‚úÖ ({total_triggers} –∞–∫—Ç–∏–≤–Ω—ã—Ö)")
        except:
            modules_status.append("‚ö° Triggers: ‚úÖ")
    else:
        modules_status.append("‚ö° Triggers: ‚ùå")
    
    if modules.get('permissions'):
        modules_status.append("üîí Permissions: ‚úÖ")
    else:
        modules_status.append("üîí Permissions: ‚ùå")
    
    if modules.get('moderation'):
        modules_status.append("üõ°Ô∏è Moderation: ‚úÖ")
    else:
        modules_status.append("üõ°Ô∏è Moderation: ‚ùå")
    
    status_parts.append("\n".join(modules_status))
    
    status_parts.append(f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    status_parts.append(f"üë§ <b>–í–∞—à ID:</b> {user.id}")
    status_parts.append(f"üèÜ <b>–°—Ç–∞—Ç—É—Å:</b> {'üëë –ê–¥–º–∏–Ω' if user.id in modules['config'].bot.admin_ids else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
    
    return "\n\n".join(status_parts)


__all__ = ["register_all_handlers"]