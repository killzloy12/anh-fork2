#!/usr/bin/env python3
"""
üíÄ HANDLERS v3.0 - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
üî• –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!

–î–û–ë–ê–í–õ–ï–ù–û:
‚Ä¢ üõ°Ô∏è –ü–û–õ–ù–ê–Ø –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤ –õ–° –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ ‚Çø –†–ê–ë–û–ß–ò–ï –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏
‚Ä¢ üìä –ü–û–õ–ù–ê–Ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ üé≠ –û—Ç–≤–µ—Ç—ã —Å—Ç–∏–∫–µ—Ä–∞–º–∏, GIF, —ç–º–æ–¥–∑–∏, –∞—É–¥–∏–æ
‚Ä¢ üí¨ –í–°–ï –æ—Ç–≤–µ—Ç—ã —Ä–µ–ø–ª–∞–µ–º
"""

import logging
import re
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
import json
import os
import aiohttp
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
ALLOWED_CHAT_IDS = []

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSE_STICKERS = [
    "CAACAgIAAxkBAAIBY2VpMm5hd2lkZW1haWxsb2NhbGhvc3QACg4AAkb7YksAAWqz-q7JAAEC",
    "CAACAgIAAxkBAAIBZGVpMm5hd2lkZW1haWxsb2NhbGhvc3QACg8AAkb7YksAAWqz-q7JAAEC"
]

RESPONSE_GIFS = [
    "CgACAgIAAxkBAAIBZWVpMm5hd2lkZW1haWxsb2NhbGhvc3QACgQAAkb7YksAAWqz-q7JAAEC",
    "CgACAgIAAxkBAAIBZmVpMm5hd2lkZW1haWxsb2NhbGhvc3QACgUAAkb7YksAAWqz-q7JAAEC"
]

RESPONSE_EMOJIS = ["üî•", "üíÄ", "üò§", "üôÑ", "üòí", "ü§¨", "üíØ", "‚ö°"]

def register_all_handlers(dp, modules):
    """üíÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    global ALLOWED_CHAT_IDS
    
    router = Router()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    if modules.get('config') and hasattr(modules['config'].bot, 'allowed_chat_ids'):
        ALLOWED_CHAT_IDS = modules['config'].bot.allowed_chat_ids
        print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –í –ß–ê–¢–ê–•: {ALLOWED_CHAT_IDS}")
    
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
        except:
            pass
    
    asyncio.create_task(get_bot_info())
    
    # =================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        user = message.from_user
        chat_id = message.chat.id
        
        if not check_chat_allowed(chat_id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if user.id not in modules['config'].bot.admin_ids:
                await message.reply(f"–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å –≤ —á–∞—Ç: @{bot_info.username if bot_info else 'bot'}")
                return
        
        await save_user_and_message(message, modules)
        
        if message.chat.type == 'private':
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0 - –ê–î–ú–ò–ù–ö–ê</b>\n\n"
                f"–ê–¥–º–∏–Ω: {user.first_name}\n\n"
                f"<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                f"/moderation - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                f"/ban_user [ID] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"/unban_user [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
                f"/mute_user [ID] [–º–∏–Ω—É—Ç—ã] - –ó–∞–º—É—Ç–∏—Ç—å\n"
                f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n"
                f"/mod_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                f"<b>‚ö° –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                f"/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n"
                f"/trigger_add - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
                f"/trigger_list - –°–ø–∏—Å–æ–∫\n\n"
                f"<b>üîí –î–û–°–¢–£–ü:</b>\n"
                f"/permissions - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
                f"/chats - –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
                f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
                f"/global_stats - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/user_stats [ID] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"/top_users - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
        else:
            welcome_text = (
                f"<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                f"{user.first_name}, —Ä–∞–±–æ—Ç–∞—é —Ç—É—Ç.\n\n"
                f"/help - –∫–æ–º–∞–Ω–¥—ã"
            )
        
        await message.reply(welcome_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if modules.get('analytics'):
            await track_user_action(modules, user.id, chat_id, 'start_command', {
                'chat_type': message.chat.type,
                'is_admin': user.id in modules['config'].bot.admin_ids
            })
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        if message.chat.type == 'private':
            if message.from_user.id not in modules['config'].bot.admin_ids:
                await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
                return
            
            help_text = (
                "<b>üíÄ –ê–î–ú–ò–ù–ö–ê - –í–°–ï –ö–û–ú–ê–ù–î–´</b>\n\n"
                "<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
                "/moderation - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "/ban_user [ID] - –ë–∞–Ω\n"
                "/mute_user [ID] [–º–∏–Ω] - –ú—É—Ç\n"
                "/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –í–∞—Ä–Ω\n"
                "/mod_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "<b>‚ö° –¢–†–ò–ì–ì–ï–†–´:</b>\n"
                "/triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                "/trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø]\n"
                "/trigger_list - –°–ø–∏—Å–æ–∫\n\n"
                "<b>üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:</b>\n"
                "/global_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/user_stats [ID] - –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "/top_users - –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
                "/export_data - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                "<b>üîí –°–ò–°–¢–ï–ú–ê:</b>\n"
                "/permissions - –î–æ—Å—Ç—É–ø\n"
                "/chats - –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            )
        else:
            help_text = (
                "<b>üíÄ –ë–û–¢ v3.0</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/ai [–≤–æ–ø—Ä–æ—Å] - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "/crypto_top - –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "<b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n"
                f"@{bot_info.username if bot_info else 'bot'} - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "–ù–∞–ø–∏—à–∏ '–±–æ—Ç' –≤ —Ç–µ–∫—Å—Ç–µ"
            )
            
        await message.reply(help_text)
    
    # =================== –ü–û–õ–ù–ê–Ø –ú–û–î–ï–†–ê–¶–ò–Ø ===================
    
    @router.message(Command('moderation'))
    async def moderation_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        if message.chat.type != 'private':
            await message.reply("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –õ–°.")
            return
        
        # –ü–û–õ–ù–ê–Ø –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_stats = await get_moderation_stats(modules)
        
        moderation_text = (
            f"<b>üõ°Ô∏è –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–∞–Ω–æ–≤: {mod_stats.get('total_bans', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º—É—Ç–æ–≤: {mod_stats.get('total_mutes', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {mod_stats.get('total_warns', 0)}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {mod_stats.get('deleted_messages', 0)}\n\n"
            f"<b>‚ö° –ê–ö–¢–ò–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:</b>\n"
            f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {mod_stats.get('active_bans', 0)}\n"
            f"‚Ä¢ –ó–∞–º—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {mod_stats.get('active_mutes', 0)}\n\n"
            f"<b>üîß –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if modules['config'].moderation.auto_moderation else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {modules['config'].moderation.toxicity_threshold}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç —Ñ–ª—É–¥–∞: {modules['config'].moderation.flood_threshold}\n"
            f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {modules['config'].moderation.max_warnings}\n\n"
            f"<b>üìã –ö–û–ú–ê–ù–î–´:</b>\n"
            f"/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å\n"
            f"/unban_user [ID] - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
            f"/mute_user [ID] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–º—É—Ç–∏—Ç—å\n"
            f"/unmute_user [ID] - –†–∞–∑–º—É—Ç–∏—Ç—å\n"
            f"/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å\n"
            f"/mod_stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/banned_users - –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            f"/muted_users - –°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö"
        )
        
        await message.reply(moderation_text)
    
    @router.message(Command('ban_user'))
    async def ban_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply(
                "<b>üö´ –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/ban_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/ban_user 123456789 –°–ø–∞–º –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"
            )
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
            success = await ban_user(modules, user_id, message.from_user.id, reason)
            
            if success:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('unban_user'))
    async def unban_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("/unban_user [ID]")
            return
        
        try:
            user_id = int(args[0])
            success = await unban_user(modules, user_id, message.from_user.id)
            
            if success:
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            else:
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('mute_user'))
    async def mute_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()
        if len(args) < 3:
            await message.reply(
                "<b>üîá –ú–£–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n\n"
                "/mute_user [ID] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/mute_user 123456789 60 –§–ª—É–¥"
            )
            return
        
        try:
            user_id = int(args[1])
            minutes = int(args[2])
            reason = " ".join(args[3:]) if len(args) > 3 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ"
            
            success = await mute_user(modules, user_id, message.from_user.id, minutes, reason)
            
            if success:
                await message.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å {user_id}")
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('warn_user'))
    async def warn_user_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("/warn_user [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        try:
            user_id = int(args[0])
            reason = " ".join(args[1:]) if len(args) > 1 else "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            
            warnings_count = await warn_user(modules, user_id, message.from_user.id, reason)
            
            await message.reply(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
            )
                
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    @router.message(Command('mod_stats'))
    async def mod_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        stats = await get_detailed_moderation_stats(modules)
        
        stats_text = (
            f"<b>üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"<b>üö´ –ë–ê–ù–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_bans', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('bans_today', 0)}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.get('bans_week', 0)}\n\n"
            f"<b>üîá –ú–£–¢–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_mutes', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_mutes', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('mutes_today', 0)}\n\n"
            f"<b>‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_warnings', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('warnings_today', 0)}\n\n"
            f"<b>üóëÔ∏è –£–î–ê–õ–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('deleted_messages', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('deleted_today', 0)}\n\n"
            f"<b>üìà –¢–û–ü –ü–†–ò–ß–ò–ù–´:</b>\n"
        )
        
        for reason, count in stats.get('top_reasons', []):
            stats_text += f"‚Ä¢ {reason}: {count}\n"
        
        await message.reply(stats_text)
    
    # =================== –ü–û–õ–ù–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===================
    
    @router.message(Command('crypto'))
    async def crypto_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        coin_query = message.text[8:].strip()
        if not coin_query:
            await message.reply(
                "<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n\n"
                "/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã\n"
                "/crypto_top - –¢–æ–ø 10 –º–æ–Ω–µ—Ç\n"
                "/crypto_trending - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/crypto bitcoin\n"
                "/crypto BTC\n"
                "/crypto ethereum\n"
                "/crypto TON"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_data = await get_crypto_price(coin_query)
        
        if not crypto_data:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin_query}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏
        change_emoji = "üü¢" if crypto_data['change_24h'] > 0 else "üî¥"
        trend_emoji = "üìà" if crypto_data['change_24h'] > 0 else "üìâ"
        
        crypto_text = (
            f"‚Çø <b>{crypto_data['name']} ({crypto_data['symbol'].upper()})</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> ${crypto_data['price']:,.2f}\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {change_emoji} {crypto_data['change_24h']:+.2f}%\n"
            f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{crypto_data.get('market_cap_rank', 'N/A')}\n"
            f"üíé <b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${crypto_data['market_cap']:,}\n"
            f"üì¶ <b>–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ 24—á:</b> ${crypto_data['volume_24h']:,}\n"
            f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M')}\n\n"
            f"{trend_emoji} <b>–ê–Ω–∞–ª–∏–∑:</b> "
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        if abs(crypto_data['change_24h']) > 10:
            crypto_text += "–°–∏–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å!"
        elif crypto_data['change_24h'] > 5:
            crypto_text += "–•–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç"
        elif crypto_data['change_24h'] < -5:
            crypto_text += "–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"
        else:
            crypto_text += "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
        
        await message.reply(crypto_text)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'crypto_request', {
                'coin': coin_query,
                'price': crypto_data['price'],
                'change': crypto_data['change_24h']
            })
    
    @router.message(Command('crypto_top'))
    async def crypto_top_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        top_crypto = await get_top_crypto(10)
        
        if not top_crypto:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        top_text = "<b>üî• –¢–û–ü 10 –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢</b>\n\n"
        
        for i, coin in enumerate(top_crypto, 1):
            change_emoji = "üü¢" if coin['change_24h'] > 0 else "üî¥"
            
            top_text += (
                f"{i}. <b>{coin['name']}</b> ({coin['symbol'].upper()})\n"
                f"   üí∞ ${coin['price']:,.2f} {change_emoji} {coin['change_24h']:+.2f}%\n"
                f"   üíé ${coin['market_cap']:,}\n\n"
            )
        
        top_text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}"
        
        await message.reply(top_text)
    
    @router.message(Command('crypto_trending'))
    async def crypto_trending_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        trending = await get_trending_crypto()
        
        if not trending:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        trending_text = "<b>üìà –¢–†–ï–ù–î–û–í–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´</b>\n\n"
        
        for i, coin in enumerate(trending, 1):
            trending_text += f"{i}. <b>{coin['name']}</b> - {coin['symbol'].upper()}\n"
        
        await message.reply(trending_text)
    
    # =================== –ü–û–õ–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
        
        user_stats = await get_user_statistics(modules, message.from_user.id)
        
        stats_text = (
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê {message.from_user.first_name}</b>\n\n"
            f"<b>üí¨ –ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {user_stats.get('total_messages', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('messages_today', 0)}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('messages_week', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {user_stats.get('avg_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"<b>ü§ñ AI –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: {user_stats.get('ai_requests', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('ai_requests_today', 0)}\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {user_stats.get('crypto_requests', 0)}\n\n"
            f"<b>üìà –†–ï–ô–¢–ò–ù–ì:</b>\n"
            f"‚Ä¢ –ú–µ—Å—Ç–æ –≤ —á–∞—Ç–µ: #{user_stats.get('chat_rank', 'N/A')}\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_stats.get('activity_level', '–ù–∏–∑–∫–∏–π')}\n"
            f"‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {user_stats.get('engagement_score', 0)}%\n\n"
            f"<b>‚è∞ –í–†–ï–ú–Ø:</b>\n"
            f"‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_stats.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats.get('last_activity', '–°–µ–π—á–∞—Å')}"
        )
        
        await message.reply(stats_text)
    
    @router.message(Command('global_stats'))
    async def global_stats_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        global_stats = await get_global_statistics(modules)
        
        global_text = (
            f"<b>üåç –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"<b>üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {global_stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {global_stats.get('new_users_week', 0)}\n\n"
            f"<b>üí¨ –°–û–û–ë–©–ï–ù–ò–Ø:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {global_stats.get('total_messages', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('messages_today', 0)}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {global_stats.get('messages_week', 0)}\n\n"
            f"<b>ü§ñ AI:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats.get('total_ai_requests', 0)}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('ai_requests_today', 0)}\n\n"
            f"<b>‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats.get('total_crypto_requests', 0)}\n\n"
            f"<b>üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:</b>\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {global_stats.get('banned_users', 0)}\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {global_stats.get('total_warnings', 0)}\n\n"
            f"<b>üíæ –°–ò–°–¢–ï–ú–ê:</b>\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {global_stats.get('uptime', 'N/A')}\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: 3.0 –ì—Ä—É–±–∞—è"
        )
        
        await message.reply(global_text)
    
    @router.message(Command('top_users'))
    async def top_users_handler(message: Message):
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        
        top_users = await get_top_users(modules, limit=10)
        
        top_text = "<b>üèÜ –¢–û–ü –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            
            top_text += (
                f"{medal} <b>{i}. {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
                f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('messages', 0)}\n"
                f"   ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data.get('ai_requests', 0)}\n"
                f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity_score', 0)}%\n\n"
            )
        
        await message.reply(top_text)
    
    # =================== AI –ö–û–ú–ê–ù–î–´ ===================
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            await message.reply("–ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
            
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply("–ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø.")
            return
            
        if not modules.get('ai'):
            await message.reply("AI –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "<b>ü§ñ AI –ü–û–ú–û–©–ù–ò–ö:</b>\n\n"
                "/ai [–≤–æ–ø—Ä–æ—Å]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "/ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python\n"
                "/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω\n"
                "/ai –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–µ"
            )
            return
        
        await process_harsh_ai_request(message, user_message, modules)
    
    # =================== –ú–£–õ–¨–¢–ò–ú–ï–î–ò–ô–ù–´–ï –û–¢–í–ï–¢–´ ===================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        await save_user_and_message(message, modules)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä –∏ –æ—Ç–≤–µ—á–∞–µ–º
        sticker_response = await analyze_sticker_and_respond(message.sticker)
        
        if sticker_response['type'] == 'sticker' and RESPONSE_STICKERS:
            # –û—Ç–≤–µ—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä–æ–º
            await message.reply_sticker(random.choice(RESPONSE_STICKERS))
        elif sticker_response['type'] == 'text':
            await message.reply(sticker_response['content'])
        elif sticker_response['type'] == 'emoji':
            await message.reply(random.choice(RESPONSE_EMOJIS))
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å—Ç–∏–∫–µ—Ä–∞
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'sticker_sent', {
                'emoji': message.sticker.emoji,
                'set_name': message.sticker.set_name
            })
    
    # =================== –†–ï–ü–õ–ê–ò –ò –£–ú–ù–´–ï –û–¢–í–ï–¢–´ ===================
    
    @router.message(F.reply_to_message)
    async def reply_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
        
        # –û—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –±–æ—Ç–∞
        if message.reply_to_message.from_user.id == modules['bot'].id:
            await process_reply_to_bot(message, modules)
        else:
            await process_smart_text(message, modules, bot_info)
    
    @router.message(F.text)
    async def smart_text_handler(message: Message):
        if not check_chat_allowed(message.chat.id):
            return
        
        if message.chat.type == 'private' and message.from_user.id not in modules['config'].bot.admin_ids:
            return
            
        await process_smart_text(message, modules, bot_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üíÄ –í–°–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# =================== –§–£–ù–ö–¶–ò–ò –ú–û–î–ï–†–ê–¶–ò–ò ===================

async def ban_user(modules, user_id: int, admin_id: int, reason: str) -> bool:
    """üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            await modules['db'].execute(
                "INSERT INTO bans (user_id, admin_id, reason, ban_date) VALUES (?, ?, ?, ?)",
                (user_id, admin_id, reason, datetime.now())
            )
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
        return False

async def unban_user(modules, user_id: int, admin_id: int) -> bool:
    """‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            result = await modules['db'].execute(
                "DELETE FROM bans WHERE user_id = ?", (user_id,)
            )
            return result.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
        return False

async def mute_user(modules, user_id: int, admin_id: int, minutes: int, reason: str) -> bool:
    """üîá –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            mute_until = datetime.now() + timedelta(minutes=minutes)
            await modules['db'].execute(
                "INSERT INTO mutes (user_id, admin_id, reason, mute_until) VALUES (?, ?, ?, ?)",
                (user_id, admin_id, reason, mute_until)
            )
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º—É—Ç–∞: {e}")
        return False

async def warn_user(modules, user_id: int, admin_id: int, reason: str) -> int:
    """‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            await modules['db'].execute(
                "INSERT INTO warnings (user_id, admin_id, reason, warn_date) VALUES (?, ?, ?, ?)",
                (user_id, admin_id, reason, datetime.now())
            )
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            result = await modules['db'].fetchone(
                "SELECT COUNT(*) as count FROM warnings WHERE user_id = ?", (user_id,)
            )
            return result['count'] if result else 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        return 0

async def get_moderation_stats(modules) -> Dict[str, int]:
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        if not modules.get('db'):
            return {}
        
        stats = {}
        
        # –°—á–∏—Ç–∞–µ–º –±–∞–Ω—ã
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM bans")
        stats['total_bans'] = result['count'] if result else 0
        
        # –°—á–∏—Ç–∞–µ–º –º—É—Ç—ã
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM mutes")
        stats['total_mutes'] = result['count'] if result else 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –º—É—Ç—ã
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM mutes WHERE mute_until > ?", (datetime.now(),)
        )
        stats['active_mutes'] = result['count'] if result else 0
        
        # –í–∞—Ä–Ω—ã
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM warnings")
        stats['total_warns'] = result['count'] if result else 0
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return {}

async def get_detailed_moderation_stats(modules) -> Dict[str, Any]:
    """üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        stats = await get_moderation_stats(modules)
        
        if modules.get('db'):
            today = datetime.now().date()
            week_ago = datetime.now() - timedelta(days=7)
            
            # –ë–∞–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            result = await modules['db'].fetchone(
                "SELECT COUNT(*) as count FROM bans WHERE DATE(ban_date) = ?", (today,)
            )
            stats['bans_today'] = result['count'] if result else 0
            
            # –ë–∞–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            result = await modules['db'].fetchone(
                "SELECT COUNT(*) as count FROM bans WHERE ban_date >= ?", (week_ago,)
            )
            stats['bans_week'] = result['count'] if result else 0
            
            # –¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã
            results = await modules['db'].fetchall(
                "SELECT reason, COUNT(*) as count FROM warnings GROUP BY reason ORDER BY count DESC LIMIT 5"
            )
            stats['top_reasons'] = [(r['reason'], r['count']) for r in results] if results else []
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# =================== –§–£–ù–ö–¶–ò–ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ ===================

async def get_crypto_price(coin_query: str) -> Dict[str, Any]:
    """‚Çø –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.coingecko.com/api/v3/simple/price"
            params = {
                'ids': coin_query.lower(),
                'vs_currencies': 'usd',
                'include_24hr_change': 'true',
                'include_market_cap': 'true',
                'include_24hr_vol': 'true'
            }
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ —Å–∏–º–≤–æ–ª—É, –∏—â–µ–º –ø–æ –Ω–µ–º—É
            if len(coin_query) <= 5:
                search_url = f"https://api.coingecko.com/api/v3/search"
                search_params = {'query': coin_query}
                
                async with session.get(search_url, params=search_params) as resp:
                    if resp.status == 200:
                        search_data = await resp.json()
                        coins = search_data.get('coins', [])
                        if coins:
                            coin_id = coins[0]['id']
                            params['ids'] = coin_id
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    for coin_id, coin_data in data.items():
                        return {
                            'name': coin_id.title(),
                            'symbol': coin_query.upper(),
                            'price': coin_data['usd'],
                            'change_24h': coin_data.get('usd_24h_change', 0),
                            'market_cap': coin_data.get('usd_market_cap', 0),
                            'volume_24h': coin_data.get('usd_24h_vol', 0),
                            'market_cap_rank': None
                        }
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def get_top_crypto(limit: int = 10) -> List[Dict[str, Any]]:
    """üî• –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            url = "https://api.coingecko.com/api/v3/coins/markets"
            params = {
                'vs_currency': 'usd',
                'order': 'market_cap_desc',
                'per_page': limit,
                'page': 1,
                'sparkline': False,
                'price_change_percentage': '24h'
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return [
                        {
                            'name': coin['name'],
                            'symbol': coin['symbol'],
                            'price': coin['current_price'],
                            'change_24h': coin['price_change_percentage_24h'] or 0,
                            'market_cap': coin['market_cap'],
                            'volume_24h': coin['total_volume']
                        }
                        for coin in data
                    ]
        return []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return []

async def get_trending_crypto() -> List[Dict[str, str]]:
    """üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = "https://api.coingecko.com/api/v3/search/trending"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return [
                        {
                            'name': coin['item']['name'],
                            'symbol': coin['item']['symbol']
                        }
                        for coin in data.get('coins', [])[:7]
                    ]
        return []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return []

# =================== –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò ===================

async def track_user_action(modules, user_id: int, chat_id: int, action: str, data: Dict = None):
    """üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if modules.get('db'):
            await modules['db'].execute(
                "INSERT INTO user_actions (user_id, chat_id, action, action_data, timestamp) VALUES (?, ?, ?, ?, ?)",
                (user_id, chat_id, action, json.dumps(data or {}), datetime.now())
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")

async def get_user_statistics(modules, user_id: int) -> Dict[str, Any]:
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not modules.get('db'):
            return {}
        
        stats = {}
        today = datetime.now().date()
        week_ago = datetime.now() - timedelta(days=7)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM messages WHERE user_id = ?", (user_id,)
        )
        stats['total_messages'] = result['count'] if result else 0
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM messages WHERE user_id = ? AND DATE(timestamp) = ?",
            (user_id, today)
        )
        stats['messages_today'] = result['count'] if result else 0
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM messages WHERE user_id = ? AND timestamp >= ?",
            (user_id, week_ago)
        )
        stats['messages_week'] = result['count'] if result else 0
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        result = await modules['db'].fetchone(
            "SELECT AVG(LENGTH(text)) as avg_len FROM messages WHERE user_id = ? AND text != ''",
            (user_id,)
        )
        stats['avg_length'] = int(result['avg_len']) if result and result['avg_len'] else 0
        
        # AI –∑–∞–ø—Ä–æ—Å—ã
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE user_id = ? AND action = 'ai_request'",
            (user_id,)
        )
        stats['ai_requests'] = result['count'] if result else 0
        
        # AI –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE user_id = ? AND action = 'ai_request' AND DATE(timestamp) = ?",
            (user_id, today)
        )
        stats['ai_requests_today'] = result['count'] if result else 0
        
        # –ö—Ä–∏–ø—Ç–æ –∑–∞–ø—Ä–æ—Å—ã
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE user_id = ? AND action = 'crypto_request'",
            (user_id,)
        )
        stats['crypto_requests'] = result['count'] if result else 0
        
        # –ü–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await modules['db'].fetchone(
            "SELECT MIN(timestamp) as first_seen, MAX(timestamp) as last_activity FROM messages WHERE user_id = ?",
            (user_id,)
        )
        if result:
            stats['first_seen'] = result['first_seen'].strftime('%d.%m.%Y') if result['first_seen'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            stats['last_activity'] = result['last_activity'].strftime('%d.%m %H:%M') if result['last_activity'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if stats['total_messages'] > 100:
            stats['activity_level'] = '–í—ã—Å–æ–∫–∏–π'
        elif stats['total_messages'] > 20:
            stats['activity_level'] = '–°—Ä–µ–¥–Ω–∏–π'
        else:
            stats['activity_level'] = '–ù–∏–∑–∫–∏–π'
        
        # –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (—É—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
        engagement = min(100, (stats['total_messages'] + stats['ai_requests'] * 2) // 5)
        stats['engagement_score'] = engagement
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return {}

async def get_global_statistics(modules) -> Dict[str, Any]:
    """üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        if not modules.get('db'):
            return {}
        
        stats = {}
        today = datetime.now().date()
        week_ago = datetime.now() - timedelta(days=7)
        
        # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await modules['db'].fetchone("SELECT COUNT(DISTINCT user_id) as count FROM messages")
        stats['total_users'] = result['count'] if result else 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await modules['db'].fetchone(
            "SELECT COUNT(DISTINCT user_id) as count FROM messages WHERE DATE(timestamp) = ?", (today,)
        )
        stats['active_today'] = result['count'] if result else 0
        
        # –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
        result = await modules['db'].fetchone(
            "SELECT COUNT(DISTINCT user_id) as count FROM users WHERE DATE(first_seen) >= ?", (week_ago,)
        )
        stats['new_users_week'] = result['count'] if result else 0
        
        # –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM messages")
        stats['total_messages'] = result['count'] if result else 0
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM messages WHERE DATE(timestamp) = ?", (today,)
        )
        stats['messages_today'] = result['count'] if result else 0
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM messages WHERE timestamp >= ?", (week_ago,)
        )
        stats['messages_week'] = result['count'] if result else 0
        
        # AI –∑–∞–ø—Ä–æ—Å—ã
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE action = 'ai_request'"
        )
        stats['total_ai_requests'] = result['count'] if result else 0
        
        # AI –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE action = 'ai_request' AND DATE(timestamp) = ?", (today,)
        )
        stats['ai_requests_today'] = result['count'] if result else 0
        
        # –ö—Ä–∏–ø—Ç–æ –∑–∞–ø—Ä–æ—Å—ã
        result = await modules['db'].fetchone(
            "SELECT COUNT(*) as count FROM user_actions WHERE action = 'crypto_request'"
        )
        stats['total_crypto_requests'] = result['count'] if result else 0
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM bans")
        stats['banned_users'] = result['count'] if result else 0
        
        result = await modules['db'].fetchone("SELECT COUNT(*) as count FROM warnings")
        stats['total_warnings'] = result['count'] if result else 0
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

async def get_top_users(modules, limit: int = 10) -> List[Dict[str, Any]]:
    """üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not modules.get('db'):
            return []
        
        results = await modules['db'].fetchall("""
            SELECT 
                m.user_id,
                u.first_name || COALESCE(' ' || u.last_name, '') as name,
                COUNT(m.id) as messages,
                COUNT(CASE WHEN ua.action = 'ai_request' THEN 1 END) as ai_requests,
                (COUNT(m.id) + COUNT(CASE WHEN ua.action = 'ai_request' THEN 1 END) * 2) as activity_score
            FROM messages m
            JOIN users u ON m.user_id = u.id
            LEFT JOIN user_actions ua ON m.user_id = ua.user_id
            GROUP BY m.user_id, u.first_name, u.last_name
            ORDER BY activity_score DESC
            LIMIT ?
        """, (limit,))
        
        return [
            {
                'name': r['name'],
                'messages': r['messages'],
                'ai_requests': r['ai_requests'],
                'activity_score': min(100, r['activity_score'] // 10)
            }
            for r in results
        ] if results else []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

# =================== –§–£–ù–ö–¶–ò–ò –ú–£–õ–¨–¢–ò–ú–ï–î–ò–ê ===================

async def analyze_sticker_and_respond(sticker: Sticker) -> Dict[str, str]:
    """üé≠ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    
    emoji = sticker.emoji or "ü§î"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ —ç–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞
    if emoji in ["üòÇ", "ü§£", "üòÑ", "üòÉ"]:
        return {"type": "text", "content": "–ù—É —Å–º–µ—à–Ω–æ —Ç–µ–±–µ"}
    elif emoji in ["üò¢", "üò≠", "üòû"]:
        return {"type": "text", "content": "–ß–µ–≥–æ –Ω–æ–µ—à—å"}
    elif emoji in ["üò°", "ü§¨", "üò†"]:
        return {"type": "emoji", "content": "üñï"}
    elif emoji in ["‚ù§Ô∏è", "üíï", "üòç"]:
        return {"type": "text", "content": "–î–∞–≤–∞–π –±–µ–∑ —Å–æ–ø–ª–µ–π"}
    elif emoji in ["ü§î", "üßê", "üòï"]:
        return {"type": "sticker", "content": None}
    else:
        return {"type": "emoji", "content": random.choice(RESPONSE_EMOJIS)}

# =================== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================

def check_chat_allowed(chat_id: int) -> bool:
    """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    if not ALLOWED_CHAT_IDS:
        return True
    return chat_id in ALLOWED_CHAT_IDS

async def save_user_and_message(message: Message, modules):
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–º"""
    try:
        user = message.from_user
        
        if modules.get('db'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await modules['db'].execute("""
                INSERT OR REPLACE INTO users 
                (id, username, first_name, last_name, language_code, is_premium, first_seen, last_seen)
                VALUES (?, ?, ?, ?, ?, ?, 
                    COALESCE((SELECT first_seen FROM users WHERE id = ?), ?),
                    ?)
            """, (
                user.id, user.username, user.first_name, user.last_name,
                user.language_code, getattr(user, 'is_premium', False),
                user.id, datetime.now(), datetime.now()
            ))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
            await modules['db'].execute("""
                INSERT OR REPLACE INTO chats
                (id, type, title, username, first_seen, last_activity)
                VALUES (?, ?, ?, ?, 
                    COALESCE((SELECT first_seen FROM chats WHERE id = ?), ?),
                    ?)
            """, (
                message.chat.id, message.chat.type, message.chat.title,
                message.chat.username, message.chat.id, datetime.now(), datetime.now()
            ))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await modules['db'].execute("""
                INSERT INTO messages
                (message_id, user_id, chat_id, text, message_type, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                message.message_id, user.id, message.chat.id,
                message.text or '', 'text' if message.text else 'media',
                datetime.now()
            ))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def process_harsh_ai_request(message: Message, user_message: str, modules):
    """ü§ñ –ì—Ä—É–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI"""
    try:
        context = {
            'style_instruction': (
                "–û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–æ–≤. "
                "–ö–∞–∫ –∑–ª–æ–π –∞–¥–º–∏–Ω. –ù–∏–∫–∞–∫–∏—Ö –≤–µ–∂–ª–∏–≤—ã—Ö —Ñ—Ä–∞–∑. "
                "–°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –∂–µ—Å—Ç–∫–æ."
            )
        }
        
        if modules.get('memory'):
            memory_context = await modules['memory'].get_context(
                message.from_user.id, message.chat.id
            )
            context.update(memory_context)
        
        response = await modules['ai'].generate_response(
            user_message, message.from_user.id, context
        )
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ë–æ—Ç:"
        if response.startswith("–ë–æ—Ç:"):
            response = response[4:].strip()
        
        # –ì—Ä—É–±–∞—è –æ—á–∏—Å—Ç–∫–∞
        response = clean_harsh_response(response)
        
        # –û—Ç–≤–µ—á–∞–µ–º —Ä–µ–ø–ª–∞–µ–º
        await message.reply(response)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ AI –∑–∞–ø—Ä–æ—Å–∞
        if modules.get('analytics'):
            await track_user_action(modules, message.from_user.id, message.chat.id, 'ai_request', {
                'query': user_message[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                'response_length': len(response)
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        if modules.get('memory'):
            await modules['memory'].add_interaction(
                message.from_user.id, message.chat.id,
                user_message, response
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        await message.reply("AI —Å–¥–æ—Ö.")

def clean_harsh_response(response: str) -> str:
    """üßπ –ì—Ä—É–±–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    bad_phrases = [
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã",
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å", "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ",
        "–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
        "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å", "–£–¥–∞—á–∏ –≤–∞–º", "–í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ",
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å",
        "–ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥", "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å"
    ]
    
    cleaned = response
    for phrase in bad_phrases:
        if phrase in cleaned:
            parts = cleaned.split(phrase)
            cleaned = parts[0].rstrip()
    
    # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª—ã
    emoji_pattern = r'[üòäüòÑüòÉüòÜüòÅü§óüéâ‚ú®üí´‚≠êüåüüí°üî•üëçüëåüéØüìöüîçüí≠ü§îüòåüòáü•∞üòçü§©]+$'
    cleaned = re.sub(emoji_pattern, '', cleaned).strip()
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–µ –Ω–∞—á–∞–ª–∞
    polite_starts = ["–ö–æ–Ω–µ—á–Ω–æ", "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ", "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º", "–†–∞–∑—É–º–µ–µ—Ç—Å—è"]
    for start in polite_starts:
        if cleaned.startswith(start):
            cleaned = cleaned[len(start):].lstrip(", ")
    
    return cleaned.strip()

async def process_smart_text(message: Message, modules, bot_info):
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    try:
        await save_user_and_message(message, modules)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        should_respond = await check_bot_mentions(message, bot_info)
        
        if should_respond:
            await process_harsh_smart_response(message, modules)
        else:
            # –†–µ–¥–∫–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if random.random() < 0.005:
                responses = ["–ê–≥–∞.", "–ü–æ–Ω—è—Ç–Ω–æ.", "–Ø—Å–Ω–æ."]
                await message.reply(random.choice(responses))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def check_bot_mentions(message: Message, bot_info) -> bool:
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        if message.chat.type == 'private':
            return True
        
        text = message.text.lower()
        
        # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if bot_info and f'@{bot_info.username.lower()}' in text:
            return True
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = ['–±–æ—Ç', 'bot', '—Ä–æ–±–æ—Ç', '–ø–æ–º–æ—â–Ω–∏–∫']
        if any(keyword in text for keyword in keywords):
            return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if '?' in message.text and len(message.text) > 15:
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

async def process_harsh_smart_response(message: Message, modules):
    """üí° –ì—Ä—É–±—ã–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    try:
        if modules.get('ai'):
            await process_harsh_ai_request(message, message.text, modules)
        else:
            responses = ["–ß—Ç–æ?", "AI –æ—Ç–∫–ª—é—á–µ–Ω.", "–ù–∞—Å—Ç—Ä–æ–π –∫–ª—é—á–∏.", "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."]
            await message.reply(random.choice(responses))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

async def process_reply_to_bot(message: Message, modules):
    """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞"""
    try:
        if modules.get('ai'):
            context_message = f"–ù–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.reply_to_message.text}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: '{message.text}'"
            await process_harsh_ai_request(message, context_message, modules)
        else:
            await message.reply("–ü–æ–Ω—è–ª.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–ª–∞—è: {e}")


__all__ = ["register_all_handlers"]