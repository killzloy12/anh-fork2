#!/usr/bin/env python3
"""
üõ°Ô∏è MODERATION MODULE v2.0
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
"""

import logging
from typing import Dict, Any, List
from datetime import datetime, timedelta
import re

logger = logging.getLogger(__name__)


class ModerationModule:
    """üõ°Ô∏è –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        self.banned_words = [
            '—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–º–æ—à–µ–Ω–Ω–∏–∫', '–æ–±–º–∞–Ω'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞
        self.spam_patterns = [
            r'(https?://\S+){3,}',  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            r'(.)\1{10,}',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            r'[A-Z]{20,}'   # –ú–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        ]
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_warnings = {}
        self.flood_protection = {}
        
        logger.info("üõ°Ô∏è Moderation Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_message(self, user_id: int, chat_id: int, message: str) -> Dict[str, Any]:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            checks = {
                'is_spam': self._check_spam(message),
                'has_banned_words': self._check_banned_words(message),
                'is_flood': self._check_flood(user_id),
                'toxicity_level': self._check_toxicity(message)
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action = 'allow'
            reason = ''
            
            if checks['is_spam']:
                action = 'delete'
                reason = '–°–ø–∞–º'
            elif checks['has_banned_words']:
                action = 'warn'
                reason = '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            elif checks['is_flood']:
                action = 'timeout'
                reason = '–§–ª—É–¥'
            elif checks['toxicity_level'] > self.config.moderation.toxicity_threshold:
                action = 'warn'
                reason = '–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å'
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if action != 'allow':
                await self._log_moderation_action(user_id, chat_id, action, reason)
            
            return {
                'action': action,
                'reason': reason,
                'checks': checks,
                'user_warnings': self.user_warnings.get(user_id, 0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {'action': 'allow', 'error': str(e)}
    
    def _check_spam(self, message: str) -> bool:
        """üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        
        try:
            for pattern in self.spam_patterns:
                if re.search(pattern, message):
                    return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞: {e}")
            return False
    
    def _check_banned_words(self, message: str) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        
        message_lower = message.lower()
        return any(word in message_lower for word in self.banned_words)
    
    def _check_flood(self, user_id: int) -> bool:
        """üåä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥–∞"""
        
        try:
            current_time = datetime.now()
            
            if user_id not in self.flood_protection:
                self.flood_protection[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            self.flood_protection[user_id].append(current_time)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –º–∏–Ω—É—Ç—É
            minute_ago = current_time - timedelta(minutes=1)
            self.flood_protection[user_id] = [
                t for t in self.flood_protection[user_id] 
                if t > minute_ago
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            return len(self.flood_protection[user_id]) > self.config.moderation.flood_threshold
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞: {e}")
            return False
    
    def _check_toxicity(self, message: str) -> float:
        """‚ò†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏"""
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
            toxic_words = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π']
            toxic_count = sum(1 for word in toxic_words if word in message.lower())
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
            return min(1.0, toxic_count / 3)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {e}")
            return 0.0
    
    async def _log_moderation_action(self, user_id: int, chat_id: int, action: str, reason: str):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.track_event(
                user_id, chat_id, 'moderation_action',
                {'action': action, 'reason': reason}
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if action == 'warn':
                self.user_warnings[user_id] = self.user_warnings.get(user_id, 0) + 1
            
            logger.info(f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
    
    def get_user_warnings(self, user_id: int) -> int:
        """‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        return self.user_warnings.get(user_id, 0)
    
    def reset_user_warnings(self, user_id: int) -> bool:
        """üîÑ –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        
        try:
            if user_id in self.user_warnings:
                del self.user_warnings[user_id]
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
            return False


__all__ = ["ModerationModule"]