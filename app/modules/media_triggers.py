#!/usr/bin/env python3
"""
üé≠ MEDIA TRIGGERS MODULE v3.0 - –ú–£–õ–¨–¢–ò–ú–ï–î–ò–ô–ù–´–ï –¢–†–ò–ì–ì–ï–†–´
üé® –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∏–∫–µ—Ä–æ–≤, GIF, —ç–º–æ–¥–∑–∏ –∏ –∞—É–¥–∏–æ

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ GIF-—Ä–µ–∞–∫—Ü–∏–∏
‚Ä¢ –£–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Ç–µ–º–∞–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ TTS
"""

import logging
import asyncio
import random
import re
import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from collections import defaultdict
import aiofiles
import aiohttp

logger = logging.getLogger(__name__)


@dataclass
class MediaContent:
    """üé® –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    type: str  # sticker, gif, emoji, audio, voice
    content: str  # file_id –¥–ª—è telegram –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    description: str = ""
    tags: List[str] = field(default_factory=list)
    emotion: str = "neutral"
    context: str = "general"
    usage_count: int = 0
    success_rate: float = 0.0


@dataclass
class MediaTriggerAction:
    """üé¨ –ú–µ–¥–∏–∞-–¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    type: str  # send_sticker, send_gif, send_emoji, send_audio, send_voice, react_emoji
    content: str  # ID –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    probability: float = 1.0
    delay: float = 0.0
    context_filters: List[str] = field(default_factory=list)
    emotion_match: str = "any"


class StickerAnalyzer:
    """üé≠ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    
    def __init__(self):
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
        self.sticker_emotions = {
            '—Ä–∞–¥–æ—Å—Ç—å': ['üòÑ', 'üòä', 'üéâ', 'üëç', '‚ù§Ô∏è', 'ü•∞', 'üòç'],
            '–≥—Ä—É—Å—Ç—å': ['üò¢', 'üò≠', 'üíî', 'üòî', '‚òπÔ∏è', 'üòø'],
            '–∑–ª–æ—Å—Ç—å': ['üò†', 'üò°', 'ü§¨', 'üí¢', 'üëø', 'üñï'],
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['üòÆ', 'üò≤', 'ü§Ø', 'üò±', 'üôÄ'],
            '—Å–º–µ—Ö': ['üòÇ', 'ü§£', 'üòÜ', 'ü§™', 'üòã'],
            '–ª—é–±–æ–≤—å': ['‚ù§Ô∏è', 'üíï', 'üíñ', 'üòç', 'ü•∞', 'üòò'],
            '—É—Å—Ç–∞–ª–æ—Å—Ç—å': ['üò¥', 'ü•±', 'üò™', 'üí§'],
            '–¥—É–º–∞—é': ['ü§î', 'üßê', 'üí≠', 'ü§®'],
            '–ø—Ä–∏–≤–µ—Ç': ['üëã', 'üôã', 'üëç'],
            '–ø–æ–∫–∞': ['üëã', '‚úã', 'üñêÔ∏è'],
            '–æ–∫': ['üëå', 'üëç', '‚úÖ', 'üÜó'],
            '–Ω–µ—Ç': ['‚ùå', 'üö´', 'üëé', 'üôÖ'],
            '–¥–∞': ['‚úÖ', 'üëç', 'üëå', 'üíØ'],
            '–≤–æ–ø—Ä–æ—Å': ['‚ùì', '‚ùî', 'ü§∑']
        }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
        self.context_stickers = {
            '—Ä–∞–±–æ—Ç–∞': ['üíº', '‚ö°', 'üí™', 'üî•', 'üìà'],
            '—É—á–µ–±–∞': ['üìö', 'üéì', '‚úèÔ∏è', 'üìù', 'ü§ì'],
            '—Å–ø–æ—Ä—Ç': ['‚öΩ', 'üèÄ', 'üèà', 'üéæ', 'üèÉ', 'üí™'],
            '–µ–¥–∞': ['üçï', 'üçî', 'üç∞', '‚òï', 'üç∫', 'ü•≥'],
            '–ø–æ–≥–æ–¥–∞': ['‚òÄÔ∏è', 'üåßÔ∏è', '‚ùÑÔ∏è', '‚õàÔ∏è', 'üåà'],
            '–≤—Ä–µ–º—è': ['‚è∞', 'üïê', 'üåÖ', 'üåô', '‚≠ê'],
            '–ø—Ä–∞–∑–¥–Ω–∏–∫': ['üéâ', 'üéÇ', 'üéÅ', 'ü•≥', 'üéä'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ': ['‚úàÔ∏è', 'üöó', 'üèñÔ∏è', 'üèîÔ∏è', 'üåç']
        }
    
    def analyze_sticker_emotion(self, sticker_emoji: str) -> Tuple[str, float]:
        """üîç –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞"""
        for emotion, emojis in self.sticker_emotions.items():
            if sticker_emoji in emojis:
                return emotion, 0.8
        
        return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', 0.3
    
    def get_response_sticker(self, input_emotion: str, context: str = "general") -> Optional[str]:
        """üé≠ –ü–æ–¥–±–æ—Ä –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞"""
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        emotion_responses = {
            '—Ä–∞–¥–æ—Å—Ç—å': ['üòÑ', 'üéâ', 'üëç', 'ü•≥'],
            '–≥—Ä—É—Å—Ç—å': ['ü§ó', 'üòä', 'üí™', '‚ù§Ô∏è'],  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ
            '–∑–ª–æ—Å—Ç—å': ['üòå', 'ü§∑', '‚òÆÔ∏è'],       # –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['üòÆ', 'ü§Ø', 'üò≤'],
            '—Å–º–µ—Ö': ['üòÇ', 'ü§£', 'üòÜ'],
            '–ª—é–±–æ–≤—å': ['‚ù§Ô∏è', 'üòç', 'ü•∞'],
            '–ø—Ä–∏–≤–µ—Ç': ['üëã', 'üòä', 'üôã'],
            '–ø–æ–∫–∞': ['üëã', 'üòä', 'ü§ó'],
            '–≤–æ–ø—Ä–æ—Å': ['ü§î', 'üí≠', 'üßê'],
            '–æ–∫': ['üëå', '‚úÖ', 'üëç'],
            '–Ω–µ—Ç': ['ü§∑', 'üòî', 'üëé'],
            '–¥–∞': ['üëç', '‚úÖ', 'üíØ']
        }
        
        if input_emotion in emotion_responses:
            return random.choice(emotion_responses[input_emotion])
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if context in self.context_stickers:
            return random.choice(self.context_stickers[context])
        
        # –û–±—â–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
        general_stickers = ['üòä', 'üëç', 'üôÇ', 'üòå', 'üëå']
        return random.choice(general_stickers)


class GifManager:
    """üé¨ –ú–µ–Ω–µ–¥–∂–µ—Ä GIF"""
    
    def __init__(self):
        self.gif_collections = {
            '–ø—Ä–∏–≤–µ—Ç': [
                'CAACAgIAAxkBAAIBYmJ1h2fXYe...',  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ file_id
                'CAACAgIAAxkBAAIBY2J1h2fXYf...'
            ],
            '–ø–æ–∫–∞': [
                'CAACAgIAAxkBAAIBZGJ1h2fXYg...',
                'CAACAgIAAxkBAAIBZWJ1h2fXYh...'
            ],
            '–¥–∞': [
                'CAACAgIAAxkBAAIBZmJ1h2fXYi...',
                'CAACAgIAAxkBAAIBZ2J1h2fXYj...'
            ],
            '–Ω–µ—Ç': [
                'CAACAgIAAxkBAAIBaGJ1h2fXYk...',
                'CAACAgIAAxkBAAIBaWJ1h2fXYl...'
            ],
            '—Å–º–µ—Ö': [
                'CAACAgIAAxkBAAIBamJ1h2fXYm...',
                'CAACAgIAAxkBAAIBa2J1h2fXYn...'
            ],
            '—Ç–∞–Ω–µ—Ü': [
                'CAACAgIAAxkBAAIBbGJ1h2fXYo...',
                'CAACAgIAAxkBAAIBbWJ1h2fXYp...'
            ],
            '–∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã': [
                'CAACAgIAAxkBAAIBbmJ1h2fXYq...',
                'CAACAgIAAxkBAAIBb2J1h2fXYr...'
            ],
            '–ø–æ—Ü–µ–ª—É–π': [
                'CAACAgIAAxkBAAIBcGJ1h2fXYs...',
                'CAACAgIAAxkBAAIBcWJ1h2fXYt...'
            ],
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': [
                'CAACAgIAAxkBAAIBcmJ1h2fXYu...',
                'CAACAgIAAxkBAAIBc2J1h2fXYv...'
            ],
            '–≥—Ä—É—Å—Ç–Ω–æ': [
                'CAACAgIAAxkBAAIBdGJ1h2fXYw...',
                'CAACAgIAAxkBAAIBdWJ1h2fXYx...'
            ]
        }
    
    def get_gif_by_emotion(self, emotion: str) -> Optional[str]:
        """üé¨ –ü–æ–ª—É—á–∏—Ç—å GIF –ø–æ —ç–º–æ—Ü–∏–∏"""
        emotion_mapping = {
            '—Ä–∞–¥–æ—Å—Ç—å': '—Ç–∞–Ω–µ—Ü',
            '—Å–º–µ—Ö': '—Å–º–µ—Ö',
            '–≥—Ä—É—Å—Ç—å': '–≥—Ä—É—Å—Ç–Ω–æ',
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
            '–ª—é–±–æ–≤—å': '–ø–æ—Ü–µ–ª—É–π',
            '–ø—Ä–∏–≤–µ—Ç': '–ø—Ä–∏–≤–µ—Ç',
            '–ø–æ–∫–∞': '–ø–æ–∫–∞',
            '–¥–∞': '–∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã',
            '–Ω–µ—Ç': '–≥—Ä—É—Å—Ç–Ω–æ'
        }
        
        gif_type = emotion_mapping.get(emotion)
        if gif_type and gif_type in self.gif_collections:
            return random.choice(self.gif_collections[gif_type])
        
        return None
    
    def get_random_gif(self, category: str = None) -> Optional[str]:
        """üé≤ –°–ª—É—á–∞–π–Ω—ã–π GIF"""
        if category and category in self.gif_collections:
            return random.choice(self.gif_collections[category])
        
        # –°–ª—É—á–∞–π–Ω—ã–π GIF –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_gifs = []
        for gifs in self.gif_collections.values():
            all_gifs.extend(gifs)
        
        return random.choice(all_gifs) if all_gifs else None


class AudioManager:
    """üéµ –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ"""
    
    def __init__(self):
        self.audio_clips = {
            '–ø—Ä–∏–≤–µ—Ç': [
                'AwACAgIAAxkBAAIBfGJ1h2fXY0...',  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ voice file_id
                'AwACAgIAAxkBAAIBfWJ1h2fXY1...'
            ],
            '–ø–æ–∫–∞': [
                'AwACAgIAAxkBAAIBfmJ1h2fXY2...',
                'AwACAgIAAxkBAAIBf2J1h2fXY3...'
            ],
            '—Å–ø–∞—Å–∏–±–æ': [
                'AwACAgIAAxkBAAIBgGJ1h2fXY4...',
                'AwACAgIAAxkBAAIBgWJ1h2fXY5...'
            ],
            '—Å–º–µ—Ö': [
                'AwACAgIAAxkBAAIBgmJ1h2fXY6...',
                'AwACAgIAAxkBAAIBg2J1h2fXY7...'
            ]
        }
        
        # TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        self.tts_available = False
    
    def get_audio_by_emotion(self, emotion: str) -> Optional[str]:
        """üéµ –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –ø–æ —ç–º–æ—Ü–∏–∏"""
        emotion_mapping = {
            '—Ä–∞–¥–æ—Å—Ç—å': '—Å–º–µ—Ö',
            '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': '—Å–ø–∞—Å–∏–±–æ',
            '–ø—Ä–∏–≤–µ—Ç': '–ø—Ä–∏–≤–µ—Ç',
            '–ø–æ–∫–∞': '–ø–æ–∫–∞'
        }
        
        audio_type = emotion_mapping.get(emotion)
        if audio_type and audio_type in self.audio_clips:
            return random.choice(self.audio_clips[audio_type])
        
        return None
    
    async def generate_tts_audio(self, text: str, emotion: str = "neutral") -> Optional[str]:
        """üó£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –∞—É–¥–∏–æ"""
        if not self.tts_available:
            return None
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TTS —Å–µ—Ä–≤–∏—Å–æ–º
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å Google TTS, Amazon Polly, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º TTS
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {e}")
            return None


class MediaTriggersModule:
    """üé≠ –ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    
    def __init__(self, db_service, config, bot):
        self.db = db_service
        self.config = config
        self.bot = bot
        
        self.sticker_analyzer = StickerAnalyzer()
        self.gif_manager = GifManager()
        self.audio_manager = AudioManager()
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –º–µ–¥–∏–∞
        self.media_collections = {
            'stickers': {},
            'gifs': {},
            'audio': {}
        }
        
        logger.info("üé≠ –ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        await self._create_media_tables()
        await self._load_media_collections()
        await self._setup_default_media_triggers()
        logger.info("üé≠ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    async def _create_media_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–µ–¥–∏–∞"""
        tables = [
            """
            CREATE TABLE IF NOT EXISTS media_content (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT NOT NULL,  -- sticker, gif, emoji, audio, voice
                content TEXT NOT NULL,  -- file_id –∏–ª–∏ –ø—É—Ç—å
                description TEXT,
                tags TEXT,  -- JSON
                emotion TEXT DEFAULT 'neutral',
                context TEXT DEFAULT 'general',
                usage_count INTEGER DEFAULT 0,
                success_rate REAL DEFAULT 0.0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS media_triggers (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                trigger_type TEXT NOT NULL,  -- emotion, keyword, context, time
                trigger_pattern TEXT NOT NULL,
                media_type TEXT NOT NULL,
                media_content TEXT NOT NULL,
                probability REAL DEFAULT 1.0,
                cooldown REAL DEFAULT 0.0,
                allowed_chats TEXT,  -- JSON
                allowed_users TEXT,  -- JSON
                is_active BOOLEAN DEFAULT TRUE,
                usage_count INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS sticker_responses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                input_sticker_id TEXT,
                input_emotion TEXT,
                response_type TEXT,  -- sticker, gif, emoji
                response_content TEXT,
                confidence REAL DEFAULT 0.8,
                usage_count INTEGER DEFAULT 0,
                success_rate REAL DEFAULT 0.0
            )
            """
        ]
        
        for table_sql in tables:
            await self.db.execute(table_sql)
    
    async def _load_media_collections(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        try:
            media_items = await self.db.fetch_all("SELECT * FROM media_content")
            
            for item in media_items:
                media_content = MediaContent(
                    type=item['type'],
                    content=item['content'],
                    description=item['description'] or '',
                    tags=json.loads(item['tags'] or '[]'),
                    emotion=item['emotion'],
                    context=item['context'],
                    usage_count=item['usage_count'],
                    success_rate=item['success_rate']
                )
                
                if item['type'] not in self.media_collections:
                    self.media_collections[item['type']] = {}
                
                self.media_collections[item['type']][item['content']] = media_content
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
    
    async def _setup_default_media_triggers(self):
        """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        default_triggers = [
            {
                'id': 'happy_sticker_response',
                'name': '–û—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä',
                'trigger_type': 'emotion',
                'trigger_pattern': '—Ä–∞–¥–æ—Å—Ç—å',
                'media_type': 'emoji',
                'media_content': 'üòä|üéâ|üëç|‚ù§Ô∏è',
                'probability': 0.8
            },
            {
                'id': 'sad_sticker_support',
                'name': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≥—Ä—É—Å—Ç–∏',
                'trigger_type': 'emotion', 
                'trigger_pattern': '–≥—Ä—É—Å—Ç—å',
                'media_type': 'emoji',
                'media_content': 'ü§ó|üí™|üòä|‚ù§Ô∏è',
                'probability': 0.9
            },
            {
                'id': 'hello_gif_response',
                'name': 'GIF –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
                'trigger_type': 'keyword',
                'trigger_pattern': '–ø—Ä–∏–≤–µ—Ç|–¥–∞—Ä–æ–≤–∞|–∑–¥—Ä–∞–≤',
                'media_type': 'gif',
                'media_content': '–ø—Ä–∏–≤–µ—Ç',
                'probability': 0.3,
                'cooldown': 300  # 5 –º–∏–Ω—É—Ç
            },
            {
                'id': 'laugh_reaction',
                'name': '–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–º–µ—Ö',
                'trigger_type': 'emotion',
                'trigger_pattern': '—Å–º–µ—Ö',
                'media_type': 'gif',
                'media_content': '—Å–º–µ—Ö',
                'probability': 0.6
            },
            {
                'id': 'thanks_audio',
                'name': '–ê—É–¥–∏–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                'trigger_type': 'keyword',
                'trigger_pattern': '—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä|—Å–µ–Ω–∫',
                'media_type': 'audio',
                'media_content': '—Å–ø–∞—Å–∏–±–æ',
                'probability': 0.4
            },
            {
                'id': 'question_thinking',
                'name': '–î—É–º–∞—é—â–∏–π —Å–º–∞–π–ª–∏–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
                'trigger_type': 'keyword',
                'trigger_pattern': '\\?',
                'media_type': 'emoji',
                'media_content': 'ü§î|üí≠|üßê',
                'probability': 0.2
            }
        ]
        
        for trigger_data in default_triggers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
            existing = await self.db.fetch_one(
                "SELECT id FROM media_triggers WHERE id = ?",
                (trigger_data['id'],)
            )
            
            if not existing:
                await self._save_media_trigger(trigger_data)
    
    async def _save_media_trigger(self, trigger_data: Dict):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            await self.db.execute("""
                INSERT INTO media_triggers 
                (id, name, description, trigger_type, trigger_pattern, media_type, 
                 media_content, probability, cooldown, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                trigger_data['id'],
                trigger_data['name'],
                trigger_data.get('description', ''),
                trigger_data['trigger_type'],
                trigger_data['trigger_pattern'],
                trigger_data['media_type'],
                trigger_data['media_content'],
                trigger_data.get('probability', 1.0),
                trigger_data.get('cooldown', 0.0),
                True
            ))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
    
    async def process_sticker(self, sticker, user_id: int, chat_id: int, context: Dict = None) -> List[Dict]:
        """üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞"""
        responses = []
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–∞
            sticker_emoji = sticker.emoji if hasattr(sticker, 'emoji') and sticker.emoji else 'üôÇ'
            emotion, confidence = self.sticker_analyzer.analyze_sticker_emotion(sticker_emoji)
            
            logger.info(f"üé≠ –°—Ç–∏–∫–µ—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: —ç–º–æ—Ü–∏—è={emotion}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence}")
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            media_triggers = await self.db.fetch_all("""
                SELECT * FROM media_triggers 
                WHERE is_active = TRUE AND (trigger_type = 'emotion' OR trigger_type = 'sticker')
                ORDER BY probability DESC
            """)
            
            for trigger in media_triggers:
                should_respond = False
                
                if trigger['trigger_type'] == 'emotion':
                    should_respond = (emotion == trigger['trigger_pattern'] and 
                                    confidence >= 0.5)
                elif trigger['trigger_type'] == 'sticker':
                    should_respond = sticker_emoji in trigger['trigger_pattern']
                
                if should_respond and random.random() < trigger['probability']:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç
                    media_response = await self._generate_media_response(
                        trigger['media_type'], 
                        trigger['media_content'],
                        emotion,
                        context
                    )
                    
                    if media_response:
                        responses.append(media_response)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        await self._update_trigger_stats(trigger['id'])
                        
                        # –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                        if trigger['probability'] > 0.7:
                            break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            if not responses and random.random() < 0.3:  # 30% —à–∞–Ω—Å
                response_emoji = self.sticker_analyzer.get_response_sticker(emotion)
                if response_emoji:
                    responses.append({
                        'type': 'emoji',
                        'content': response_emoji
                    })
            
            return responses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            return []
    
    async def process_text_for_media(self, message: str, emotion: str, context: Dict) -> List[Dict]:
        """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        responses = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            media_triggers = await self.db.fetch_all("""
                SELECT * FROM media_triggers 
                WHERE is_active = TRUE 
                ORDER BY probability DESC
            """)
            
            message_lower = message.lower()
            
            for trigger in media_triggers:
                should_respond = False
                
                if trigger['trigger_type'] == 'keyword':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    pattern = trigger['trigger_pattern']
                    if '|' in pattern:
                        keywords = pattern.split('|')
                        should_respond = any(keyword in message_lower for keyword in keywords)
                    else:
                        should_respond = re.search(pattern, message_lower) is not None
                
                elif trigger['trigger_type'] == 'emotion':
                    should_respond = emotion == trigger['trigger_pattern']
                
                elif trigger['trigger_type'] == 'context':
                    context_value = context.get('topic', 'general')
                    should_respond = context_value == trigger['trigger_pattern']
                
                if should_respond and random.random() < trigger['probability']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                    if await self._check_trigger_cooldown(trigger['id'], context.get('chat_id')):
                        media_response = await self._generate_media_response(
                            trigger['media_type'],
                            trigger['media_content'],
                            emotion,
                            context
                        )
                        
                        if media_response:
                            responses.append(media_response)
                            await self._update_trigger_stats(trigger['id'])
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
                            await self._set_trigger_cooldown(trigger['id'], context.get('chat_id'), trigger['cooldown'])
                            
                            break  # –û–¥–∏–Ω –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç –∑–∞ —Ä–∞–∑
            
            return responses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return []
    
    async def _generate_media_response(self, media_type: str, content: str, emotion: str, context: Dict) -> Optional[Dict]:
        """üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç–∞"""
        
        try:
            if media_type == 'emoji':
                # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if '|' in content:
                    emojis = content.split('|')
                    selected_emoji = random.choice(emojis)
                else:
                    selected_emoji = content
                
                return {
                    'type': 'emoji',
                    'content': selected_emoji
                }
            
            elif media_type == 'sticker':
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ —ç–º–æ—Ü–∏–∏
                sticker_id = self.sticker_analyzer.get_response_sticker(emotion)
                if sticker_id:
                    return {
                        'type': 'sticker',
                        'content': sticker_id
                    }
            
            elif media_type == 'gif':
                # –ü–æ–ª—É—á–∞–µ–º GIF
                if content in self.gif_manager.gif_collections:
                    gif_id = random.choice(self.gif_manager.gif_collections[content])
                    return {
                        'type': 'animation',  # Telegram —Ç–∏–ø –¥–ª—è GIF
                        'content': gif_id
                    }
                else:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ —ç–º–æ—Ü–∏–∏
                    gif_id = self.gif_manager.get_gif_by_emotion(emotion)
                    if gif_id:
                        return {
                            'type': 'animation',
                            'content': gif_id
                        }
            
            elif media_type == 'audio':
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ
                if content in self.audio_manager.audio_clips:
                    audio_id = random.choice(self.audio_manager.audio_clips[content])
                    return {
                        'type': 'voice',
                        'content': audio_id
                    }
                else:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ —ç–º–æ—Ü–∏–∏
                    audio_id = self.audio_manager.get_audio_by_emotion(emotion)
                    if audio_id:
                        return {
                            'type': 'voice',
                            'content': audio_id
                        }
            
            elif media_type == 'voice':
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_id = await self.audio_manager.generate_tts_audio(content, emotion)
                if voice_id:
                    return {
                        'type': 'voice',
                        'content': voice_id
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    async def _check_trigger_cooldown(self, trigger_id: str, chat_id: int) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            cooldown_key = f"{trigger_id}_{chat_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –ë–î –∏–ª–∏ –∫–µ—à–∞
            last_used = await self.db.fetch_one("""
                SELECT MAX(created_at) as last_used FROM media_triggers 
                WHERE id = ?
            """, (trigger_id,))
            
            if last_used and last_used['last_used']:
                last_time = datetime.fromisoformat(last_used['last_used'])
                cooldown_seconds = 300  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
                
                if (datetime.now() - last_time).total_seconds() < cooldown_seconds:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞: {e}")
            return True
    
    async def _set_trigger_cooldown(self, trigger_id: str, chat_id: int, cooldown: float):
        """üïê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∫—É–ª–¥–∞—É–Ω–æ–≤
        pass
    
    async def _update_trigger_stats(self, trigger_id: str):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            await self.db.execute("""
                UPDATE media_triggers 
                SET usage_count = usage_count + 1
                WHERE id = ?
            """, (trigger_id,))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def add_custom_media(self, media_type: str, content: str, tags: List[str], 
                              emotion: str = "neutral", context: str = "general") -> bool:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–¥–∏–∞"""
        try:
            await self.db.execute("""
                INSERT INTO media_content 
                (type, content, tags, emotion, context)
                VALUES (?, ?, ?, ?, ?)
            """, (media_type, content, json.dumps(tags), emotion, context))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            media_content = MediaContent(
                type=media_type,
                content=content,
                tags=tags,
                emotion=emotion,
                context=context
            )
            
            if media_type not in self.media_collections:
                self.media_collections[media_type] = {}
            
            self.media_collections[media_type][content] = media_content
            
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: {media_type} - {emotion}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
            return False
    
    async def get_media_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–µ–¥–∏–∞
            media_stats = await self.db.fetch_all("""
                SELECT type, COUNT(*) as count, AVG(success_rate) as avg_success
                FROM media_content
                GROUP BY type
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            trigger_stats = await self.db.fetch_all("""
                SELECT media_type, COUNT(*) as count, SUM(usage_count) as total_usage
                FROM media_triggers
                WHERE is_active = TRUE
                GROUP BY media_type
            """)
            
            return {
                'media_content': [dict(row) for row in media_stats],
                'triggers': [dict(row) for row in trigger_stats],
                'total_media': sum(row['count'] for row in media_stats),
                'total_triggers': len(trigger_stats)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    async def send_media_response(self, chat_id: int, media_response: Dict):
        """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            media_type = media_response['type']
            content = media_response['content']
            
            if media_type == 'emoji':
                await self.bot.send_message(chat_id, content)
            
            elif media_type == 'sticker':
                await self.bot.send_sticker(chat_id, content)
            
            elif media_type == 'animation':  # GIF
                await self.bot.send_animation(chat_id, content)
            
            elif media_type == 'voice':
                await self.bot.send_voice(chat_id, content)
            
            elif media_type == 'audio':
                await self.bot.send_audio(chat_id, content)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "MediaTriggersModule",
    "StickerAnalyzer", 
    "GifManager",
    "AudioManager",
    "MediaContent",
    "MediaTriggerAction"
]