#!/usr/bin/env python3
"""
‚ö° ADVANCED TRIGGERS v3.1 - –£–õ–£–ß–®–ï–ù–ù–´–ï –¢–†–ò–ì–ì–ï–†–´
üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
"""

import logging
import asyncio
import random
import re
import json
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
import aiofiles

logger = logging.getLogger(__name__)


@dataclass
class TriggerAction:
    """üé¨ –î–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    type: str  # text, emoji, sticker, gif, audio, chain
    content: str
    probability: float = 1.0
    delay: float = 0.0
    context_filters: List[str] = field(default_factory=list)
    success_count: int = 0
    total_attempts: int = 0


@dataclass
class CustomTrigger:
    """üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä"""
    id: str
    name: str
    description: str
    trigger_type: str  # keyword, emotion, time, context, regex, user_specific
    trigger_pattern: str
    actions: List[TriggerAction]
    probability: float = 1.0
    cooldown: float = 0.0
    allowed_chats: List[int] = field(default_factory=list)
    allowed_users: List[int] = field(default_factory=list)
    is_active: bool = True
    created_by: int = 0
    created_at: datetime = field(default_factory=datetime.now)
    usage_count: int = 0
    success_rate: float = 0.0
    last_used: Optional[datetime] = None


class TriggerStats:
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.daily_stats = {}
        self.user_stats = {}
        self.chat_stats = {}
        self.trigger_performance = {}
    
    def record_trigger_use(self, trigger_id: str, user_id: int, chat_id: int, success: bool):
        """üìà –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        today = datetime.now().date().isoformat()
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if today not in self.daily_stats:
            self.daily_stats[today] = {'total': 0, 'successful': 0, 'triggers': {}}
        
        self.daily_stats[today]['total'] += 1
        if success:
            self.daily_stats[today]['successful'] += 1
        
        if trigger_id not in self.daily_stats[today]['triggers']:
            self.daily_stats[today]['triggers'][trigger_id] = {'total': 0, 'successful': 0}
        
        self.daily_stats[today]['triggers'][trigger_id]['total'] += 1
        if success:
            self.daily_stats[today]['triggers'][trigger_id]['successful'] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {'triggers_activated': 0, 'successful_activations': 0}
        
        self.user_stats[user_id]['triggers_activated'] += 1
        if success:
            self.user_stats[user_id]['successful_activations'] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        if chat_id not in self.chat_stats:
            self.chat_stats[chat_id] = {'triggers_activated': 0, 'successful_activations': 0}
        
        self.chat_stats[chat_id]['triggers_activated'] += 1
        if success:
            self.chat_stats[chat_id]['successful_activations'] += 1


class AdvancedTriggersModule:
    """‚ö° –ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    def __init__(self, db_service, config, ai_service=None):
        self.db = db_service
        self.config = config
        self.ai = ai_service
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞
        self.custom_triggers = {}
        self.trigger_cooldowns = {}
        self.stats = TriggerStats()
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        self.default_triggers = []
        
        logger.info("‚ö° –ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        await self._create_triggers_tables()
        await self._load_custom_triggers()
        await self._setup_default_triggers()
        logger.info("‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    async def _create_triggers_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        tables = [
            """
            CREATE TABLE IF NOT EXISTS custom_triggers (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                trigger_type TEXT NOT NULL,
                trigger_pattern TEXT NOT NULL,
                actions TEXT NOT NULL,  -- JSON
                probability REAL DEFAULT 1.0,
                cooldown REAL DEFAULT 0.0,
                allowed_chats TEXT,  -- JSON
                allowed_users TEXT,  -- JSON
                is_active BOOLEAN DEFAULT TRUE,
                created_by INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                usage_count INTEGER DEFAULT 0,
                success_rate REAL DEFAULT 0.0,
                last_used DATETIME
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS trigger_usage_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                trigger_id TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                message_text TEXT,
                success BOOLEAN DEFAULT FALSE,
                response_text TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (trigger_id) REFERENCES custom_triggers (id)
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS trigger_stats_daily (
                date DATE PRIMARY KEY,
                total_activations INTEGER DEFAULT 0,
                successful_activations INTEGER DEFAULT 0,
                unique_users INTEGER DEFAULT 0,
                unique_chats INTEGER DEFAULT 0,
                stats_data TEXT  -- JSON
            )
            """
        ]
        
        for table_sql in tables:
            await self.db.execute(table_sql)
    
    async def _load_custom_triggers(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        try:
            triggers_data = await self.db.fetch_all("SELECT * FROM custom_triggers WHERE is_active = TRUE")
            
            for trigger_row in triggers_data:
                # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ JSON
                actions_json = json.loads(trigger_row['actions'])
                actions = []
                
                for action_data in actions_json:
                    action = TriggerAction(
                        type=action_data['type'],
                        content=action_data['content'],
                        probability=action_data.get('probability', 1.0),
                        delay=action_data.get('delay', 0.0),
                        context_filters=action_data.get('context_filters', []),
                        success_count=action_data.get('success_count', 0),
                        total_attempts=action_data.get('total_attempts', 0)
                    )
                    actions.append(action)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
                trigger = CustomTrigger(
                    id=trigger_row['id'],
                    name=trigger_row['name'],
                    description=trigger_row['description'] or '',
                    trigger_type=trigger_row['trigger_type'],
                    trigger_pattern=trigger_row['trigger_pattern'],
                    actions=actions,
                    probability=trigger_row['probability'],
                    cooldown=trigger_row['cooldown'],
                    allowed_chats=json.loads(trigger_row['allowed_chats'] or '[]'),
                    allowed_users=json.loads(trigger_row['allowed_users'] or '[]'),
                    is_active=trigger_row['is_active'],
                    created_by=trigger_row['created_by'],
                    created_at=datetime.fromisoformat(trigger_row['created_at']) if trigger_row['created_at'] else datetime.now(),
                    usage_count=trigger_row['usage_count'],
                    success_rate=trigger_row['success_rate'],
                    last_used=datetime.fromisoformat(trigger_row['last_used']) if trigger_row['last_used'] else None
                )
                
                self.custom_triggers[trigger.id] = trigger
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.custom_triggers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
    
    async def _setup_default_triggers(self):
        """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        default_triggers_data = [
            {
                'id': 'greeting_morning',
                'name': '–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
                'trigger_type': 'time_keyword',
                'trigger_pattern': '—É—Ç—Ä|morning',
                'actions': [{'type': 'text', 'content': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?'}],
                'probability': 0.7
            },
            {
                'id': 'help_request',
                'name': '–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏',
                'trigger_type': 'keyword',
                'trigger_pattern': '–ø–æ–º–æ–≥–∏|–ø–æ–º–æ—â—å|help',
                'actions': [{'type': 'text', 'content': '–ü–æ–º–æ–≥—É! üí™ –í —á–µ–º –¥–µ–ª–æ?'}],
                'probability': 0.9
            },
            {
                'id': 'programming_topic',
                'name': '–¢–µ–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                'trigger_type': 'keyword',
                'trigger_pattern': '–ø—Ä–æ–≥—Ä–∞–º–º|–∫–æ–¥|python|javascript',
                'actions': [{'type': 'text', 'content': '–ü—Ä–æ–≥—Ä–∞–º–º–∏–Ω–≥! üë®‚Äçüíª –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã?'}],
                'probability': 0.6
            },
            {
                'id': 'goodbye',
                'name': '–ü—Ä–æ—â–∞–Ω–∏–µ',
                'trigger_type': 'keyword',
                'trigger_pattern': '–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|bye|—É–≤–∏–¥–∏–º—Å—è',
                'actions': [{'type': 'text', 'content': '–ü–æ–∫–∞! üëã –ó–∞—Ö–æ–¥–∏ –µ—â–µ!'}],
                'probability': 0.8
            },
            {
                'id': 'thanks_response',
                'name': '–û—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                'trigger_type': 'keyword',
                'trigger_pattern': '—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä|thanks|thx',
                'actions': [{'type': 'text', 'content': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!'}],
                'probability': 0.9
            },
            {
                'id': 'sad_emotion',
                'name': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≥—Ä—É—Å—Ç–∏',
                'trigger_type': 'emotion',
                'trigger_pattern': '–≥—Ä—É—Å—Ç–Ω|–ø–µ—á–∞–ª—å–Ω|—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω|–ø–ª–æ—Ö–æ',
                'actions': [{'type': 'text', 'content': '–ù–µ –≥—Ä—É—Å—Ç–∏! ü§ó –í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ'}],
                'probability': 0.8
            },
            {
                'id': 'excited_emotion',
                'name': '–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä–∞–¥–æ—Å—Ç—å',
                'trigger_type': 'emotion',
                'trigger_pattern': '–∫—Ä—É—Ç–æ|—Å—É–ø–µ—Ä|–æ—Ç–ª–∏—á–Ω–æ|—É—Ä–∞|üéâ',
                'actions': [{'type': 'text', 'content': '–î–∞! üéâ –ö–ª–∞—Å—Å–Ω–æ!'}],
                'probability': 0.7
            },
            {
                'id': 'question_mark',
                'name': '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
                'trigger_type': 'regex',
                'trigger_pattern': r'\?$',
                'actions': [{'type': 'text', 'content': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î'}],
                'probability': 0.3
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for trigger_data in default_triggers_data:
            if trigger_data['id'] not in self.custom_triggers:
                await self.create_custom_trigger(trigger_data)
        
        logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(default_triggers_data)} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    async def create_custom_trigger(self, trigger_data: Dict) -> bool:
        """‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if 'id' not in trigger_data:
                trigger_data['id'] = f"custom_{uuid.uuid4().hex[:8]}"
            
            # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏—è
            actions = []
            for action_data in trigger_data.get('actions', []):
                action = TriggerAction(
                    type=action_data['type'],
                    content=action_data['content'],
                    probability=action_data.get('probability', 1.0),
                    delay=action_data.get('delay', 0.0),
                    context_filters=action_data.get('context_filters', [])
                )
                actions.append(action)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            trigger = CustomTrigger(
                id=trigger_data['id'],
                name=trigger_data['name'],
                description=trigger_data.get('description', ''),
                trigger_type=trigger_data['trigger_type'],
                trigger_pattern=trigger_data['trigger_pattern'],
                actions=actions,
                probability=trigger_data.get('probability', 1.0),
                cooldown=trigger_data.get('cooldown', 0.0),
                allowed_chats=trigger_data.get('allowed_chats', []),
                allowed_users=trigger_data.get('allowed_users', []),
                created_by=trigger_data.get('created_by', 0)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            actions_json = json.dumps([
                {
                    'type': action.type,
                    'content': action.content,
                    'probability': action.probability,
                    'delay': action.delay,
                    'context_filters': action.context_filters,
                    'success_count': action.success_count,
                    'total_attempts': action.total_attempts
                }
                for action in actions
            ])
            
            await self.db.execute("""
                INSERT OR REPLACE INTO custom_triggers 
                (id, name, description, trigger_type, trigger_pattern, actions, 
                 probability, cooldown, allowed_chats, allowed_users, is_active, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                trigger.id,
                trigger.name,
                trigger.description,
                trigger.trigger_type,
                trigger.trigger_pattern,
                actions_json,
                trigger.probability,
                trigger.cooldown,
                json.dumps(trigger.allowed_chats),
                json.dumps(trigger.allowed_users),
                trigger.is_active,
                trigger.created_by
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.custom_triggers[trigger.id] = trigger
            
            logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {trigger.name} ({trigger.id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False
    
    async def process_message(self, message: str, user_id: int, chat_id: int, context: Dict) -> List[str]:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""
        responses = []
        
        try:
            message_lower = message.lower()
            
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            for trigger in self.custom_triggers.values():
                if not trigger.is_active:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if trigger.allowed_chats and chat_id not in trigger.allowed_chats:
                    continue
                
                if trigger.allowed_users and user_id not in trigger.allowed_users:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                cooldown_key = f"{trigger.id}_{chat_id}"
                if await self._check_cooldown(cooldown_key, trigger.cooldown):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—É
                if await self._matches_trigger(message, message_lower, trigger):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    if random.random() < trigger.probability:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
                        trigger_responses = await self._execute_trigger_actions(trigger, message, context)
                        responses.extend(trigger_responses)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        await self._update_trigger_usage(trigger.id, user_id, chat_id, message, True)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
                        await self._set_cooldown(cooldown_key, trigger.cooldown)
                        
                        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        if trigger.probability > 0.8:
                            break
            
            return responses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return []
    
    async def _matches_trigger(self, message: str, message_lower: str, trigger: CustomTrigger) -> bool:
        """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        
        pattern = trigger.trigger_pattern.lower()
        
        if trigger.trigger_type == 'keyword':
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ |)
            keywords = pattern.split('|')
            return any(keyword.strip() in message_lower for keyword in keywords)
        
        elif trigger.trigger_type == 'regex':
            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            try:
                return bool(re.search(pattern, message, re.IGNORECASE))
            except re.error:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ {trigger.id}: {pattern}")
                return False
        
        elif trigger.trigger_type == 'emotion':
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            emotion_keywords = pattern.split('|')
            return any(keyword.strip() in message_lower for keyword in emotion_keywords)
        
        elif trigger.trigger_type == 'time_keyword':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ + –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            hour = datetime.now().hour
            keywords = pattern.split('|')
            
            # –£—Ç—Ä–æ (5-12)
            if 5 <= hour < 12 and any('—É—Ç—Ä' in keyword or 'morning' in keyword for keyword in keywords):
                return any(keyword.strip() in message_lower for keyword in keywords)
            
            # –î–µ–Ω—å (12-18)
            if 12 <= hour < 18 and any('–¥–µ–Ω—å' in keyword or 'day' in keyword for keyword in keywords):
                return any(keyword.strip() in message_lower for keyword in keywords)
            
            # –í–µ—á–µ—Ä (18-22)
            if 18 <= hour < 22 and any('–≤–µ—á–µ—Ä' in keyword or 'evening' in keyword for keyword in keywords):
                return any(keyword.strip() in message_lower for keyword in keywords)
            
            # –ù–æ—á—å (22-5)
            if hour >= 22 or hour < 5 and any('–Ω–æ—á' in keyword or 'night' in keyword for keyword in keywords):
                return any(keyword.strip() in message_lower for keyword in keywords)
            
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            return any(keyword.strip() in message_lower for keyword in keywords)
        
        return False
    
    async def _execute_trigger_actions(self, trigger: CustomTrigger, message: str, context: Dict) -> List[str]:
        """üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        responses = []
        
        for action in trigger.actions:
            if random.random() < action.probability:
                if action.delay > 0:
                    await asyncio.sleep(action.delay)
                
                if action.type == 'text':
                    responses.append(action.content)
                
                elif action.type == 'emoji':
                    responses.append(action.content)
                
                # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                
                action.total_attempts += 1
                action.success_count += 1
        
        return responses
    
    async def _check_cooldown(self, cooldown_key: str, cooldown_seconds: float) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        if cooldown_seconds <= 0:
            return False
        
        if cooldown_key in self.trigger_cooldowns:
            last_used = self.trigger_cooldowns[cooldown_key]
            if datetime.now() - last_used < timedelta(seconds=cooldown_seconds):
                return True
        
        return False
    
    async def _set_cooldown(self, cooldown_key: str, cooldown_seconds: float):
        """üïê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        if cooldown_seconds > 0:
            self.trigger_cooldowns[cooldown_key] = datetime.now()
    
    async def _update_trigger_usage(self, trigger_id: str, user_id: int, chat_id: int, message: str, success: bool):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.execute("""
                UPDATE custom_triggers 
                SET usage_count = usage_count + 1, last_used = ?
                WHERE id = ?
            """, (datetime.now().isoformat(), trigger_id))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            await self.db.execute("""
                INSERT INTO trigger_usage_log 
                (trigger_id, user_id, chat_id, message_text, success)
                VALUES (?, ?, ?, ?, ?)
            """, (trigger_id, user_id, chat_id, message[:200], success))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.record_trigger_use(trigger_id, user_id, chat_id, success)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            if trigger_id in self.custom_triggers:
                self.custom_triggers[trigger_id].usage_count += 1
                self.custom_triggers[trigger_id].last_used = datetime.now()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
    
    async def get_triggers_stats(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        try:
            total_triggers = len(self.custom_triggers)
            active_triggers = len([t for t in self.custom_triggers.values() if t.is_active])
            total_usage = sum(t.usage_count for t in self.custom_triggers.values())
            
            # –¢–æ–ø —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            top_triggers = sorted(
                self.custom_triggers.values(),
                key=lambda x: x.usage_count,
                reverse=True
            )[:10]
            
            # –°—Ä–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö
            total_attempts = sum(
                sum(action.total_attempts for action in trigger.actions)
                for trigger in self.custom_triggers.values()
            )
            
            total_successes = sum(
                sum(action.success_count for action in trigger.actions)
                for trigger in self.custom_triggers.values()
            )
            
            avg_success_rate = total_successes / total_attempts if total_attempts > 0 else 0
            
            return {
                'total_triggers': total_triggers,
                'active_triggers': active_triggers,
                'total_usage': total_usage,
                'average_success_rate': avg_success_rate,
                'top_triggers': [
                    {
                        'name': trigger.name,
                        'usage_count': trigger.usage_count,
                        'success_rate': trigger.success_rate,
                        'created_by': trigger.created_by
                    }
                    for trigger in top_triggers
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def delete_trigger(self, trigger_id: str, user_id: int) -> bool:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        try:
            if trigger_id not in self.custom_triggers:
                return False
            
            trigger = self.custom_triggers[trigger_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å)
            if trigger.created_by != user_id and user_id not in self.config.bot.admin_ids:
                return False
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            await self.db.execute("UPDATE custom_triggers SET is_active = FALSE WHERE id = ?", (trigger_id,))
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            del self.custom_triggers[trigger_id]
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {trigger.name} ({trigger_id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "AdvancedTriggersModule",
    "CustomTrigger",
    "TriggerAction",
    "TriggerStats"
]