#!/usr/bin/env python3
"""
üìà CHARTS MODULE v2.0
–ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from typing import Dict, Any, List
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from pathlib import Path

logger = logging.getLogger(__name__)


class ChartsModule:
    """üìà –ú–æ–¥—É–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    
    def __init__(self, db_service):
        self.db = db_service
        self.charts_dir = Path('data/charts')
        self.charts_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = 'DejaVu Sans'
        plt.rcParams['axes.unicode_minus'] = False
        
        logger.info("üìà Charts Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_activity_chart(self, user_id: int) -> str:
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            dates = []
            activity = []
            
            for i in range(7):
                date = datetime.now() - timedelta(days=i)
                dates.append(date)
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                activity.append(max(0, 10 + i * 2 + (i % 3) * 5))
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(dates, activity, marker='o', linewidth=2, markersize=6)
            ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}', fontsize=14, pad=20)
            ax.set_xlabel('–î–∞—Ç–∞')
            ax.set_ylabel('–°–æ–æ–±—â–µ–Ω–∏–π')
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_filename = f"activity_{user_id}_{int(datetime.now().timestamp())}.png"
            chart_path = self.charts_dir / chart_filename
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return str(chart_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return ""
    
    async def create_emotions_chart(self, user_id: int) -> str:
        """üòä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —ç–º–æ—Ü–∏–π"""
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–π
            emotions = ['–†–∞–¥–æ—Å—Ç—å', '–ì—Ä—É—Å—Ç—å', '–£–¥–∏–≤–ª–µ–Ω–∏–µ', '–ì–Ω–µ–≤', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ']
            counts = [45, 12, 18, 8, 35]
            colors = ['#FFD700', '#87CEEB', '#FF69B4', '#FF4500', '#808080']
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(8, 8))
            wedges, texts, autotexts = ax.pie(counts, labels=emotions, colors=colors, 
                                            autopct='%1.1f%%', startangle=90)
            
            ax.set_title(f'–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}', 
                        fontsize=14, pad=20)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_filename = f"emotions_{user_id}_{int(datetime.now().timestamp())}.png"
            chart_path = self.charts_dir / chart_filename
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return str(chart_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —ç–º–æ—Ü–∏–π: {e}")
            return ""
    
    async def create_crypto_chart(self, coin_name: str, price_data: List[float]) -> str:
        """‚Çø –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        
        try:
            if not price_data:
                return ""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            timestamps = []
            for i in range(len(price_data)):
                timestamp = datetime.now() - timedelta(hours=len(price_data)-i-1)
                timestamps.append(timestamp)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(timestamps, price_data, linewidth=2, color='#F7931A')
            ax.fill_between(timestamps, price_data, alpha=0.3, color='#F7931A')
            
            ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {coin_name.upper()}', fontsize=14, pad=20)
            ax.set_xlabel('–í—Ä–µ–º—è')
            ax.set_ylabel('–¶–µ–Ω–∞ (USD)')
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_filename = f"crypto_{coin_name}_{int(datetime.now().timestamp())}.png"
            chart_path = self.charts_dir / chart_filename
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return str(chart_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return ""
    
    def cleanup_old_charts(self, max_age_hours: int = 24):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        
        try:
            current_time = datetime.now()
            removed_count = 0
            
            for chart_file in self.charts_dir.glob("*.png"):
                file_time = datetime.fromtimestamp(chart_file.stat().st_mtime)
                if current_time - file_time > timedelta(hours=max_age_hours):
                    chart_file.unlink()
                    removed_count += 1
            
            if removed_count > 0:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")


__all__ = ["ChartsModule"]