#!/usr/bin/env python3
"""
üß† MEMORY MODULE v2.0
üí≠ –ú–æ–¥—É–ª—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤

–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple

logger = logging.getLogger(__name__)


class MemoryModule:
    """üß† –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, db_service):
        self.db = db_service
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏
        self.memory_config = {
            'max_interactions_per_user': 50,
            'context_window_messages': 10,
            'summary_threshold': 20,
            'cleanup_days': 30
        }
        
        # –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.context_cache = {}
        
        logger.info("üß† Memory Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def add_interaction(self, user_id: int, chat_id: int, user_message: str, 
                             bot_response: str, metadata: Dict = None) -> bool:
        """üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–∞–º—è—Ç—å"""
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            interaction_metadata = {
                'timestamp': datetime.now().isoformat(),
                'message_length': len(user_message),
                'response_length': len(bot_response),
                'has_entities': self._extract_entities(user_message),
                'topic_keywords': self._extract_keywords(user_message),
                **(metadata or {})
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self.db.add_memory(
                user_id, chat_id, user_message, bot_response,
                json.dumps(interaction_metadata)
            )
            
            if success:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cache_key = f"{user_id}_{chat_id}"
                if cache_key in self.context_cache:
                    del self.context_cache[cache_key]
                
                logger.debug(f"üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            return False
    
    async def get_context(self, user_id: int, chat_id: int) -> Dict[str, Any]:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        try:
            cache_key = f"{user_id}_{chat_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self.context_cache:
                cached_context = self.context_cache[cache_key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –∫—ç—à–∞ (15 –º–∏–Ω—É—Ç)
                cache_time = datetime.fromisoformat(cached_context.get('cached_at'))
                if datetime.now() - cache_time < timedelta(minutes=15):
                    return cached_context
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –∏–∑ –ë–î
            memory_items = await self.db.get_memory(
                user_id, chat_id, self.memory_config['context_window_messages']
            )
            
            if not memory_items:
                return {'has_context': False}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self._analyze_conversation_context(
                user_id, chat_id, memory_items
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∫—ç—à–∞
            context['cached_at'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.context_cache[cache_key] = context
            
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {'has_context': False, 'error': str(e)}
    
    async def _analyze_conversation_context(self, user_id: int, chat_id: int, 
                                          memory_items: List[str]) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        try:
            if not memory_items:
                return {'has_context': False}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –±–æ—Ç–æ–≤—Å–∫–∏–µ
            user_messages = []
            bot_messages = []
            
            for i, item in enumerate(memory_items):
                if i % 2 == 0:  # –ß–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    if item.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "):
                        user_messages.append(item[14:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                else:  # –ù–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –±–æ—Ç
                    if item.startswith("–ë–æ—Ç: "):
                        bot_messages.append(item[5:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            topics = self._extract_conversation_topics(user_messages)
            preferences = self._extract_user_preferences(user_messages, bot_messages)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            communication_style = self._analyze_communication_style(user_messages)
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∏–∞–ª–æ–≥–∞
            conversation_summary = self._generate_conversation_summary(
                user_messages, bot_messages, topics
            )
            
            context = {
                'has_context': True,
                'user_id': user_id,
                'chat_id': chat_id,
                'memory': memory_items,
                'conversation_summary': conversation_summary,
                'main_topics': topics[:5],  # –¢–æ–ø-5 —Ç–µ–º
                'user_preferences': preferences,
                'communication_style': communication_style,
                'total_interactions': len(memory_items) // 2,
                'analysis_timestamp': datetime.now().isoformat()
            }
            
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return {
                'has_context': True,
                'memory': memory_items,
                'error': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
            }
    
    def _extract_entities(self, text: str) -> Dict[str, List[str]]:
        """üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        
        try:
            entities = {
                'urls': [],
                'mentions': [],
                'hashtags': [],
                'numbers': [],
                'dates': []
            }
            
            words = text.split()
            
            for word in words:
                # URLs
                if word.startswith(('http://', 'https://', 'www.')):
                    entities['urls'].append(word)
                
                # Mentions
                elif word.startswith('@'):
                    entities['mentions'].append(word)
                
                # Hashtags  
                elif word.startswith('#'):
                    entities['hashtags'].append(word)
                
                # Numbers
                elif word.isdigit():
                    entities['numbers'].append(word)
            
            return entities
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
            return {}
    
    def _extract_keywords(self, text: str) -> List[str]:
        """üîë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π NLP –∞–Ω–∞–ª–∏–∑
            
            stop_words = {
                '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ',
                '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '–Ω–æ', '–∞', '–¥–∞', '–Ω–µ—Ç', '–Ω–µ', '–∏–ª–∏', '–∂–µ'
            }
            
            words = text.lower().split()
            keywords = []
            
            for word in words:
                # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                clean_word = ''.join(c for c in word if c.isalnum())
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                if (len(clean_word) > 2 and 
                    clean_word not in stop_words and
                    clean_word.isalpha()):
                    keywords.append(clean_word)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            return list(set(keywords))[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            return []
    
    def _extract_conversation_topics(self, user_messages: List[str]) -> List[str]:
        """üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞"""
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_keywords = []
            
            for message in user_messages:
                keywords = self._extract_keywords(message)
                all_keywords.extend(keywords)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            from collections import Counter
            keyword_counts = Counter(all_keywords)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
            topics = [word for word, count in keyword_counts.most_common(10)]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            grouped_topics = self._group_related_topics(topics)
            
            return grouped_topics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞: {e}")
            return []
    
    def _group_related_topics(self, topics: List[str]) -> List[str]:
        """üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º
            topic_groups = {
                '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', 'python', 'javascript', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Å–∞–π—Ç'],
                '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': ['–±–∏—Ç–∫–æ–∏–Ω', 'ethereum', 'crypto', 'blockchain', '–º–∞–π–Ω–∏–Ω–≥'],
                '–æ–±—â–µ–Ω–∏–µ': ['–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ø–æ–º–æ—â—å', '–≤–æ–ø—Ä–æ—Å'],
                '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', 'deadline', '–≤—Å—Ç—Ä–µ—á–∞']
            }
            
            grouped = []
            used_topics = set()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–º—ã
            for group_name, group_keywords in topic_groups.items():
                group_topics = []
                for topic in topics:
                    if topic in group_keywords and topic not in used_topics:
                        group_topics.append(topic)
                        used_topics.add(topic)
                
                if group_topics:
                    grouped.append(group_name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            for topic in topics:
                if topic not in used_topics:
                    grouped.append(topic)
            
            return grouped[:8]  # –ú–∞–∫—Å–∏–º—É–º 8 —Ç–µ–º
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–µ–º: {e}")
            return topics[:8]
    
    def _extract_user_preferences(self, user_messages: List[str], 
                                 bot_messages: List[str]) -> Dict[str, Any]:
        """‚≠ê –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            preferences = {
                'likes': [],
                'dislikes': [],
                'interests': [],
                'communication_preferences': {
                    'prefers_detailed_answers': False,
                    'uses_emojis': False,
                    'asks_follow_up_questions': False
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            all_user_text = ' '.join(user_messages).lower()
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            positive_markers = ['–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ª—é–±–ª—é', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å']
            for marker in positive_markers:
                if marker in all_user_text:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –º–∞—Ä–∫–µ—Ä–∞
                    context = self._extract_context_around_word(all_user_text, marker)
                    if context:
                        preferences['likes'].append(context)
            
            # –ò—â–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            negative_markers = ['–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ –ª—é–±–ª—é']
            for marker in negative_markers:
                if marker in all_user_text:
                    context = self._extract_context_around_word(all_user_text, marker)
                    if context:
                        preferences['dislikes'].append(context)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            if len(all_user_text) / max(len(user_messages), 1) > 50:
                preferences['communication_preferences']['prefers_detailed_answers'] = True
            
            if any('üòä' in msg or 'üôÇ' in msg or 'üëç' in msg for msg in user_messages):
                preferences['communication_preferences']['uses_emojis'] = True
            
            if any('?' in msg for msg in user_messages):
                preferences['communication_preferences']['asks_follow_up_questions'] = True
            
            return preferences
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
            return {}
    
    def _extract_context_around_word(self, text: str, word: str, window: int = 3) -> str:
        """üìç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤–∞"""
        
        try:
            words = text.split()
            
            for i, w in enumerate(words):
                if word in w:
                    start = max(0, i - window)
                    end = min(len(words), i + window + 1)
                    context_words = words[start:end]
                    return ' '.join(context_words)
            
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    def _analyze_communication_style(self, user_messages: List[str]) -> Dict[str, Any]:
        """üó£Ô∏è –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        
        try:
            if not user_messages:
                return {'style': 'unknown'}
            
            total_length = sum(len(msg) for msg in user_messages)
            avg_length = total_length / len(user_messages)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            question_count = sum(1 for msg in user_messages if '?' in msg)
            exclamation_count = sum(1 for msg in user_messages if '!' in msg)
            emoji_count = sum(1 for msg in user_messages if any(ord(char) > 127 for char in msg))
            
            style = {
                'average_message_length': round(avg_length, 1),
                'questions_ratio': round(question_count / len(user_messages), 2),
                'exclamations_ratio': round(exclamation_count / len(user_messages), 2),
                'uses_emojis': emoji_count > 0,
                'style': 'neutral'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å
            if avg_length > 100:
                style['style'] = 'detailed'
            elif avg_length < 20:
                style['style'] = 'concise'
            
            if style['questions_ratio'] > 0.5:
                style['style'] = 'inquisitive'
            
            if style['exclamations_ratio'] > 0.3:
                style['style'] = 'enthusiastic'
            
            return style
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è: {e}")
            return {'style': 'unknown'}
    
    def _generate_conversation_summary(self, user_messages: List[str], 
                                     bot_messages: List[str], 
                                     topics: List[str]) -> str:
        """üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        
        try:
            if not user_messages:
                return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"
            
            summary_parts = []
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            interactions_count = len(user_messages)
            summary_parts.append(f"–î–∏–∞–ª–æ–≥ –∏–∑ {interactions_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
            if topics:
                main_topics = topics[:3]
                summary_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join(main_topics)}")
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä –¥–∏–∞–ª–æ–≥–∞
            avg_user_length = sum(len(msg) for msg in user_messages) / len(user_messages)
            if avg_user_length > 50:
                summary_parts.append("–ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è")
            else:
                summary_parts.append("–∫—Ä–∞—Ç–∫–æ–µ –æ–±—â–µ–Ω–∏–µ")
            
            return "; ".join(summary_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return "–ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    
    async def clear_user_memory(self, user_id: int, chat_id: int) -> bool:
        """üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã SQL –∑–∞–ø—Ä–æ—Å DELETE
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            cache_key = f"{user_id}_{chat_id}"
            if cache_key in self.context_cache:
                del self.context_cache[cache_key]
            
            logger.info(f"üóëÔ∏è –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    async def get_user_memory_stats(self, user_id: int, chat_id: int) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            context = await self.get_context(user_id, chat_id)
            
            if not context.get('has_context'):
                return {
                    'has_memory': False,
                    'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–∞–ª–æ–≥–µ'
                }
            
            return {
                'has_memory': True,
                'total_interactions': context.get('total_interactions', 0),
                'conversation_summary': context.get('conversation_summary', ''),
                'main_themes': context.get('main_topics', []),
                'communication_style': context.get('communication_style', {}),
                'memory_size': len(context.get('memory', []))
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {
                'has_memory': False,
                'error': str(e)
            }
    
    def get_module_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è"""
        
        return {
            'cached_contexts': len(self.context_cache),
            'config': self.memory_config,
            'module_status': 'active'
        }


__all__ = ["MemoryModule"]