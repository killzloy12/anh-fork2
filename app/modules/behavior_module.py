#!/usr/bin/env python3
"""
üåü BEHAVIOR MODULE v2.0
üé≠ –ú–æ–¥—É–ª—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –∏—Ö —Å—Ç–∏–ª—å
"""

import logging
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from collections import defaultdict, Counter

logger = logging.getLogger(__name__)


class BehaviorModule:
    """üåü –ú–æ–¥—É–ª—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    def __init__(self, db_service, ai_service):
        self.db = db_service
        self.ai = ai_service
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_profiles = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.behavior_patterns = {
            'communication_styles': {
                'formal': {'keywords': ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ', '–∏–∑–≤–∏–Ω–∏—Ç–µ'], 'score': 0},
                'casual': {'keywords': ['–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞', '–∫—Ä—É—Ç–æ'], 'score': 0},
                'technical': {'keywords': ['—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∫–æ–¥'], 'score': 0},
                'emotional': {'keywords': ['—á—É–≤—Å—Ç–≤—É—é', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '—Ä–∞–¥—É—é—Å—å'], 'score': 0}
            },
            'interaction_types': {
                'question_asker': {'pattern': 'high_question_ratio', 'threshold': 0.7},
                'helper_seeker': {'pattern': 'help_requests', 'threshold': 0.5},
                'information_consumer': {'pattern': 'long_responses_preference', 'threshold': 0.6},
                'experimenter': {'pattern': 'diverse_commands', 'threshold': 0.8}
            }
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        self.learning_config = {
            'min_interactions_for_profile': 5,
            'profile_update_frequency': 24,  # —á–∞—Å—ã
            'adaptation_strength': 0.3
        }
        
        logger.info("üåü Behavior Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def analyze_user_behavior(self, user_id: int, chat_id: int, 
                                   message: str, context: Dict = None) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await self._get_user_profile(user_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_analysis = self._analyze_message(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            updated_profile = self._update_profile(profile, message_analysis)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await self._save_user_profile(user_id, updated_profile)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            behavior_analysis = {
                'user_id': user_id,
                'user_type': updated_profile.get('user_type', 'regular_user'),
                'communication_style': updated_profile.get('communication_style', 'neutral'),
                'interaction_pattern': updated_profile.get('interaction_pattern', 'balanced'),
                'preferences': updated_profile.get('preferences', {}),
                'confidence_score': updated_profile.get('confidence_score', 0.5),
                'total_interactions': updated_profile.get('total_interactions', 0),
                'last_analysis': datetime.now().isoformat()
            }
            
            return behavior_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'user_type': 'unknown',
                'communication_style': 'neutral',
                'error': str(e)
            }
    
    async def adapt_response(self, user_id: int, base_response: str, 
                           behavior_analysis: Dict) -> str:
        """üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            user_type = behavior_analysis.get('user_type', 'regular_user')
            communication_style = behavior_analysis.get('communication_style', 'neutral')
            preferences = behavior_analysis.get('preferences', {})
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            adapted_response = base_response
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_type == 'technical_user':
                adapted_response = self._add_technical_details(adapted_response)
            elif user_type == 'casual_user':
                adapted_response = self._make_more_casual(adapted_response)
            elif user_type == 'helper_seeker':
                adapted_response = self._add_helpful_suggestions(adapted_response)
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è
            if communication_style == 'formal':
                adapted_response = self._make_more_formal(adapted_response)
            elif communication_style == 'emotional':
                adapted_response = self._add_emotional_support(adapted_response)
            elif communication_style == 'concise':
                adapted_response = self._make_more_concise(adapted_response)
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
            if preferences.get('likes_details', False):
                adapted_response = self._add_more_details(adapted_response)
            
            if preferences.get('uses_emojis', False):
                adapted_response = self._add_appropriate_emojis(adapted_response)
            
            return adapted_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return base_response
    
    async def learn_from_interaction(self, user_id: int, chat_id: int, 
                                   user_message: str, bot_response: str) -> bool:
        """üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self._get_user_profile(user_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            interaction_data = {
                'user_message': user_message,
                'bot_response': bot_response,
                'timestamp': datetime.now().isoformat(),
                'message_analysis': self._analyze_message(user_message),
                'response_effectiveness': self._estimate_response_effectiveness(user_message, bot_response)
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if 'learning_data' not in profile:
                profile['learning_data'] = []
            
            profile['learning_data'].append(interaction_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if len(profile['learning_data']) > 100:
                profile['learning_data'] = profile['learning_data'][-100:]
            
            # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è
            await self._retrain_behavior_model(user_id, profile)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: {e}")
            return False
    
    async def _get_user_profile(self, user_id: int) -> Dict[str, Any]:
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if user_id in self.user_profiles:
                profile = self.user_profiles[user_id]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
                last_update = datetime.fromisoformat(profile.get('last_update', datetime.now().isoformat()))
                if datetime.now() - last_update < timedelta(hours=self.learning_config['profile_update_frequency']):
                    return profile
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = {
                'user_id': user_id,
                'user_type': 'regular_user',
                'communication_style': 'neutral',
                'interaction_pattern': 'balanced',
                'preferences': {},
                'confidence_score': 0.5,
                'total_interactions': 0,
                'last_update': datetime.now().isoformat(),
                'learning_data': []
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.user_profiles[user_id] = profile
            
            return profile
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'user_id': user_id,
                'user_type': 'unknown',
                'communication_style': 'neutral'
            }
    
    async def _save_user_profile(self, user_id: int, profile: Dict[str, Any]) -> bool:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            profile['last_update'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.user_profiles[user_id] = profile
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            logger.debug(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False
    
    def _analyze_message(self, message: str) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            analysis = {
                'length': len(message),
                'word_count': len(message.split()),
                'has_questions': '?' in message,
                'has_exclamations': '!' in message,
                'has_emojis': any(ord(char) > 127 for char in message),
                'sentiment': self._analyze_sentiment(message),
                'communication_style': self._detect_communication_style(message),
                'topic_keywords': self._extract_keywords(message),
                'complexity_level': self._assess_complexity(message)
            }
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {}
    
    def _analyze_sentiment(self, message: str) -> str:
        """üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            message_lower = message.lower()
            
            positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '—Å–ø–∞—Å–∏–±–æ', '—Ä–∞–¥—É—é—Å—å']
            negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']
            neutral_words = ['–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ—â—å', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            
            positive_score = sum(1 for word in positive_words if word in message_lower)
            negative_score = sum(1 for word in negative_words if word in message_lower)
            
            if positive_score > negative_score:
                return 'positive'
            elif negative_score > positive_score:
                return 'negative'
            else:
                return 'neutral'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
            return 'neutral'
    
    def _detect_communication_style(self, message: str) -> str:
        """üó£Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        
        try:
            message_lower = message.lower()
            
            formal_markers = ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–º–æ–≥–ª–∏ –±—ã']
            casual_markers = ['–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞', '–∫—Ä—É—Ç–æ', '–æ–∫']
            technical_markers = ['—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞']
            emotional_markers = ['—á—É–≤—Å—Ç–≤—É—é', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–≤–æ–ª–Ω—É—é—Å—å', '—Ä–∞–¥—É—é—Å—å']
            
            scores = {
                'formal': sum(1 for marker in formal_markers if marker in message_lower),
                'casual': sum(1 for marker in casual_markers if marker in message_lower),
                'technical': sum(1 for marker in technical_markers if marker in message_lower),
                'emotional': sum(1 for marker in emotional_markers if marker in message_lower)
            }
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
            max_style = max(scores, key=scores.get)
            
            if scores[max_style] > 0:
                return max_style
            else:
                return 'neutral'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è: {e}")
            return 'neutral'
    
    def _extract_keywords(self, message: str) -> List[str]:
        """üîë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        
        try:
            stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '—á—Ç–æ', '—ç—Ç–æ'}
            
            words = message.lower().split()
            keywords = []
            
            for word in words:
                clean_word = ''.join(c for c in word if c.isalnum())
                if len(clean_word) > 2 and clean_word not in stop_words and clean_word.isalpha():
                    keywords.append(clean_word)
            
            return list(set(keywords))[:10]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            return []
    
    def _assess_complexity(self, message: str) -> str:
        """üß† –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            word_count = len(message.split())
            avg_word_length = sum(len(word) for word in message.split()) / max(word_count, 1)
            
            if word_count > 50 or avg_word_length > 6:
                return 'complex'
            elif word_count > 20 or avg_word_length > 4:
                return 'medium'
            else:
                return 'simple'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return 'medium'
    
    def _update_profile(self, profile: Dict[str, Any], message_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            updated_profile = profile.copy()
            updated_profile['total_interactions'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            current_style = message_analysis.get('communication_style', 'neutral')
            if current_style != 'neutral':
                updated_profile['communication_style'] = current_style
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            preferences = updated_profile.get('preferences', {})
            
            if message_analysis.get('has_emojis', False):
                preferences['uses_emojis'] = True
            
            if message_analysis.get('length', 0) > 100:
                preferences['likes_details'] = True
            
            updated_profile['preferences'] = preferences
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_interactions = updated_profile['total_interactions']
            if total_interactions >= self.learning_config['min_interactions_for_profile']:
                updated_profile['user_type'] = self._classify_user_type(updated_profile)
                updated_profile['confidence_score'] = min(0.9, total_interactions / 20)
            
            return updated_profile
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return profile
    
    def _classify_user_type(self, profile: Dict[str, Any]) -> str:
        """üé≠ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            preferences = profile.get('preferences', {})
            communication_style = profile.get('communication_style', 'neutral')
            
            # –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if communication_style == 'technical':
                return 'technical_user'
            elif communication_style == 'casual':
                return 'casual_user'
            elif preferences.get('likes_details', False):
                return 'information_seeker'
            elif communication_style == 'emotional':
                return 'support_seeker'
            else:
                return 'regular_user'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return 'regular_user'
    
    def _estimate_response_effectiveness(self, user_message: str, bot_response: str) -> float:
        """üìä –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
            effectiveness = 0.5  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å—É
            message_length = len(user_message)
            response_length = len(bot_response)
            
            if message_length > 100 and response_length > 200:
                effectiveness += 0.2  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            elif message_length < 50 and response_length < 150:
                effectiveness += 0.1  # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
            if '?' in user_message and len(bot_response) > 50:
                effectiveness += 0.2  # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            
            return min(1.0, effectiveness)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return 0.5
    
    async def _retrain_behavior_model(self, user_id: int, profile: Dict[str, Any]) -> bool:
        """ü§ñ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        
        try:
            learning_data = profile.get('learning_data', [])
            
            if len(learning_data) < 10:
                return False  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            patterns = self._analyze_interaction_patterns(learning_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            profile['interaction_patterns'] = patterns
            profile['model_last_trained'] = datetime.now().isoformat()
            
            logger.debug(f"ü§ñ –ú–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def _analyze_interaction_patterns(self, learning_data: List[Dict]) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        
        try:
            patterns = {
                'preferred_response_length': 'medium',
                'communication_times': [],
                'topic_preferences': [],
                'interaction_frequency': 'regular'
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
            response_lengths = []
            for interaction in learning_data:
                response_effectiveness = interaction.get('response_effectiveness', 0.5)
                bot_response = interaction.get('bot_response', '')
                
                if response_effectiveness > 0.7:  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    response_lengths.append(len(bot_response))
            
            if response_lengths:
                avg_effective_length = sum(response_lengths) / len(response_lengths)
                if avg_effective_length > 300:
                    patterns['preferred_response_length'] = 'long'
                elif avg_effective_length < 100:
                    patterns['preferred_response_length'] = 'short'
            
            return patterns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return {}
    
    # –ú–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    
    def _add_technical_details(self, response: str) -> str:
        """üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π"""
        
        if len(response) < 200:
            return response + "\n\nüí° –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
        return response
    
    def _make_more_casual(self, response: str) -> str:
        """üòä –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º"""
        
        casual_endings = [" üëç", " üòä", " –£–¥–∞—á–∏!", " –ù–∞–¥–µ—é—Å—å, –ø–æ–º–æ–≥!"]
        if not any(ending in response for ending in casual_endings):
            return response + " üòä"
        return response
    
    def _add_helpful_suggestions(self, response: str) -> str:
        """üí° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        
        if "?" not in response and len(response) < 300:
            return response + "\n\nüí° –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - —Å–º–µ–ª–æ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
        return response
    
    def _make_more_formal(self, response: str) -> str:
        """üé© –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º"""
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        import re
        response = re.sub(r'[üòÄ-üôè]', '', response)  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        
        if not response.endswith('.'):
            response += '.'
        
        return response
    
    def _add_emotional_support(self, response: str) -> str:
        """‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        
        supportive_phrases = [
            "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞.",
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.",
            "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏."
        ]
        
        if len(response) < 200:
            return response + f"\n\n{supportive_phrases[0]}"
        return response
    
    def _make_more_concise(self, response: str) -> str:
        """‚úÇÔ∏è –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–º"""
        
        if len(response) > 300:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = response.split('.')
            return '. '.join(sentences[:2]) + '.'
        return response
    
    def _add_more_details(self, response: str) -> str:
        """üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
        
        if len(response) < 200:
            return response + "\n\nüìö –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ?"
        return response
    
    def _add_appropriate_emojis(self, response: str) -> str:
        """üòä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–º–æ–¥–∑–∏"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
        if '—Å–ø–∞—Å–∏–±–æ' in response.lower() or '–±–ª–∞–≥–æ–¥–∞—Ä—é' in response.lower():
            return response + " üôè"
        elif '–ø–æ–º–æ—â—å' in response.lower() or '–ø–æ–º–æ–∂—É' in response.lower():
            return response + " üí™"
        elif '—É—Å–ø–µ—Ö' in response.lower() or '–æ—Ç–ª–∏—á–Ω–æ' in response.lower():
            return response + " ‚ú®"
        
        return response
    
    def get_module_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è"""
        
        return {
            'cached_profiles': len(self.user_profiles),
            'learning_enabled': bool(self.ai),
            'behavior_patterns_count': len(self.behavior_patterns),
            'module_status': 'active'
        }


__all__ = ["BehaviorModule"]