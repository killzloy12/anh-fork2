#!/usr/bin/env python3
"""
üß† CONVERSATION MEMORY MODULE v3.0 - –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–û–í
üí≠ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ –õ–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –°–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
"""

import logging
import asyncio
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Set
from dataclasses import dataclass, asdict
from collections import defaultdict

logger = logging.getLogger(__name__)


@dataclass
class UserProfile:
    """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    name: str = ""
    interests: List[str] = None
    personality_traits: List[str] = None
    preferred_topics: Dict[str, float] = None
    communication_style: str = "casual"
    relationship_level: str = "stranger"
    last_interaction: datetime = None
    total_messages: int = 0
    favorite_emojis: List[str] = None
    time_zone: str = ""
    language_preference: str = "ru"
    
    def __post_init__(self):
        if self.interests is None:
            self.interests = []
        if self.personality_traits is None:
            self.personality_traits = []
        if self.preferred_topics is None:
            self.preferred_topics = {}
        if self.favorite_emojis is None:
            self.favorite_emojis = []
        if self.last_interaction is None:
            self.last_interaction = datetime.now()


@dataclass
class ConversationMemory:
    """üí≠ –ü–∞–º—è—Ç—å –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"""
    user_id: int
    chat_id: int
    topic: str
    summary: str
    key_facts: List[str]
    emotional_tone: str
    importance_score: float
    timestamp: datetime
    related_users: List[int] = None
    
    def __post_init__(self):
        if self.related_users is None:
            self.related_users = []


@dataclass  
class PersonalFact:
    """üìù –õ–∏—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id: int
    category: str  # work, family, hobbies, etc.
    fact: str
    confidence: float
    source: str  # direct, inferred, context
    timestamp: datetime
    relevance_score: float = 1.0


class ConversationMemoryModule:
    """üí≠ –ú–æ–¥—É–ª—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, db_service):
        self.db = db_service
        self.user_profiles: Dict[int, UserProfile] = {}
        self.conversation_memories: List[ConversationMemory] = []
        self.personal_facts: Dict[int, List[PersonalFact]] = defaultdict(list)
        
        logger.info("üí≠ –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        await self._create_memory_tables()
        await self._load_user_profiles()
        await self._load_conversation_memories()
        logger.info("üí≠ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    async def _create_memory_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–∞–º—è—Ç–∏"""
        tables = [
            """
            CREATE TABLE IF NOT EXISTS user_profiles (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                interests TEXT,  -- JSON
                personality_traits TEXT,  -- JSON
                preferred_topics TEXT,  -- JSON
                communication_style TEXT,
                relationship_level TEXT,
                last_interaction DATETIME,
                total_messages INTEGER DEFAULT 0,
                favorite_emojis TEXT,  -- JSON
                time_zone TEXT,
                language_preference TEXT DEFAULT 'ru',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS conversation_memories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                chat_id INTEGER,
                topic TEXT,
                summary TEXT,
                key_facts TEXT,  -- JSON
                emotional_tone TEXT,
                importance_score REAL,
                related_users TEXT,  -- JSON
                timestamp DATETIME,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS personal_facts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                category TEXT,
                fact TEXT,
                confidence REAL,
                source TEXT,
                relevance_score REAL DEFAULT 1.0,
                timestamp DATETIME,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS user_relationships (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user1_id INTEGER,
                user2_id INTEGER,
                relationship_type TEXT,
                strength REAL DEFAULT 0.5,
                context TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user1_id) REFERENCES users (id),
                FOREIGN KEY (user2_id) REFERENCES users (id)
            )
            """
        ]
        
        for table_sql in tables:
            await self.db.execute(table_sql)
        
        # –ò–Ω–¥–µ–∫—Å—ã
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_conversation_memories_user ON conversation_memories(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_personal_facts_user ON personal_facts(user_id, category)",
            "CREATE INDEX IF NOT EXISTS idx_user_relationships ON user_relationships(user1_id, user2_id)"
        ]
        
        for index_sql in indexes:
            await self.db.execute(index_sql)
    
    async def _load_user_profiles(self):
        """üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            profiles = await self.db.fetch_all("SELECT * FROM user_profiles")
            
            for profile_data in profiles:
                profile = UserProfile(
                    user_id=profile_data['user_id'],
                    name=profile_data['name'] or "",
                    interests=json.loads(profile_data['interests'] or '[]'),
                    personality_traits=json.loads(profile_data['personality_traits'] or '[]'),
                    preferred_topics=json.loads(profile_data['preferred_topics'] or '{}'),
                    communication_style=profile_data['communication_style'],
                    relationship_level=profile_data['relationship_level'],
                    last_interaction=datetime.fromisoformat(profile_data['last_interaction']) if profile_data['last_interaction'] else datetime.now(),
                    total_messages=profile_data['total_messages'],
                    favorite_emojis=json.loads(profile_data['favorite_emojis'] or '[]'),
                    time_zone=profile_data['time_zone'] or "",
                    language_preference=profile_data['language_preference']
                )
                
                self.user_profiles[profile.user_id] = profile
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
    
    async def _load_conversation_memories(self):
        """üí≠ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            memories = await self.db.fetch_all("""
                SELECT * FROM conversation_memories 
                ORDER BY timestamp DESC LIMIT 1000
            """)
            
            for memory_data in memories:
                memory = ConversationMemory(
                    user_id=memory_data['user_id'],
                    chat_id=memory_data['chat_id'],
                    topic=memory_data['topic'],
                    summary=memory_data['summary'],
                    key_facts=json.loads(memory_data['key_facts'] or '[]'),
                    emotional_tone=memory_data['emotional_tone'],
                    importance_score=memory_data['importance_score'],
                    timestamp=datetime.fromisoformat(memory_data['timestamp']),
                    related_users=json.loads(memory_data['related_users'] or '[]')
                )
                
                self.conversation_memories.append(memory)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {e}")
    
    async def get_or_create_user_profile(self, user_id: int, name: str = "") -> UserProfile:
        """üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_profiles:
            profile = UserProfile(user_id=user_id, name=name)
            self.user_profiles[user_id] = profile
            await self._save_user_profile(profile)
        
        return self.user_profiles[user_id]
    
    async def _save_user_profile(self, profile: UserProfile):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.execute("""
                INSERT OR REPLACE INTO user_profiles 
                (user_id, name, interests, personality_traits, preferred_topics, 
                 communication_style, relationship_level, last_interaction, total_messages,
                 favorite_emojis, time_zone, language_preference, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                profile.user_id,
                profile.name,
                json.dumps(profile.interests, ensure_ascii=False),
                json.dumps(profile.personality_traits, ensure_ascii=False),
                json.dumps(profile.preferred_topics, ensure_ascii=False),
                profile.communication_style,
                profile.relationship_level,
                profile.last_interaction.isoformat(),
                profile.total_messages,
                json.dumps(profile.favorite_emojis, ensure_ascii=False),
                profile.time_zone,
                profile.language_preference,
                datetime.now().isoformat()
            ))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    async def update_user_interaction(self, user_id: int, message: str, topic: str, emotion: str):
        """üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        profile = await self.get_or_create_user_profile(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        profile.last_interaction = datetime.now()
        profile.total_messages += 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
        if topic in profile.preferred_topics:
            profile.preferred_topics[topic] += 0.1
        else:
            profile.preferred_topics[topic] = 0.5
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ —Ç–µ–º
        total_weight = sum(profile.preferred_topics.values())
        if total_weight > 10:  # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å
            for t in profile.preferred_topics:
                profile.preferred_topics[t] *= 0.9
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if profile.total_messages > 50:
            profile.relationship_level = "friend"
        elif profile.total_messages > 10:
            profile.relationship_level = "acquaintance"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
        emojis = re.findall(r'[üòÄ-üôè]', message)
        for emoji in emojis:
            if emoji not in profile.favorite_emojis:
                profile.favorite_emojis.append(emoji)
            if len(profile.favorite_emojis) > 10:
                profile.favorite_emojis = profile.favorite_emojis[-10:]
        
        await self._save_user_profile(profile)
    
    async def save_conversation_memory(self, user_id: int, chat_id: int, topic: str, 
                                      summary: str, key_facts: List[str], emotional_tone: str,
                                      importance_score: float = 0.5):
        """üí≠ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"""
        memory = ConversationMemory(
            user_id=user_id,
            chat_id=chat_id,
            topic=topic,
            summary=summary,
            key_facts=key_facts,
            emotional_tone=emotional_tone,
            importance_score=importance_score,
            timestamp=datetime.now()
        )
        
        self.conversation_memories.append(memory)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
        if len(self.conversation_memories) > 1000:
            self.conversation_memories = sorted(self.conversation_memories, 
                                              key=lambda x: x.importance_score, reverse=True)[:800]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            await self.db.execute("""
                INSERT INTO conversation_memories 
                (user_id, chat_id, topic, summary, key_facts, emotional_tone, 
                 importance_score, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                memory.user_id, memory.chat_id, memory.topic, memory.summary,
                json.dumps(memory.key_facts, ensure_ascii=False), memory.emotional_tone,
                memory.importance_score, memory.timestamp.isoformat()
            ))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
    
    async def add_personal_fact(self, user_id: int, category: str, fact: str, 
                               confidence: float = 0.8, source: str = "direct"):
        """üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        personal_fact = PersonalFact(
            user_id=user_id,
            category=category,
            fact=fact,
            confidence=confidence,
            source=source,
            timestamp=datetime.now()
        )
        
        self.personal_facts[user_id].append(personal_fact)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ–≤
        if len(self.personal_facts[user_id]) > 50:
            self.personal_facts[user_id] = sorted(
                self.personal_facts[user_id], 
                key=lambda x: x.confidence * x.relevance_score, 
                reverse=True
            )[:40]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            await self.db.execute("""
                INSERT INTO personal_facts 
                (user_id, category, fact, confidence, source, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                personal_fact.user_id, personal_fact.category, personal_fact.fact,
                personal_fact.confidence, personal_fact.source, 
                personal_fact.timestamp.isoformat()
            ))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: {e}")
    
    async def get_user_context(self, user_id: int, chat_id: int, limit: int = 5) -> Dict[str, Any]:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = await self.get_or_create_user_profile(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        relevant_memories = [
            memory for memory in self.conversation_memories
            if memory.user_id == user_id and memory.chat_id == chat_id
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        relevant_memories = sorted(
            relevant_memories,
            key=lambda x: (x.importance_score, x.timestamp),
            reverse=True
        )[:limit]
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        personal_facts = self.personal_facts.get(user_id, [])
        personal_facts = sorted(personal_facts, 
                              key=lambda x: x.confidence * x.relevance_score,
                              reverse=True)[:10]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            'profile': {
                'name': profile.name,
                'relationship_level': profile.relationship_level,
                'total_messages': profile.total_messages,
                'interests': profile.interests,
                'personality_traits': profile.personality_traits,
                'preferred_topics': profile.preferred_topics,
                'communication_style': profile.communication_style,
                'favorite_emojis': profile.favorite_emojis,
                'last_interaction': profile.last_interaction
            },
            'memories': [
                {
                    'topic': memory.topic,
                    'summary': memory.summary,
                    'key_facts': memory.key_facts,
                    'emotional_tone': memory.emotional_tone,
                    'timestamp': memory.timestamp
                }
                for memory in relevant_memories
            ],
            'personal_facts': [
                {
                    'category': fact.category,
                    'fact': fact.fact,
                    'confidence': fact.confidence
                }
                for fact in personal_facts
            ]
        }
        
        return context
    
    async def extract_facts_from_message(self, user_id: int, message: str) -> List[PersonalFact]:
        """üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        facts = []
        message_lower = message.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
        fact_patterns = {
            'work': [
                r'—Ä–∞–±–æ—Ç–∞—é (.*)', r'–º–æ—è —Ä–∞–±–æ—Ç–∞ (.*)', r'—è (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç|–≤—Ä–∞—á|—É—á–∏—Ç–µ–ª—å|–º–µ–Ω–µ–¥–∂–µ—Ä)',
                r'–≤ –æ—Ñ–∏—Å–µ (.*)', r'–º–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫ (.*)', r'–∫–æ–ª–ª–µ–≥–∏ (.*)'
            ],
            'family': [
                r'–º–æ—è (–º–∞–º–∞|–ø–∞–ø–∞|–∂–µ–Ω–∞|–º—É–∂) (.*)', r'—É –º–µ–Ω—è –µ—Å—Ç—å (—Å—ã–Ω|–¥–æ—á—å|–±—Ä–∞—Ç|—Å–µ—Å—Ç—Ä–∞)',
                r'–º–æ–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ (.*)', r'—Å–µ–º—å—è (.*)'
            ],
            'hobbies': [
                r'–ª—é–±–ª—é (.*)', r'—É–≤–ª–µ–∫–∞—é—Å—å (.*)', r'—Ö–æ–±–±–∏ (.*)', r'–∏–≥—Ä–∞—é –≤ (.*)',
                r'—á–∏—Ç–∞—é (.*)', r'—Å–º–æ—Ç—Ä—é (.*)'
            ],
            'personal': [
                r'–º–Ω–µ (\d+) (–ª–µ—Ç|–≥–æ–¥–∞|–≥–æ–¥)', r'—è –∏–∑ (.*)', r'–∂–∏–≤—É –≤ (.*)',
                r'—É—á–∏–ª—Å—è –≤ (.*)', r'–æ–∫–æ–Ω—á–∏–ª (.*)'
            ],
            'preferences': [
                r'–Ω–µ –ª—é–±–ª—é (.*)', r'–Ω–µ–Ω–∞–≤–∏–∂—É (.*)', r'–æ–±–æ–∂–∞—é (.*)', 
                r'–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é (.*)', r'–º–æ–π –ª—é–±–∏–º—ã–π (.*)'
            ]
        }
        
        for category, patterns in fact_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, message_lower)
                for match in matches:
                    fact_text = match if isinstance(match, str) else ' '.join(match)
                    if len(fact_text.strip()) > 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–∫—Ç–∞
                        fact = PersonalFact(
                            user_id=user_id,
                            category=category,
                            fact=f"{pattern.split('(')[0]} {fact_text}".strip(),
                            confidence=0.7,
                            source="inferred",
                            timestamp=datetime.now()
                        )
                        facts.append(fact)
        
        return facts
    
    async def get_conversation_suggestions(self, user_id: int) -> List[str]:
        """üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        profile = await self.get_or_create_user_profile(user_id)
        suggestions = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if profile.interests:
            interest = random.choice(profile.interests)
            suggestions.append(f"–ö—Å—Ç–∞—Ç–∏, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ {interest}?")
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–º
        if profile.preferred_topics:
            top_topic = max(profile.preferred_topics, key=profile.preferred_topics.get)
            suggestions.append(f"–ü–æ–º–Ω—é, —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è {top_topic}")
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
        user_facts = self.personal_facts.get(user_id, [])
        if user_facts:
            fact = random.choice(user_facts)
            if fact.category == 'work':
                suggestions.append("–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?")
            elif fact.category == 'hobbies':
                suggestions.append("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?")
        
        return suggestions[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    async def cleanup_old_memories(self, days: int = 30):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
        self.conversation_memories = [
            memory for memory in self.conversation_memories
            if memory.timestamp > cutoff_date or memory.importance_score > 0.8
        ]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        try:
            await self.db.execute("""
                DELETE FROM conversation_memories 
                WHERE timestamp < ? AND importance_score < 0.8
            """, (cutoff_date.isoformat(),))
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "ConversationMemoryModule",
    "UserProfile", 
    "ConversationMemory",
    "PersonalFact"
]