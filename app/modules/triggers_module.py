#!/usr/bin/env python3
"""
‚ö° TRIGGERS MODULE v3.0 - –ò–°–ü–†–ê–í–õ–ï–ù–û
üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
"""

import logging
import json
import re
import asyncio  # –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from pathlib import Path

logger = logging.getLogger(__name__)


class TriggersModule:
    """‚ö° –ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        
        # –§–∞–π–ª —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
        self.triggers_file = Path('data/triggers/triggers.json')
        self.triggers_file.parent.mkdir(exist_ok=True)
        
        # –ö—ç—à —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        self.triggers = {}
        self.global_triggers = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        self.trigger_stats = {}
        
        # –¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        self.trigger_types = {
            'text': '–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä',
            'regex': '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
            'exact': '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
            'contains': '–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç',
            'starts_with': '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å',
            'ends_with': '–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞'
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã - –ë–ï–ó asyncio.create_task –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("‚ö° Triggers Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üì• –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        await self.load_triggers()
    
    async def load_triggers(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        
        try:
            if self.triggers_file.exists():
                with open(self.triggers_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.triggers = data.get('chat_triggers', {})
                    self.global_triggers = data.get('global_triggers', {})
                    self.trigger_stats = data.get('statistics', {})
                
                logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {len(self.triggers)} —á–∞—Ç–æ–≤—ã—Ö, {len(self.global_triggers)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
    
    async def save_triggers(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        
        try:
            data = {
                'chat_triggers': self.triggers,
                'global_triggers': self.global_triggers,
                'statistics': self.trigger_stats,
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.triggers_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
            logger.debug("üíæ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return False
    
    async def add_trigger(self, user_id: int, chat_id: int, trigger_name: str, 
                         trigger_pattern: str, response: str, 
                         trigger_type: str = 'contains') -> Dict[str, Any]:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not all([trigger_name, trigger_pattern, response]):
                return {
                    'success': False,
                    'error': '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                }
            
            if trigger_type not in self.trigger_types:
                return {
                    'success': False,
                    'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {", ".join(self.trigger_types.keys())}'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not await self._check_trigger_limits(user_id, chat_id):
                return {
                    'success': False,
                    'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤'
                }
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            trigger_data = {
                'id': f"{chat_id}_{trigger_name}_{int(datetime.now().timestamp())}",
                'name': trigger_name,
                'pattern': trigger_pattern,
                'response': response,
                'type': trigger_type,
                'creator_id': user_id,
                'chat_id': chat_id,
                'created_at': datetime.now().isoformat(),
                'usage_count': 0,
                'is_active': True,
                'is_global': chat_id == 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–º–µ—é—Ç chat_id = 0
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            if trigger_data['is_global']:
                self.global_triggers[trigger_data['id']] = trigger_data
            else:
                chat_key = str(chat_id)
                if chat_key not in self.triggers:
                    self.triggers[chat_key] = {}
                self.triggers[chat_key][trigger_data['id']] = trigger_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            await self.save_triggers()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            if self.db:
                await self.db.track_event(
                    user_id, chat_id, 'trigger_created',
                    {'trigger_name': trigger_name, 'trigger_type': trigger_type}
                )
            
            return {
                'success': True,
                'trigger_id': trigger_data['id'],
                'message': f'–¢—Ä–∏–≥–≥–µ—Ä "{trigger_name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {str(e)}'
            }
    
    async def delete_trigger(self, user_id: int, chat_id: int, 
                           trigger_identifier: str) -> Dict[str, Any]:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        
        try:
            # –ò—â–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            trigger_data = await self._find_trigger(chat_id, trigger_identifier)
            
            if not trigger_data:
                return {
                    'success': False,
                    'error': '–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            if not await self._check_trigger_permissions(user_id, chat_id, trigger_data):
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞'
                }
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            if trigger_data['is_global']:
                del self.global_triggers[trigger_data['id']]
            else:
                chat_key = str(chat_id)
                if chat_key in self.triggers and trigger_data['id'] in self.triggers[chat_key]:
                    del self.triggers[chat_key][trigger_data['id']]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.save_triggers()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            if self.db:
                await self.db.track_event(
                    user_id, chat_id, 'trigger_deleted',
                    {'trigger_name': trigger_data['name']}
                )
            
            return {
                'success': True,
                'message': f'–¢—Ä–∏–≥–≥–µ—Ä "{trigger_data["name"]}" —É–¥–∞–ª–µ–Ω'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'
            }
    
    async def check_message_triggers(self, message_text: str, chat_id: int, 
                                   user_id: int) -> Optional[str]:
        """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º"""
        
        try:
            if not message_text:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_triggers = self.triggers.get(str(chat_id), {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            response = await self._check_triggers(message_text, chat_triggers, user_id, chat_id)
            if response:
                return response
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            response = await self._check_triggers(message_text, self.global_triggers, user_id, chat_id)
            if response:
                return response
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return None
    
    async def _check_triggers(self, message_text: str, triggers: Dict, 
                            user_id: int, chat_id: int) -> Optional[str]:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –Ω–∞–±–æ—Ä–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        
        try:
            for trigger_id, trigger_data in triggers.items():
                if not trigger_data.get('is_active', True):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                if await self._match_trigger(message_text, trigger_data):
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    trigger_data['usage_count'] = trigger_data.get('usage_count', 0) + 1
                    trigger_data['last_used'] = datetime.now().isoformat()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if trigger_id not in self.trigger_stats:
                        self.trigger_stats[trigger_id] = 0
                    self.trigger_stats[trigger_id] += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    asyncio.create_task(self.save_triggers())
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
                    if self.db:
                        await self.db.track_event(
                            user_id, chat_id, 'trigger_activated',
                            {'trigger_name': trigger_data['name'], 'trigger_id': trigger_id}
                        )
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
                    return await self._process_trigger_response(
                        trigger_data['response'], user_id, chat_id, message_text
                    )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–±–æ—Ä–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return None
    
    async def _match_trigger(self, message_text: str, trigger_data: Dict) -> bool:
        """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        
        try:
            pattern = trigger_data['pattern']
            trigger_type = trigger_data.get('type', 'contains')
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            message_lower = message_text.lower()
            pattern_lower = pattern.lower()
            
            if trigger_type == 'exact':
                return message_lower == pattern_lower
            elif trigger_type == 'contains':
                return pattern_lower in message_lower
            elif trigger_type == 'starts_with':
                return message_lower.startswith(pattern_lower)
            elif trigger_type == 'ends_with':
                return message_lower.endswith(pattern_lower)
            elif trigger_type == 'regex':
                try:
                    return bool(re.search(pattern, message_text, re.IGNORECASE))
                except re.error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ: {pattern}")
                    return False
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - contains
                return pattern_lower in message_lower
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False
    
    async def _process_trigger_response(self, response: str, user_id: int, 
                                      chat_id: int, original_message: str) -> str:
        """üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        
        try:
            processed_response = response
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            replacements = {
                '{user_id}': str(user_id),
                '{chat_id}': str(chat_id),
                '{message}': original_message,
                '{time}': datetime.now().strftime('%H:%M'),
                '{date}': datetime.now().strftime('%d.%m.%Y'),
                '{datetime}': datetime.now().strftime('%d.%m.%Y %H:%M')
            }
            
            for placeholder, value in replacements.items():
                processed_response = processed_response.replace(placeholder, value)
            
            return processed_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return response
    
    async def _find_trigger(self, chat_id: int, identifier: str) -> Optional[Dict]:
        """üîç –ü–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–ª–∏ –∏–º–µ–Ω–∏"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ ID
            chat_key = str(chat_id)
            
            # –ü–æ–∏—Å–∫ –≤ —á–∞—Ç–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
            if chat_key in self.triggers:
                if identifier in self.triggers[chat_key]:
                    return self.triggers[chat_key][identifier]
                
                # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                for trigger_data in self.triggers[chat_key].values():
                    if trigger_data['name'].lower() == identifier.lower():
                        return trigger_data
            
            # –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
            if identifier in self.global_triggers:
                return self.global_triggers[identifier]
            
            for trigger_data in self.global_triggers.values():
                if trigger_data['name'].lower() == identifier.lower():
                    return trigger_data
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return None
    
    async def _check_trigger_permissions(self, user_id: int, chat_id: int, 
                                       trigger_data: Dict) -> bool:
        """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        
        try:
            # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—Å–µ
            if user_id in self.config.bot.admin_ids:
                return True
            
            # –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
            if trigger_data.get('creator_id') == user_id:
                return True
            
            # –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if trigger_data.get('is_global', False):
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
    
    async def _check_trigger_limits(self, user_id: int, chat_id: int) -> bool:
        """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        
        try:
            # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_id in self.config.bot.admin_ids:
                max_triggers = 100  # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            else:
                max_triggers = 10   # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_triggers_count = 0
            
            chat_key = str(chat_id)
            if chat_key in self.triggers:
                for trigger_data in self.triggers[chat_key].values():
                    if trigger_data.get('creator_id') == user_id:
                        user_triggers_count += 1
            
            return user_triggers_count < max_triggers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    
    async def get_user_triggers(self, user_id: int, chat_id: int) -> List[Dict]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            user_triggers = []
            
            # –¢—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
            chat_key = str(chat_id)
            if chat_key in self.triggers:
                for trigger_data in self.triggers[chat_key].values():
                    if trigger_data.get('creator_id') == user_id:
                        user_triggers.append(trigger_data)
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for trigger_data in self.global_triggers.values():
                if trigger_data.get('creator_id') == user_id:
                    user_triggers.append(trigger_data)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            user_triggers.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            
            return user_triggers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
    
    async def get_trigger_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        
        try:
            total_triggers = len(self.global_triggers)
            for chat_triggers in self.triggers.values():
                total_triggers += len(chat_triggers)
            
            active_triggers = 0
            total_usage = 0
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            for trigger_data in self.global_triggers.values():
                if trigger_data.get('is_active', True):
                    active_triggers += 1
                total_usage += trigger_data.get('usage_count', 0)
            
            for chat_triggers in self.triggers.values():
                for trigger_data in chat_triggers.values():
                    if trigger_data.get('is_active', True):
                        active_triggers += 1
                    total_usage += trigger_data.get('usage_count', 0)
            
            # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            top_triggers = []
            all_triggers = list(self.global_triggers.values())
            for chat_triggers in self.triggers.values():
                all_triggers.extend(chat_triggers.values())
            
            all_triggers.sort(key=lambda x: x.get('usage_count', 0), reverse=True)
            top_triggers = all_triggers[:5]
            
            return {
                'total_triggers': total_triggers,
                'active_triggers': active_triggers,
                'global_triggers': len(self.global_triggers),
                'chat_triggers': total_triggers - len(self.global_triggers),
                'total_usage': total_usage,
                'top_triggers': [
                    {
                        'name': t['name'],
                        'usage_count': t.get('usage_count', 0),
                        'type': t.get('type', 'contains')
                    }
                    for t in top_triggers
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_module_info(self) -> Dict[str, Any]:
        """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ"""
        
        return {
            'module_name': 'Triggers Module',
            'version': '3.0',
            'loaded_triggers': len(self.triggers),
            'global_triggers': len(self.global_triggers),
            'trigger_types': list(self.trigger_types.keys()),
            'status': 'active'
        }


__all__ = ["TriggersModule"]