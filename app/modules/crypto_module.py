#!/usr/bin/env python3
"""
‚Çø CRYPTO MODULE v2.0
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
"""

import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)


class CryptoModule:
    """‚Çø –ú–æ–¥—É–ª—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    def __init__(self, crypto_service):
        self.crypto_service = crypto_service
        
        # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_favorites = {}
        
        logger.info("‚Çø Crypto Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_crypto_request(self, user_id: int, coin_query: str) -> Dict[str, Any]:
        """üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        
        if not self.crypto_service:
            return {
                'error': True,
                'message': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω'
            }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ
            crypto_data = await self.crypto_service.get_crypto_price(coin_query, user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if not crypto_data.get('error', False):
                crypto_data['recommendations'] = self._generate_recommendations(crypto_data)
            
            return crypto_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                'error': True,
                'message': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ'
            }
    
    async def get_trending_crypto(self) -> Dict[str, Any]:
        """üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        
        if not self.crypto_service:
            return {
                'error': True,
                'message': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω'
            }
        
        return await self.crypto_service.get_trending_crypto()
    
    def _generate_recommendations(self, crypto_data: Dict) -> List[str]:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        recommendations = []
        change_24h = crypto_data.get('change_24h', 0)
        
        if change_24h > 10:
            recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã")
        elif change_24h > 5:
            recommendations.append("üìà –•–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º")
        elif change_24h < -10:
            recommendations.append("üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏")
        
        recommendations.append("üìö –í—Å–µ–≥–¥–∞ –∏–∑—É—á–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
        return recommendations[:3]
    
    async def add_to_favorites(self, user_id: int, coin_symbol: str) -> bool:
        """‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        
        try:
            if user_id not in self.user_favorites:
                self.user_favorites[user_id] = []
            
            if coin_symbol not in self.user_favorites[user_id]:
                self.user_favorites[user_id].append(coin_symbol.lower())
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            return False
    
    def get_user_favorites(self, user_id: int) -> List[str]:
        """‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        
        return self.user_favorites.get(user_id, [])


__all__ = ["CryptoModule"]