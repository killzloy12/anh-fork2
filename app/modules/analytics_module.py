#!/usr/bin/env python3
"""
üìä ANALYTICS MODULE v2.0
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
"""

import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)


class AnalyticsModule:
    """üìä –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self, analytics_service):
        self.analytics_service = analytics_service
        
        logger.info("üìä Analytics Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def track_user_action(self, user_id: int, chat_id: int, action: str, metadata: Dict = None) -> bool:
        """üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if not self.analytics_service:
            return False
        
        return await self.analytics_service.track_user_activity(
            user_id, chat_id, action, metadata
        )
    
    async def get_user_dashboard(self, user_id: int) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if not self.analytics_service:
            return {'error': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            analytics = await self.analytics_service.get_user_analytics(user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if analytics.get('error'):
                return analytics
            
            dashboard = {
                'user_id': user_id,
                'basic_stats': analytics.get('basic_stats', {}),
                'activity_level': analytics.get('activity_analysis', {}).get('activity_level', 'unknown'),
                'engagement_score': analytics.get('activity_analysis', {}).get('engagement_score', 0),
                'insights': analytics.get('insights', []),
                'generated_at': analytics.get('generated_at')
            }
            
            return dashboard
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return {'error': str(e)}
    
    async def get_chat_dashboard(self, chat_id: int) -> Dict[str, Any]:
        """üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —á–∞—Ç–∞"""
        
        if not self.analytics_service:
            return {'error': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        return await self.analytics_service.get_chat_analytics(chat_id)
    
    async def export_user_data(self, user_id: int, format: str = 'json') -> str:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            dashboard = await self.get_user_dashboard(user_id)
            
            if format == 'json':
                import json
                return json.dumps(dashboard, indent=2, ensure_ascii=False)
            elif format == 'csv':
                # –ü—Ä–æ—Å—Ç–æ–π CSV —ç–∫—Å–ø–æ—Ä—Ç
                basic_stats = dashboard.get('basic_stats', {})
                csv_data = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,–°–æ–æ–±—â–µ–Ω–∏–π,–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞,–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                csv_data += f"{user_id},{basic_stats.get('message_count', 0)},{basic_stats.get('avg_message_length', 0)},{basic_stats.get('last_activity', 'N/A')}\n"
                return csv_data
            else:
                return str(dashboard)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"


__all__ = ["AnalyticsModule"]