#!/usr/bin/env python3
"""
‚öñÔ∏è KARMA SYSTEM v1.0 - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üöÄ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å –≥–∏–±–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ö–∞—Ä–º–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–º–æ—â—å, –≤–∫–ª–∞–¥ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
‚Ä¢ –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è, —Å–ø–∞–º, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä–º—ã
‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import asyncio

logger = logging.getLogger(__name__)


class KarmaActionType(Enum):
    """üéØ –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ä–º—ã"""
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    MESSAGE = "message"                  # –°–æ–æ–±—â–µ–Ω–∏–µ (+1)
    HELPFUL_REPLY = "helpful_reply"      # –ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (+3)
    QUESTION_ANSWER = "question_answer"  # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (+5)
    WELCOME_NEWCOMER = "welcome_newcomer" # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–∏—á–∫–∞ (+2)
    SHARE_KNOWLEDGE = "share_knowledge"  # –î–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è–º–∏ (+4)
    POSITIVE_REACTION = "positive_reaction" # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è (+1)
    
    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    SPAM = "spam"                       # –°–ø–∞–º (-5)
    TOXICITY = "toxicity"               # –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (-10)
    FLOOD = "flood"                     # –§–ª—É–¥ (-3)
    OFF_TOPIC = "off_topic"             # –û—Ñ—Ñ—Ç–æ–ø (-2)
    RULE_VIOLATION = "rule_violation"   # –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (-8)
    REPEATED_VIOLATION = "repeated_violation" # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (-15)
    
    # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    MANUAL_BONUS = "manual_bonus"       # –†—É—á–Ω–æ–π –±–æ–Ω—É—Å (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π)
    MANUAL_PENALTY = "manual_penalty"   # –†—É—á–Ω–æ–π —à—Ç—Ä–∞—Ñ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π)
    ACHIEVEMENT_BONUS = "achievement"   # –ë–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (+20)


@dataclass
class KarmaLevel:
    """üìä –£—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–º—ã"""
    level: int
    name: str
    min_karma: int
    max_karma: int
    emoji: str
    description: str
    benefits: List[str]


@dataclass
class KarmaAction:
    """üìã –î–µ–π—Å—Ç–≤–∏–µ –∫–∞—Ä–º—ã"""
    id: str
    user_id: int
    chat_id: int
    action_type: KarmaActionType
    karma_change: int
    reason: str
    moderator_id: Optional[int]
    timestamp: datetime
    message_id: Optional[int] = None


@dataclass
class UserKarma:
    """üë§ –ö–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    chat_id: int
    karma: int
    level: int
    total_positive: int
    total_negative: int
    message_count: int
    last_activity: datetime
    created_at: datetime


class KarmaSettings:
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä–º—ã –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.karma_values = {
            KarmaActionType.MESSAGE: 1,
            KarmaActionType.HELPFUL_REPLY: 3,
            KarmaActionType.QUESTION_ANSWER: 5,
            KarmaActionType.WELCOME_NEWCOMER: 2,
            KarmaActionType.SHARE_KNOWLEDGE: 4,
            KarmaActionType.POSITIVE_REACTION: 1,
            
            KarmaActionType.SPAM: -5,
            KarmaActionType.TOXICITY: -10,
            KarmaActionType.FLOOD: -3,
            KarmaActionType.OFF_TOPIC: -2,
            KarmaActionType.RULE_VIOLATION: -8,
            KarmaActionType.REPEATED_VIOLATION: -15,
        }
        
        # –õ–∏–º–∏—Ç—ã –∫–∞—Ä–º—ã
        self.daily_message_karma_limit = 50  # –ú–∞–∫—Å –∫–∞—Ä–º—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å
        self.karma_decay_enabled = False      # –í–∫–ª—é—á–∏—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –∫–∞—Ä–º—ã
        self.karma_decay_rate = 0.1          # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü
        self.min_karma = -1000               # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Ä–º–∞
        self.max_karma = 10000               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Ä–º–∞
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        self.newcomer_bonus = 1.5            # –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞–º (–ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π)
        self.veteran_penalty = 0.8           # –®—Ç—Ä–∞—Ñ –≤–µ—Ç–µ—Ä–∞–Ω–∞–º (—É–∂–µ –≤—ã—Å–æ–∫–∞—è –∫–∞—Ä–º–∞)
        self.weekend_bonus = 1.2             # –ë–æ–Ω—É—Å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        self.auto_detect_helpful = True       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        self.auto_detect_spam = True         # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–ø–∞–º
        self.auto_detect_toxicity = True     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
        
        # –£—Ä–æ–≤–Ω–∏ –∫–∞—Ä–º—ã
        self.levels = [
            KarmaLevel(0, "–ù–æ–≤–∏—á–æ–∫", -1000, 0, "üî∞", "–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—â–∏–π –ø—É—Ç—å", ["–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø"]),
            KarmaLevel(1, "–£—á–∞—Å—Ç–Ω–∏–∫", 1, 50, "üë§", "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", ["–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤"]),
            KarmaLevel(2, "–ê–∫—Ç–∏–≤–∏—Å—Ç", 51, 150, "‚≠ê", "–ü–æ–ª–µ–∑–Ω—ã–π —á–ª–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", ["–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]),
            KarmaLevel(3, "–≠–∫—Å–ø–µ—Ä—Ç", 151, 300, "üéì", "–ó–Ω–∞—é—â–∏–π –∏ –æ–ø—ã—Ç–Ω—ã–π", ["–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"]),
            KarmaLevel(4, "–ú–∞—Å—Ç–µ—Ä", 301, 600, "üî•", "–ú–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞", ["–û—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"]),
            KarmaLevel(5, "–ì—É—Ä—É", 601, 1000, "üèÜ", "–ü—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", ["VIP —Å—Ç–∞—Ç—É—Å"]),
            KarmaLevel(6, "–õ–µ–≥–µ–Ω–¥–∞", 1001, 10000, "üëë", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫", ["–í—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"])
        ]


class KarmaManager:
    """‚öñÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        self.settings = KarmaSettings()
        self.user_karma_cache = {}  # –ö—ç—à –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.daily_limits = {}      # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        logger.info("‚öñÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_karma_tables()
        await self._load_karma_cache()
        await self._load_settings()
        logger.info("‚öñÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    async def _create_karma_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∫–∞—Ä–º—ã"""
        tables = [
            """
            CREATE TABLE IF NOT EXISTS user_karma (
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                karma INTEGER DEFAULT 0,
                level INTEGER DEFAULT 0,
                total_positive INTEGER DEFAULT 0,
                total_negative INTEGER DEFAULT 0,
                message_count INTEGER DEFAULT 0,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, chat_id)
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS karma_actions (
                id TEXT PRIMARY KEY,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                action_type TEXT NOT NULL,
                karma_change INTEGER NOT NULL,
                reason TEXT,
                moderator_id INTEGER,
                message_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS karma_settings (
                chat_id INTEGER PRIMARY KEY,
                settings_json TEXT NOT NULL,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS karma_achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                achievement_type TEXT NOT NULL,
                achieved_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                karma_bonus INTEGER DEFAULT 0
            )
            """
        ]
        
        for table_sql in tables:
            await self.db.execute(table_sql)
        
        # –ò–Ω–¥–µ–∫—Å—ã
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_karma_user_chat ON user_karma (user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_karma_actions_user ON karma_actions (user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_karma_actions_chat ON karma_actions (chat_id, timestamp)"
        ]
        
        for index_sql in indexes:
            await self.db.execute(index_sql)
    
    async def add_karma(self, user_id: int, chat_id: int, action_type: KarmaActionType, 
                       reason: str = "", moderator_id: Optional[int] = None, 
                       message_id: Optional[int] = None, custom_value: Optional[int] = None) -> Tuple[bool, int, int]:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã
            karma_change = custom_value or self.settings.karma_values.get(action_type, 0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            karma_change = await self._apply_karma_modifiers(user_id, chat_id, karma_change, action_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not await self._check_karma_limits(user_id, chat_id, karma_change, action_type):
                return False, 0, 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä–º—É
            current_karma = await self.get_user_karma(user_id, chat_id)
            new_karma = max(self.settings.min_karma, min(self.settings.max_karma, current_karma.karma + karma_change))
            actual_change = new_karma - current_karma.karma
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É
            await self.db.execute("""
                INSERT OR REPLACE INTO user_karma 
                (user_id, chat_id, karma, level, total_positive, total_negative, message_count, last_activity)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id, chat_id, new_karma,
                self._get_level_by_karma(new_karma),
                current_karma.total_positive + max(0, actual_change),
                current_karma.total_negative + abs(min(0, actual_change)),
                current_karma.message_count + (1 if action_type == KarmaActionType.MESSAGE else 0),
                datetime.now().isoformat()
            ))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action_id = f"karma_{user_id}_{chat_id}_{int(datetime.now().timestamp())}"
            await self.db.execute("""
                INSERT INTO karma_actions 
                (id, user_id, chat_id, action_type, karma_change, reason, moderator_id, message_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (action_id, user_id, chat_id, action_type.value, actual_change, reason, moderator_id, message_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if (user_id, chat_id) in self.user_karma_cache:
                self.user_karma_cache[(user_id, chat_id)].karma = new_karma
                self.user_karma_cache[(user_id, chat_id)].level = self._get_level_by_karma(new_karma)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            await self._check_achievements(user_id, chat_id, new_karma, action_type)
            
            logger.info(f"‚öñÔ∏è –ö–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —á–∞—Ç {chat_id}, {actual_change:+d} ({action_type.value})")
            return True, actual_change, new_karma
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã: {e}")
            return False, 0, 0
    
    async def get_user_karma(self, user_id: int, chat_id: int) -> UserKarma:
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = (user_id, chat_id)
        if cache_key in self.user_karma_cache:
            return self.user_karma_cache[cache_key]
        
        try:
            karma_data = await self.db.fetch_one("""
                SELECT * FROM user_karma WHERE user_id = ? AND chat_id = ?
            """, (user_id, chat_id))
            
            if karma_data:
                user_karma = UserKarma(
                    user_id=karma_data['user_id'],
                    chat_id=karma_data['chat_id'],
                    karma=karma_data['karma'],
                    level=karma_data['level'],
                    total_positive=karma_data['total_positive'],
                    total_negative=karma_data['total_negative'],
                    message_count=karma_data['message_count'],
                    last_activity=datetime.fromisoformat(karma_data['last_activity']),
                    created_at=datetime.fromisoformat(karma_data['created_at'])
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                user_karma = UserKarma(
                    user_id=user_id,
                    chat_id=chat_id,
                    karma=0,
                    level=0,
                    total_positive=0,
                    total_negative=0,
                    message_count=0,
                    last_activity=datetime.now(),
                    created_at=datetime.now()
                )
                
                await self.db.execute("""
                    INSERT INTO user_karma (user_id, chat_id, karma, level)
                    VALUES (?, ?, ?, ?)
                """, (user_id, chat_id, 0, 0))
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.user_karma_cache[cache_key] = user_karma
            return user_karma
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä–º—ã: {e}")
            return UserKarma(user_id, chat_id, 0, 0, 0, 0, 0, datetime.now(), datetime.now())
    
    async def get_karma_leaderboard(self, chat_id: int, limit: int = 10) -> List[Dict]:
        """üèÜ –¢–æ–ø –ø–æ –∫–∞—Ä–º–µ"""
        try:
            leaderboard_data = await self.db.fetch_all("""
                SELECT user_id, karma, level, message_count, last_activity
                FROM user_karma 
                WHERE chat_id = ? AND karma > 0
                ORDER BY karma DESC, last_activity DESC
                LIMIT ?
            """, (chat_id, limit))
            
            result = []
            for i, row in enumerate(leaderboard_data, 1):
                level_info = self.settings.levels[min(row['level'], len(self.settings.levels) - 1)]
                result.append({
                    'rank': i,
                    'user_id': row['user_id'],
                    'karma': row['karma'],
                    'level': row['level'],
                    'level_name': level_info.name,
                    'level_emoji': level_info.emoji,
                    'message_count': row['message_count']
                })
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
            return []
    
    async def get_user_karma_history(self, user_id: int, chat_id: int, limit: int = 20) -> List[Dict]:
        """üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            history_data = await self.db.fetch_all("""
                SELECT action_type, karma_change, reason, timestamp, moderator_id
                FROM karma_actions 
                WHERE user_id = ? AND chat_id = ?
                ORDER BY timestamp DESC
                LIMIT ?
            """, (user_id, chat_id, limit))
            
            result = []
            for row in history_data:
                result.append({
                    'action_type': row['action_type'],
                    'karma_change': row['karma_change'],
                    'reason': row['reason'],
                    'timestamp': row['timestamp'],
                    'moderator_id': row['moderator_id']
                })
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def _get_level_by_karma(self, karma: int) -> int:
        """üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –∫–∞—Ä–º–µ"""
        for i, level in enumerate(reversed(self.settings.levels)):
            if karma >= level.min_karma:
                return len(self.settings.levels) - 1 - i
        return 0
    
    def get_level_info(self, level: int) -> KarmaLevel:
        """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ"""
        return self.settings.levels[min(level, len(self.settings.levels) - 1)]
    
    async def _apply_karma_modifiers(self, user_id: int, chat_id: int, karma_change: int, action_type: KarmaActionType) -> int:
        """üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–∞—Ä–º—ã"""
        if karma_change == 0:
            return 0
        
        modifier = 1.0
        
        # –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞–º
        user_karma = await self.get_user_karma(user_id, chat_id)
        if (datetime.now() - user_karma.created_at).days <= 7:
            modifier *= self.settings.newcomer_bonus
        
        # –®—Ç—Ä–∞—Ñ –≤–µ—Ç–µ—Ä–∞–Ω–∞–º
        if user_karma.karma > 500:
            modifier *= self.settings.veteran_penalty
        
        # –ë–æ–Ω—É—Å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        if datetime.now().weekday() >= 5:  # –°—É–±–±–æ—Ç–∞/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            modifier *= self.settings.weekend_bonus
        
        return int(karma_change * modifier)
    
    async def _check_karma_limits(self, user_id: int, chat_id: int, karma_change: int, action_type: KarmaActionType) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–∞—Ä–º—ã"""
        # –õ–∏–º–∏—Ç –∫–∞—Ä–º—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å
        if action_type == KarmaActionType.MESSAGE and karma_change > 0:
            today = datetime.now().date().isoformat()
            limit_key = f"{user_id}_{chat_id}_{today}"
            
            current_daily = self.daily_limits.get(limit_key, 0)
            if current_daily >= self.settings.daily_message_karma_limit:
                return False
            
            self.daily_limits[limit_key] = current_daily + karma_change
        
        return True
    
    async def _check_achievements(self, user_id: int, chat_id: int, new_karma: int, action_type: KarmaActionType):
        """üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º –∫–∞—Ä–º—ã
        milestones = [50, 100, 250, 500, 1000]
        for milestone in milestones:
            if new_karma >= milestone:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ
                existing = await self.db.fetch_one("""
                    SELECT id FROM karma_achievements 
                    WHERE user_id = ? AND chat_id = ? AND achievement_type = ?
                """, (user_id, chat_id, f"karma_{milestone}"))
                
                if not existing:
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    await self.db.execute("""
                        INSERT INTO karma_achievements 
                        (user_id, chat_id, achievement_type, karma_bonus)
                        VALUES (?, ?, ?, ?)
                    """, (user_id, chat_id, f"karma_{milestone}", 20))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä–º—É
                    await self.add_karma(user_id, chat_id, KarmaActionType.ACHIEVEMENT_BONUS, 
                                       f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {milestone} –∫–∞—Ä–º—ã", custom_value=20)
    
    async def _load_karma_cache(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∫–∞—Ä–º—ã"""
        try:
            karma_data = await self.db.fetch_all("SELECT * FROM user_karma")
            
            for row in karma_data:
                user_karma = UserKarma(
                    user_id=row['user_id'],
                    chat_id=row['chat_id'],
                    karma=row['karma'],
                    level=row['level'],
                    total_positive=row['total_positive'],
                    total_negative=row['total_negative'],
                    message_count=row['message_count'],
                    last_activity=datetime.fromisoformat(row['last_activity']),
                    created_at=datetime.fromisoformat(row['created_at'])
                )
                
                self.user_karma_cache[(row['user_id'], row['chat_id'])] = user_karma
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(karma_data)} –∑–∞–ø–∏—Å–µ–π –∫–∞—Ä–º—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∫–∞—Ä–º—ã: {e}")
    
    async def _load_settings(self):
        """‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        pass
    
    async def get_karma_stats(self, chat_id: Optional[int] = None) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã"""
        try:
            if chat_id:
                stats = await self.db.fetch_one("""
                    SELECT 
                        COUNT(*) as total_users,
                        AVG(karma) as avg_karma,
                        MAX(karma) as max_karma,
                        MIN(karma) as min_karma,
                        SUM(message_count) as total_messages
                    FROM user_karma 
                    WHERE chat_id = ?
                """, (chat_id,))
            else:
                stats = await self.db.fetch_one("""
                    SELECT 
                        COUNT(*) as total_users,
                        AVG(karma) as avg_karma,
                        MAX(karma) as max_karma,
                        MIN(karma) as min_karma,
                        SUM(message_count) as total_messages
                    FROM user_karma
                """)
            
            return {
                'total_users': stats['total_users'],
                'average_karma': round(stats['avg_karma'] or 0, 1),
                'max_karma': stats['max_karma'] or 0,
                'min_karma': stats['min_karma'] or 0,
                'total_messages': stats['total_messages'] or 0,
                'cached_users': len(self.user_karma_cache)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã: {e}")
            return {}


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "KarmaManager",
    "KarmaActionType", 
    "KarmaLevel",
    "KarmaSettings",
    "UserKarma"
]