#!/usr/bin/env python3
"""
üé≠ CUSTOM PERSONALITY SYSTEM v3.2 - –¢–û–õ–¨–ö–û –ì–†–£–ü–ü–´ –ò –ê–î–ú–ò–ù–´
üöÄ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∂–µ—Å—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞

–ù–û–í–û–ï –í v3.2:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞
‚Ä¢ –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –æ—Ç–∫–∞–∑
‚Ä¢ –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
"""

import asyncio
import logging
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import aiosqlite

logger = logging.getLogger(__name__)

class CustomPersonalityManager:
    """üé≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, db_service, config, ai_service=None):
        self.db = db_service
        self.config = config
        self.ai_service = ai_service
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.active_personalities = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.max_personality_length = 500
        self.groups_only = True  # –ù–û–í–û–ï: —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã
        self.admin_exception = True  # –ù–û–í–û–ï: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        
        logger.info("üé≠ CustomPersonalityManager v3.2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã)")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            await self._create_tables()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –∫—ç—à
            await self._load_active_personalities()
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v3.2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            raise
    
    async def _create_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø
            await self.db.execute("""
                CREATE TABLE IF NOT EXISTS custom_personalities (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER NOT NULL,
                    admin_id INTEGER NOT NULL,
                    personality_name TEXT NOT NULL,
                    personality_description TEXT NOT NULL,
                    system_prompt TEXT NOT NULL,
                    is_active BOOLEAN DEFAULT FALSE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await self.db.execute("""
                CREATE INDEX IF NOT EXISTS idx_personalities_chat_active 
                ON custom_personalities(chat_id, is_active)
            """)
            
            await self.db.execute("""
                CREATE INDEX IF NOT EXISTS idx_personalities_admin 
                ON custom_personalities(admin_id, chat_id)
            """)
            
            logger.info("üìã –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ–∑–¥–∞–Ω—ã (v3.2)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            raise
    
    async def _load_active_personalities(self):
        """üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫—ç—à"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            results = await self.db.fetch_all("""
                SELECT chat_id, admin_id, personality_name, personality_description, 
                       system_prompt
                FROM custom_personalities 
                WHERE is_active = TRUE
            """)
            
            for row in results:
                chat_id = row['chat_id']
                
                personality_data = {
                    'id': personality_id,
                    'name': name,
                    'description': description,  # <--- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å!
                    'system_prompt': system_prompt,
                    'chat_id': chat_id,
                    'user_id': user_id,
                    'admin_id': admin_id,
                    'created_at': datetime.utcnow().isoformat(),
                    'updated_at': datetime.utcnow().isoformat(),
                    'is_active': True,
                    'is_temporary': is_temporary,
                    'usage_count': 0,
                    'last_used': datetime.utcnow().isoformat(),
                    'is_group_personality': chat_id < 0
                }

                
                # –ö–ª—é—á —Ç–æ–ª—å–∫–æ –ø–æ chat_id (–≥—Ä—É–ø–ø–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏)
                key = f"chat_{chat_id}"
                self.active_personalities[key] = personality_data
            
            logger.info(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_personalities)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
    
    def _is_admin(self, user_id: int) -> bool:
        """üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞"""
        return user_id in self.config.bot.admin_ids
    
    def _is_group_chat(self, chat_id: int) -> bool:
        """üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
        return chat_id < 0
    
    async def can_use_personalities(self, user_id: int, chat_id: int) -> tuple[bool, str]:
        """üîê –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_admin = self._is_admin(user_id)
        is_group = self._is_group_chat(chat_id)
        
        if is_admin:
            # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–∑–¥–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if is_group:
                return True, "–ê–¥–º–∏–Ω –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            else:
                return True, "–ê–¥–º–∏–Ω –±–æ—Ç–∞ –≤ –õ–° - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
        
        if is_group:
            # –í –≥—Ä—É–ø–ø–∞—Ö –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            return False, "–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞"
        else:
            # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            return False, "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"
    
    async def set_personality(self, user_id: int, chat_id: int, description: str) -> tuple[bool, str]:
        """üé≠ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        can_use, access_reason = await self.can_use_personalities(user_id, chat_id)
        if not can_use:
            return False, f"üö´ {access_reason}"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if not description or len(description.strip()) < 5:
            return False, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(description) > self.max_personality_length:
            return False, f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {self.max_personality_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        description = description.strip()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = await self._generate_system_prompt(description)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            await self.db.execute("""
                UPDATE custom_personalities 
                SET is_active = FALSE 
                WHERE chat_id = ?
            """, (chat_id,))
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            cache_key = f"chat_{chat_id}"
            if cache_key in self.active_personalities:
                del self.active_personalities[cache_key]
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
            personality_name = self._extract_personality_name(description)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            await self.db.execute("""
                INSERT INTO custom_personalities 
                (chat_id, admin_id, personality_name, personality_description, 
                 system_prompt, is_active)
                VALUES (?, ?, ?, ?, ?, TRUE)
            """, (chat_id, user_id, personality_name, description, system_prompt))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            personality_data = {
                'name': personality_name,
                'description': description,
                'system_prompt': system_prompt,
                'admin_id': user_id
            }
            
            self.active_personalities[cache_key] = personality_data
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
            if self._is_group_chat(chat_id):
                success_msg = f"üé≠ –ì—Ä—É–ø–ø–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                success_msg += f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {personality_name}\n"
                success_msg += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                success_msg += f"üéØ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ —Ä–æ–ª–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            else:
                success_msg = f"üé≠ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                success_msg += f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {personality_name}\n"
                success_msg += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                success_msg += f"üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self.db.track_user_action(
                user_id, chat_id, 
                "personality_set", 
                {"name": personality_name, "chat_type": "group" if self._is_group_chat(chat_id) else "private"}
            )
            
            logger.info(f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {personality_name} –≤ —á–∞—Ç–µ {chat_id}")
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"
    
    def _extract_personality_name(self, description: str) -> str:
        """üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤–∞
        words = description.split()[:4]
        name = " ".join(words)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(name) > 50:
            name = name[:47] + "..."
        
        return name
    
    async def _generate_system_prompt(self, description: str) -> str:
        """üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if self.ai_service:
            try:
                prompt = f"""
                –°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
                "{description}"
                
                –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
                - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                - –ß–µ—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
                - –ù–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤
                - –í–∫–ª—é—á–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                
                –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
                """
                
                response = await self.ai_service.generate_response(
                    prompt, 
                    max_tokens=300,
                    temperature=0.7
                )
                
                if response and len(response.strip()) > 10:
                    return response.strip()
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ AI: {e}")
        
        # Fallback - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        return f"""–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–∞–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {description}

–í–∞–∂–Ω–æ:
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∂–∏–≤–∞–π—Å—è –≤ —ç—Ç—É —Ä–æ–ª—å
- –û—Ç–≤–µ—á–∞–π –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å —Ä–µ—á–∏
- –ë—É–¥—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"""
    
    async def get_active_personality(self, chat_id: int) -> Optional[Dict]:
        """üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —á–∞—Ç–∞"""
        
        cache_key = f"chat_{chat_id}"
        return self.active_personalities.get(cache_key)
    
    async def reset_personality(self, user_id: int, chat_id: int) -> tuple[bool, str]:
        """üîÑ –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        can_use, access_reason = await self.can_use_personalities(user_id, chat_id)
        if not can_use:
            return False, f"üö´ {access_reason}"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            cache_key = f"chat_{chat_id}"
            if cache_key not in self.active_personalities:
                return False, "ü§∑‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂
            await self.db.execute("""
                UPDATE custom_personalities 
                SET is_active = FALSE 
                WHERE chat_id = ? AND is_active = TRUE
            """, (chat_id,))
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            del self.active_personalities[cache_key]
            
            if self._is_group_chat(chat_id):
                return True, "üîÑ –ì—Ä—É–ø–ø–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–±—Ä–æ—à–µ–Ω\n\nü§ñ –ë–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É"
            else:
                return True, "üîÑ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–±—Ä–æ—à–µ–Ω\n\nü§ñ –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º: –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"
    
    async def get_admin_personalities(self, admin_id: int) -> List[Dict]:
        """üëë –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º"""
        try:
            results = await self.db.fetch_all("""
                SELECT personality_name, personality_description, chat_id,
                       is_active, created_at
                FROM custom_personalities 
                WHERE admin_id = ? 
                ORDER BY created_at DESC
                LIMIT 20
            """, (admin_id,))
            
            return results if results else []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∞–¥–º–∏–Ω–∞: {e}")
            return []
    
    async def get_chat_personality_info(self, chat_id: int) -> Optional[Dict]:
        """üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ —á–∞—Ç–∞"""
        try:
            result = await self.db.fetch_one("""
                SELECT personality_name, personality_description, 
                       admin_id, created_at
                FROM custom_personalities 
                WHERE chat_id = ? AND is_active = TRUE
            """, (chat_id,))
            
            if result:
                return {
                    'name': result['personality_name'],
                    'description': result['personality_description'],
                    'admin_id': result['admin_id'],
                    'created_at': result['created_at']
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ: {e}")
            return None
    
    async def get_statistics(self) -> Dict:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            total_result = await self.db.fetch_one("""
                SELECT COUNT(*) as count FROM custom_personalities
            """)
            stats['total_personalities'] = total_result['count'] if total_result else 0
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            active_result = await self.db.fetch_one("""
                SELECT COUNT(*) as count FROM custom_personalities WHERE is_active = TRUE
            """)
            stats['active_personalities'] = active_result['count'] if active_result else 0
            
            # –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
            group_result = await self.db.fetch_one("""
                SELECT COUNT(*) as count FROM custom_personalities 
                WHERE is_active = TRUE AND chat_id < 0
            """)
            stats['group_chats'] = group_result['count'] if group_result else 0
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ (–≤ –õ–°)
            test_result = await self.db.fetch_one("""
                SELECT COUNT(*) as count FROM custom_personalities 
                WHERE is_active = TRUE AND chat_id > 0
            """)
            stats['test_personalities'] = test_result['count'] if test_result else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def is_personality_active(self, chat_id: int) -> bool:
        """‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —á–∞—Ç–µ"""
        cache_key = f"chat_{chat_id}"
        return cache_key in self.active_personalities
    
    async def cleanup_old_personalities(self, days: int = 30):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            await self.db.execute("""
                DELETE FROM custom_personalities 
                WHERE is_active = FALSE AND created_at < ?
            """, (cutoff_date,))
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async def create_personality_manager(db_service, config, ai_service=None) -> CustomPersonalityManager:
    """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    manager = CustomPersonalityManager(db_service, config, ai_service)
    await manager.initialize()
    return manager