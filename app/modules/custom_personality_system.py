#!/usr/bin/env python3
"""
üé≠ CUSTOM AI PERSONALITY v2.0 - –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
üöÄ –ü—Ä–æ–ø–∏—Å—ã–≤–∞–π –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–µ–∫—Å—Ç–æ–º: "/be —Ç—ã –∫—Ä—É—Ç–æ–π —Ö–∞–∫–µ—Ä –∏–∑ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞"

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
"""

import logging
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import asyncio
import openai

logger = logging.getLogger(__name__)


@dataclass
class CustomPersonality:
    """üé≠ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂"""
    id: str
    description: str  # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    system_prompt: str  # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    chat_id: int
    user_id: int
    created_at: datetime
    is_active: bool = True
    is_temporary: bool = False  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    usage_count: int = 0
    last_used: Optional[datetime] = None


class CustomPersonalityManager:
    """üé≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, db_service, config, ai_service=None):
        self.db = db_service
        self.config = config
        self.ai_service = ai_service
        self.active_personalities = {}  # chat_id -> CustomPersonality
        self.user_personalities_history = {}  # user_id -> List[CustomPersonality]
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_templates = {
            "personality": """–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è: "{description}"

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚Ä¢ –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –í–∫–ª—é—á–∏ –≤–æ–∑—Ä–∞—Å—Ç, —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, —Å—Ç–∏–ª—å —Ä–µ—á–∏
‚Ä¢ –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∂–∏–≤–æ—Å—Ç—å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π "–¢—ã" –æ–±—Ä–∞—â–µ–Ω–∏–µ
‚Ä¢ –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.""",
            
            "analysis": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: "{description}"

–í—ã–¥–µ–ª–∏:
1. –ü—Ä–æ—Ñ–µ—Å—Å–∏—é/—Ä–æ–ª—å
2. –í–æ–∑—Ä–∞—Å—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ)
3. –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
4. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
5. –ò–Ω—Ç–µ—Ä–µ—Å—ã

–§–æ—Ä–º–∞—Ç: JSON —Å –∫–ª—é—á–∞–º–∏: profession, age, traits, speech_style, interests"""
        }
        
        logger.info("üé≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_custom_personality_tables()
        await self._load_active_personalities()
        await self._load_user_histories()
        logger.info("üé≠ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    async def _create_custom_personality_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        tables = [
            """
            CREATE TABLE IF NOT EXISTS custom_personalities (
                id TEXT PRIMARY KEY,
                description TEXT NOT NULL,
                system_prompt TEXT NOT NULL,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE,
                is_temporary BOOLEAN DEFAULT FALSE,
                usage_count INTEGER DEFAULT 0,
                last_used DATETIME
            )
            """,
            
            """
            CREATE TABLE IF NOT EXISTS personality_usage_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                personality_id TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                message_count INTEGER DEFAULT 1,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (personality_id) REFERENCES custom_personalities (id)
            )
            """
        ]
        
        for table_sql in tables:
            await self.db.execute(table_sql)
    
    async def create_personality_from_description(self, description: str, chat_id: int, user_id: int, is_temporary: bool = False) -> Optional[CustomPersonality]:
        """üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ AI
            system_prompt = await self._generate_system_prompt(description)
            
            if not system_prompt:
                # Fallback - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
                system_prompt = f"–¢—ã {description}. –û—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é, –±—É–¥—å –∂–∏–≤—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."
            
            # –°–æ–∑–¥–∞–µ–º ID
            personality_id = f"custom_{user_id}_{int(datetime.now().timestamp())}"
            
            personality = CustomPersonality(
                id=personality_id,
                description=description,
                system_prompt=system_prompt,
                chat_id=chat_id,
                user_id=user_id,
                created_at=datetime.now(),
                is_temporary=is_temporary
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute("""
                INSERT INTO custom_personalities 
                (id, description, system_prompt, chat_id, user_id, is_temporary)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                personality.id,
                personality.description,
                personality.system_prompt,
                personality.chat_id,
                personality.user_id,
                personality.is_temporary
            ))
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º
            self.active_personalities[chat_id] = personality
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_personalities_history:
                self.user_personalities_history[user_id] = []
            self.user_personalities_history[user_id].append(personality)
            
            logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {description[:50]}... –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return personality
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return None
    
    async def _generate_system_prompt(self, description: str) -> Optional[str]:
        """üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        if not self.ai_service or not hasattr(self.ai_service, 'openai_client') or not self.ai_service.openai_client:
            return None
        
        try:
            prompt = self.prompt_templates["personality"].format(description=description)
            
            response = await asyncio.to_thread(
                self.ai_service.openai_client.chat.completions.create,
                model="gpt-4o-mini",
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=300
            )
            
            system_prompt = response.choices[0].message.content.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
            if len(system_prompt) > 500:
                system_prompt = system_prompt[:500] + "..."
            
            logger.info(f"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è: {description[:30]}...")
            return system_prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return None
    
    async def set_active_personality(self, chat_id: int, personality_id: str) -> bool:
        """üé≠ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
            personality_data = await self.db.fetch_one(
                "SELECT * FROM custom_personalities WHERE id = ?", 
                (personality_id,)
            )
            
            if not personality_data:
                return False
            
            personality = CustomPersonality(
                id=personality_data['id'],
                description=personality_data['description'],
                system_prompt=personality_data['system_prompt'],
                chat_id=personality_data['chat_id'],
                user_id=personality_data['user_id'],
                created_at=datetime.fromisoformat(personality_data['created_at']),
                is_temporary=personality_data['is_temporary'],
                usage_count=personality_data['usage_count'],
                last_used=datetime.fromisoformat(personality_data['last_used']) if personality_data['last_used'] else None
            )
            
            self.active_personalities[chat_id] = personality
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.db.execute("""
                UPDATE custom_personalities 
                SET usage_count = usage_count + 1, last_used = ?
                WHERE id = ?
            """, (datetime.now().isoformat(), personality_id))
            
            logger.info(f"üé≠ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {personality.description[:30]}...")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False
    
    def get_active_personality(self, chat_id: int) -> Optional[CustomPersonality]:
        """üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        return self.active_personalities.get(chat_id)
    
    async def get_user_personalities(self, user_id: int, limit: int = 10) -> List[Dict]:
        """üë§ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            personalities_data = await self.db.fetch_all("""
                SELECT * FROM custom_personalities 
                WHERE user_id = ? 
                ORDER BY last_used DESC, created_at DESC
                LIMIT ?
            """, (user_id, limit))
            
            result = []
            for row in personalities_data:
                result.append({
                    'id': row['id'],
                    'description': row['description'],
                    'created_at': row['created_at'],
                    'usage_count': row['usage_count'],
                    'last_used': row['last_used'],
                    'is_temporary': row['is_temporary']
                })
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            return []
    
    async def delete_personality(self, personality_id: str, user_id: int) -> bool:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            personality_data = await self.db.fetch_one(
                "SELECT user_id FROM custom_personalities WHERE id = ?", 
                (personality_id,)
            )
            
            if not personality_data or personality_data['user_id'] != user_id:
                return False
            
            # –£–¥–∞–ª—è–µ–º
            await self.db.execute("DELETE FROM custom_personalities WHERE id = ?", (personality_id,))
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
            for chat_id, personality in self.active_personalities.items():
                if personality.id == personality_id:
                    del self.active_personalities[chat_id]
                    break
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {personality_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False
    
    async def clear_active_personality(self, chat_id: int) -> bool:
        """üîÑ –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if chat_id in self.active_personalities:
            del self.active_personalities[chat_id]
            logger.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return True
        return False
    
    async def _load_active_personalities(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            
            personalities_data = await self.db.fetch_all("""
                SELECT * FROM custom_personalities 
                WHERE last_used > ? OR created_at > ?
                ORDER BY last_used DESC
            """, (week_ago, week_ago))
            
            for row in personalities_data:
                personality = CustomPersonality(
                    id=row['id'],
                    description=row['description'],
                    system_prompt=row['system_prompt'],
                    chat_id=row['chat_id'],
                    user_id=row['user_id'],
                    created_at=datetime.fromisoformat(row['created_at']),
                    is_temporary=row['is_temporary'],
                    usage_count=row['usage_count'],
                    last_used=datetime.fromisoformat(row['last_used']) if row['last_used'] else None
                )
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
                self.active_personalities[personality.chat_id] = personality
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(personalities_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
    
    async def _load_user_histories(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            personalities_data = await self.db.fetch_all("""
                SELECT * FROM custom_personalities 
                ORDER BY user_id, created_at DESC
            """)
            
            for row in personalities_data:
                user_id = row['user_id']
                
                personality = CustomPersonality(
                    id=row['id'],
                    description=row['description'],
                    system_prompt=row['system_prompt'],
                    chat_id=row['chat_id'],
                    user_id=row['user_id'],
                    created_at=datetime.fromisoformat(row['created_at']),
                    is_temporary=row['is_temporary'],
                    usage_count=row['usage_count'],
                    last_used=datetime.fromisoformat(row['last_used']) if row['last_used'] else None
                )
                
                if user_id not in self.user_personalities_history:
                    self.user_personalities_history[user_id] = []
                
                self.user_personalities_history[user_id].append(personality)
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {len(self.user_personalities_history)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def get_personality_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            stats = await self.db.fetch_one("""
                SELECT 
                    COUNT(*) as total_personalities,
                    COUNT(CASE WHEN is_temporary = 1 THEN 1 END) as temporary_count,
                    AVG(usage_count) as avg_usage,
                    MAX(usage_count) as max_usage
                FROM custom_personalities
            """)
            
            active_count = len(self.active_personalities)
            users_count = len(self.user_personalities_history)
            
            return {
                'total_personalities': stats['total_personalities'],
                'active_personalities': active_count,
                'temporary_personalities': stats['temporary_count'],
                'users_with_personalities': users_count,
                'average_usage': round(stats['avg_usage'] or 0, 1),
                'max_usage': stats['max_usage'] or 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "CustomPersonalityManager",
    "CustomPersonality"
]