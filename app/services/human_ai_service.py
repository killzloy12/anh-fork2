#!/usr/bin/env python3
"""
üß† HUMAN-LIKE AI SERVICE v4.0 - –° –ü–†–û–ò–ó–í–û–õ–¨–ù–´–ú–ò –ü–ï–†–°–û–ù–ê–ñ–ê–ú–ò
üöÄ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ä–º—ã

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –û–±—ã—á–Ω—ã–µ AI –æ—Ç–≤–µ—Ç—ã (GPT-4o-mini)
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ Fallback –±–µ–∑ OpenAI
"""

import logging
import asyncio
import openai
import random
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ConversationContext:
    """üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id: int
    chat_id: int
    messages_history: List[Dict] = None
    user_name: str = ""
    chat_type: str = "private"
    topic: str = "–æ–±—â–µ–Ω–∏–µ"
    mood: str = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"
    formality_level: float = 0.5
    last_interaction: datetime = None
    
    def __post_init__(self):
        if self.messages_history is None:
            self.messages_history = []
        if self.last_interaction is None:
            self.last_interaction = datetime.now()


def create_conversation_context(user_id: int, chat_id: int, user_name: str = "") -> ConversationContext:
    """üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return ConversationContext(
        user_id=user_id,
        chat_id=chat_id,
        user_name=user_name,
        last_interaction=datetime.now()
    )


class EmotionAnalyzer:
    """üòä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π"""
    
    def __init__(self):
        self.emotion_keywords = {
            "—Ä–∞–¥–æ—Å—Ç—å": ["—Ä–∞–¥", "—Å—á–∞—Å—Ç–ª–∏–≤", "–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "—É—Ä–∞", "üòä", "üòÑ", "üéâ", "üëç"],
            "–≥—Ä—É—Å—Ç—å": ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "–ø–ª–æ—Ö–æ", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "üò¢", "üòû", "üíî", "–≥—Ä—É—â—É"],
            "–∑–ª–æ—Å—Ç—å": ["–∑–ª–æ–π", "–±–µ—Å–∏—Ç", "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç", "–Ω–µ–Ω–∞–≤–∏–∂—É", "üò†", "üò°", "ü§¨", "—è—Ä–æ—Å—Ç—å"],
            "—É–¥–∏–≤–ª–µ–Ω–∏–µ": ["–≤–∞—É", "–æ–≥–æ", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "—É–¥–∏–≤–ª–µ–Ω", "üò≤", "üòÆ", "ü§Ø"],
            "—Å—Ç—Ä–∞—Ö": ["–±–æ—é—Å—å", "—Å—Ç—Ä–∞—à–Ω–æ", "–ø—É–≥–∞–µ—Ç", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "üò®", "üò∞", "üò±"],
            "–∏–Ω—Ç–µ—Ä–µ—Å": ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ª—é–±–æ–ø—ã—Ç–Ω–æ", "—Ö–æ—á—É –∑–Ω–∞—Ç—å", "—Ä–∞—Å—Å–∫–∞–∂–∏", "ü§î", "üí≠"]
        }
    
    def analyze(self, text: str) -> Tuple[str, float]:
        """üéØ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ"""
        text_lower = text.lower()
        emotion_scores = {}
        
        for emotion, keywords in self.emotion_keywords.items():
            score = 0
            for keyword in keywords:
                if keyword in text_lower:
                    score += 1
            emotion_scores[emotion] = score
        
        if not any(emotion_scores.values()):
            return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", 0.5
        
        best_emotion = max(emotion_scores.keys(), key=lambda k: emotion_scores[k])
        confidence = min(1.0, emotion_scores[best_emotion] / 3)
        
        return best_emotion, confidence


class TopicClassifier:
    """üìö –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º"""
    
    def __init__(self):
        self.topic_keywords = {
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–∫–æ–¥", "python", "javascript", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–±–∞–≥", "—Ñ—É–Ω–∫—Ü–∏—è"],
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–æ—Ñ—Ç", "–∂–µ–ª–µ–∑–æ", "–≥–∞–¥–∂–µ—Ç"],
            "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "–∫–∞—Ä—å–µ—Ä–∞", "–æ—Ñ–∏—Å", "–Ω–∞—á–∞–ª—å–Ω–∏–∫", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ø—Ä–æ–µ–∫—Ç"],
            "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": ["–ª—é–±–æ–≤—å", "—Å–µ–º—å—è", "–¥—Ä—É–∑—å—è", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "—Å–≤–∏–¥–∞–Ω–∏–µ", "–ø–∞—Ä–µ–Ω—å", "–¥–µ–≤—É—à–∫–∞"],
            "—É—á–µ–±–∞": ["—É—á–µ–±–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—ç–∫–∑–∞–º–µ–Ω", "–ª–µ–∫—Ü–∏—è", "—Å—Ç—É–¥–µ–Ω—Ç", "—à–∫–æ–ª–∞"],
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["—Ñ–∏–ª—å–º", "–∏–≥—Ä–∞", "–º—É–∑—ã–∫–∞", "–∫–Ω–∏–≥–∞", "—Å–µ—Ä–∏–∞–ª", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
            "–∑–¥–æ—Ä–æ–≤—å–µ": ["–∑–¥–æ—Ä–æ–≤—å–µ", "–±–æ–ª–µ–∑–Ω—å", "–≤—Ä–∞—á", "–ª–µ—á–µ–Ω–∏–µ", "—Å–ø–æ—Ä—Ç", "–¥–∏–µ—Ç–∞"],
            "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": ["–∂–∏–∑–Ω—å", "—Å–º—ã—Å–ª", "—Å—á–∞—Å—Ç—å–µ", "–º—É–¥—Ä–æ—Å—Ç—å", "–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å", "—Ü–µ–ª—å"]
        }
    
    def classify(self, text: str) -> Tuple[str, float]:
        """üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã"""
        text_lower = text.lower()
        topic_scores = {}
        
        for topic, keywords in self.topic_keywords.items():
            score = 0
            for keyword in keywords:
                if keyword in text_lower:
                    score += 1
            topic_scores[topic] = score
        
        if not any(topic_scores.values()):
            return "–æ–±—â–µ–Ω–∏–µ", 0.5
        
        best_topic = max(topic_scores.keys(), key=lambda k: topic_scores[k])
        confidence = min(1.0, topic_scores[best_topic] / 2)
        
        return best_topic, confidence


class CasualResponseGenerator:
    """üòé –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.casual_responses = {
            "greeting": ["–ü—Ä–∏–≤–µ—Ç!", "–î–∞—Ä–æ–≤–∞!", "–•–∞–π!", "–ô–æ!", "–°–∞–ª—é—Ç!"],
            "agreement": ["–î–∞", "–¢–æ—á–Ω–æ", "–°–æ–≥–ª–∞—Å–µ–Ω", "–£–≥—É", "–ê–≥–∞"],
            "neutral": ["–ü–æ–Ω—è—Ç–Ω–æ", "–Ø—Å–Ω–æ", "–•–º", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?"],
            "questions": ["–ê —Ç—ã —á—Ç–æ –¥—É–º–∞–µ—à—å?", "–†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ –ø–æ—á–µ–º—É?"],
            "goodbye": ["–ü–æ–∫–∞!", "–î–æ –≤—Å—Ç—Ä–µ—á–∏!", "–£–≤–∏–¥–∏–º—Å—è!", "–ë–∞–π!"]
        }
    
    def generate_casual_response(self, message: str, emotion: str, topic: str, context: ConversationContext) -> str:
        """üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', 'hello']):
            return random.choice(self.casual_responses["greeting"])
        
        # –ü—Ä–æ—â–∞–Ω–∏—è
        if any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', 'goodbye', 'bye']):
            return random.choice(self.casual_responses["goodbye"])
        
        # –í–æ–ø—Ä–æ—Å—ã
        if '?' in message:
            return random.choice(self.casual_responses["questions"])
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if emotion == "—Ä–∞–¥–æ—Å—Ç—å":
            return "–û—Ç–ª–∏—á–Ω–æ! üòä"
        elif emotion == "–≥—Ä—É—Å—Ç—å":
            return "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è üòî"
        elif emotion == "–∑–ª–æ—Å—Ç—å":
            return "–ü–æ–Ω–∏–º–∞—é, –±–µ—Å–∏—Ç..."
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if topic == "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ":
            return "–ö–æ–¥ —Ä—É–ª–∏—Ç! üíª"
        elif topic == "—Ä–∞–±–æ—Ç–∞":
            return "–†–∞–±–æ—Ç–∞ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ üè¢"
        
        # –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        return random.choice(self.casual_responses["neutral"])


class HumanLikeAI:
    """üß† Human-like AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, config):
        self.config = config
        self.openai_client = None
        self.emotion_analyzer = EmotionAnalyzer()
        self.topic_classifier = TopicClassifier()
        self.response_generator = CasualResponseGenerator()
        
        self._initialize_openai()
        logger.info("üß† Human-like AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_openai(self):
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI"""
        if hasattr(self.config.ai, 'openai_api_key') and self.config.ai.openai_api_key:
            try:
                self.openai_client = openai.OpenAI(api_key=self.config.ai.openai_api_key)
                logger.info("üß† OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.openai_client = None
        else:
            logger.info("üß† OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ fallback")
    
    def analyze_emotion(self, message: str) -> Tuple[str, float]:
        """üòä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–∏"""
        return self.emotion_analyzer.analyze(message)
    
    def classify_topic(self, message: str) -> Tuple[str, float]:
        """üìö –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã"""
        return self.topic_classifier.classify(message)
    
    async def generate_human_response(self, message: str, context: ConversationContext) -> str:
        """ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            emotion, emotion_confidence = self.analyze_emotion(message)
            topic, topic_confidence = self.classify_topic(message)
            
            context.topic = topic
            context.mood = emotion
            
            logger.info(f"üß† –ê–Ω–∞–ª–∏–∑: —ç–º–æ—Ü–∏—è={emotion}, —Ç–µ–º–∞={topic}")
            
            if self.openai_client:
                try:
                    response = await self._generate_openai_response(message, context, emotion, topic)
                    if response:
                        return response
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è OpenAI –æ—à–∏–±–∫–∞: {e}")
            
            # Fallback
            response = self.response_generator.generate_casual_response(message, emotion, topic, context)
            logger.info(f"üß† Fallback –æ—Ç–≤–µ—Ç: —Ç–µ–º–∞={topic}, —ç–º–æ—Ü–∏—è={emotion}")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._generate_error_response()
    
    async def generate_response_with_custom_personality(self, message: str, context: ConversationContext, chat_id: int) -> str:
        """üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            custom_personality = None
            
            # –ò—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
            import sys
            if 'modules' in globals():
                modules = globals()['modules']
            elif hasattr(sys.modules.get('__main__'), 'modules'):
                modules = sys.modules.get('__main__').modules
            else:
                modules = None
            
            if modules and hasattr(modules, 'custom_personality_manager'):
                custom_pm = modules.custom_personality_manager
                custom_personality = custom_pm.get_active_personality(chat_id)
            elif modules and 'custom_personality_manager' in modules:
                custom_pm = modules['custom_personality_manager']
                custom_personality = custom_pm.get_active_personality(chat_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if custom_personality:
                return await self._generate_custom_personality_response(message, context, custom_personality)
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            return await self.generate_human_response(message, context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: {e}")
            return await self.generate_human_response(message, context)
    
    async def _generate_custom_personality_response(self, message: str, context: ConversationContext, custom_personality) -> str:
        """üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            emotion, emotion_confidence = self.analyze_emotion(message)
            topic, topic_confidence = self.classify_topic(message)
            
            context.topic = topic
            context.mood = emotion
            
            logger.info(f"üé≠ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {custom_personality.description[:30]}... (—ç–º–æ—Ü–∏—è={emotion}, —Ç–µ–º–∞={topic})")
            
            # –ï—Å–ª–∏ OpenAI –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.openai_client:
                try:
                    response = await self._generate_custom_openai_response(message, context, emotion, topic, custom_personality)
                    if response:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        try:
                            import sys
                            if 'modules' in globals():
                                modules = globals()['modules']
                            elif hasattr(sys.modules.get('__main__'), 'modules'):
                                modules = sys.modules.get('__main__').modules
                            
                            if modules and hasattr(modules, 'custom_personality_manager'):
                                custom_pm = modules.custom_personality_manager
                                await custom_pm.db.execute("""
                                    UPDATE custom_personalities 
                                    SET usage_count = usage_count + 1, last_used = ?
                                    WHERE id = ?
                                """, (datetime.now().isoformat(), custom_personality.id))
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
                        
                        return response
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è OpenAI –æ—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            
            # Fallback –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            return self._generate_custom_personality_fallback(message, emotion, topic, custom_personality)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return self._generate_error_response()
    
    async def _generate_custom_openai_response(self, message: str, context: ConversationContext, emotion: str, topic: str, custom_personality) -> Optional[str]:
        """üé≠ OpenAI –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–ø—Ä—è–º—É—é
            system_prompt = custom_personality.system_prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            emotion_context = ""
            if emotion != "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è":
                emotion_context = f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç {emotion}. –£—á—Ç–∏ —ç—Ç–æ –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã
            topic_context = ""
            if topic != "–æ–±—â–µ–Ω–∏–µ":
                topic_context = f"\n–¢–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {topic}."
            
            final_prompt = f"{system_prompt}{emotion_context}{topic_context}\n\n–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
            
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model=self.config.ai.default_model,
                messages=[
                    {"role": "system", "content": final_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.9,
                max_tokens=150
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return None
    
    def _generate_custom_personality_fallback(self, message: str, emotion: str, topic: str, custom_personality) -> str:
        """üé≠ Fallback –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        message_lower = message.lower()
        
        # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        description = custom_personality.description.lower()
        
        # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤', '–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', 'hello']):
            if '—Ö–∞–∫–µ—Ä' in description:
                return "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –≤–∑–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É? üíª"
            elif '–±–∞–±—É—à–∫–∞' in description:
                return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏–ª—ã–π! –ß–∞—é —Ö–æ—á–µ—à—å? üëµüçµ"
            elif '–ø–∏—Ä–∞—Ç' in description:
                return "–ô–æ-—Ö–æ-—Ö–æ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–∞—Ç—Ä–æ—Å! ‚öì"
            elif '—É—á–∏—Ç–µ–ª—å' in description:
                return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–∞–¥–∏—Ç–µ—Å—å, –Ω–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ üìö"
            elif '–≤—Ä–∞—á' in description:
                return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? üë®‚Äç‚öïÔ∏è"
            elif '–ø–æ–≤–∞—Ä' in description:
                return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ö–Ω—é! –ß—Ç–æ –≥–æ—Ç–æ–≤–∏–º? üë®‚Äçüç≥"
            else:
                return f"–ü—Ä–∏–≤–µ—Ç! –Ø {custom_personality.description} üòä"
        
        # 2. –í–æ–ø—Ä–æ—Å—ã
        if '?' in message:
            if '—Ö–∞–∫–µ—Ä' in description:
                return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å... –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ üñ•Ô∏è"
            elif '—Ñ–∏–ª–æ—Å–æ—Ñ' in description:
                return "–ê —á—Ç–æ —Ç—ã —Å–∞–º –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º? ü§î"
            elif '—É—á–∏—Ç–µ–ª—å' in description:
                return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞–∑–±–µ—Ä–µ–º –ø–æ—à–∞–≥–æ–≤–æ üìù"
            else:
                return "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –î–∞–π –ø–æ–¥—É–º–∞—é üí≠"
        
        # 3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        if emotion == "—Ä–∞–¥–æ—Å—Ç—å":
            if '—Å–µ—Ä—å–µ–∑–Ω—ã–π' in description or '—Å—Ç—Ä–æ–≥–∏–π' in description:
                return "–•–æ—Ä–æ—à–æ –≤–∏–¥–µ—Ç—å –≤–∞—à—É —Ä–∞–¥–æ—Å—Ç—å, —Ö–æ—Ç—è –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ üòê"
            else:
                return "–û—Ç–ª–∏—á–Ω–æ! –†–∞–∑–¥–µ–ª—è—é —Ç–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å! üòÑ"
        elif emotion == "–≥—Ä—É—Å—Ç—å":
            if '–¥–æ–±—Ä—ã–π' in description or '–∑–∞–±–æ—Ç–ª–∏–≤—ã–π' in description:
                return "–ù–µ –≥—Ä—É—Å—Ç–∏, –≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ ‚ù§Ô∏è"
            elif '—Å—Ç—Ä–æ–≥–∏–π' in description:
                return "–°–æ–±–µ—Ä–∏—Ç–µ—Å—å. –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–ª—è—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä üí™"
            else:
                return "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞... üòî"
        
        # 4. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ' in topic or '–∫–æ–¥' in message_lower:
            if '—Ö–∞–∫–µ—Ä' in description:
                return "–ö–æ–¥ - —ç—Ç–æ –ø–æ—ç–∑–∏—è! –ö–∞–∫–æ–π —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å? üíª"
            elif '—É—á–∏—Ç–µ–ª—å' in description:
                return "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–∞–∂–Ω—ã–π –Ω–∞–≤—ã–∫! –ò–∑—É—á–∞–µ–º? üìö"
        
        # 5. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        description_words = description.split()
        for word in description_words:
            if word in message_lower and len(word) > 3:
                return f"–û, {word}! –≠—Ç–æ –º–æ—è —Å—Ç–∏—Ö–∏—è! ‚ú®"
        
        # 6. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if '–∫—Ä—É—Ç–æ–π' in description or '–∫—Ä—É—Ç–∞—è' in description:
            return "–î–∞, —è –∫—Ä—É—Ç! –ê —Ç—ã –∫–∞–∫ –¥–µ–ª–∞? üòé"
        elif '–¥–æ–±—Ä—ã–π' in description or '–¥–æ–±—Ä–∞—è' in description:
            return "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ß—Ç–æ –Ω—É–∂–Ω–æ? ü§ó"
        elif '—É–º–Ω—ã–π' in description or '—É–º–Ω–∞—è' in description:
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –†–∞–∑–≤–∏–≤–∞–µ–º –¥–∞–ª—å—à–µ? üß†"
        elif '–≤–µ—Å–µ–ª—ã–π' in description or '–≤–µ—Å–µ–ª–∞—è' in description:
            return "–•–∞—Ö–∞! –†–∞–∑–≤–ª–µ–∫–∞–µ–º—Å—è? üòÑ"
        elif '—Å–µ—Ä—å–µ–∑–Ω—ã–π' in description or '—Å–µ—Ä—å–µ–∑–Ω–∞—è' in description:
            return "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ ü§î"
        
        # 7. Fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
        if len(custom_personality.system_prompt) > 20:
            # –ë–µ—Ä–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            prompt_words = custom_personality.system_prompt.lower().split()
            relevant_words = [w for w in prompt_words if len(w) > 4 and w.isalpha()]
            if relevant_words:
                return f"–ü–æ–Ω–∏–º–∞—é! –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å {relevant_words[0]} ‚ú®"
        
        # 8. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        return f"–ö–∞–∫ {custom_personality.description[:30]}..., —Å–∫–∞–∂—É: –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î"
    
    async def _generate_openai_response(self, message: str, context: ConversationContext, emotion: str, topic: str) -> Optional[str]:
        """ü§ñ OpenAI –æ—Ç–≤–µ—Ç"""
        try:
            system_prompt = f"""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û–±—â–∞–µ—à—å—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ –¥—Ä—É–≥. 
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). 
–¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {emotion}
–¢–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {topic}
–ë—É–¥—å –∂–∏–≤—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–∞–≤—è–∑—á–∏–≤—ã–º."""
            
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model=self.config.ai.default_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.8,
                max_tokens=100
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _generate_error_response(self) -> str:
        """‚ùå –û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        error_responses = [
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... ü§î",
            "–•–º, –æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞ üòÖ",
            "–°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é... üí≠",
            "–î–∞–π —Å–µ–∫—É–Ω–¥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è üîÑ"
        ]
        return random.choice(error_responses)


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "HumanLikeAI",
    "ConversationContext",
    "create_conversation_context"
]