#!/usr/bin/env python3
"""
‚Çø CRYPTO SERVICE v2.0
üí∞ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

import logging
import asyncio
import json
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from cachetools import TTLCache

logger = logging.getLogger(__name__)


class CryptoService:
    """‚Çø –°–µ—Ä–≤–∏—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    def __init__(self, config):
        self.config = config
        self.crypto_config = config.crypto
        
        # –ö—ç—à –¥–ª—è –∫—É—Ä—Å–æ–≤
        self.price_cache = TTLCache(maxsize=1000, ttl=300)  # 5 –º–∏–Ω—É—Ç
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        self.popular_coins = {
            'bitcoin': 'bitcoin',
            'btc': 'bitcoin',
            'ethereum': 'ethereum',
            'eth': 'ethereum',
            'binancecoin': 'binancecoin',
            'bnb': 'binancecoin',
            'cardano': 'cardano',
            'ada': 'cardano',
            'solana': 'solana',
            'sol': 'solana',
            'polkadot': 'polkadot',
            'dot': 'polkadot',
            'chainlink': 'chainlink',
            'link': 'chainlink',
            'litecoin': 'litecoin',
            'ltc': 'litecoin',
            'dogecoin': 'dogecoin',
            'doge': 'dogecoin',
            'toncoin': 'the-open-network',
            'ton': 'the-open-network'
        }
        
        # –ë–∞–∑–∞ URL –¥–ª—è API
        self.base_url = "https://api.coingecko.com/api/v3"
        
        logger.info("‚Çø Crypto Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_crypto_price(self, coin_query: str, user_id: int = None) -> Dict[str, Any]:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
            coin_id = self._normalize_coin_query(coin_query)
            
            if not coin_id:
                return {
                    'error': True,
                    'message': f'–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ "{coin_query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    'suggestions': list(self.popular_coins.keys())[:5]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"price_{coin_id}"
            if cache_key in self.price_cache:
                cached_data = self.price_cache[cache_key]
                cached_data['from_cache'] = True
                return cached_data
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            price_data = await self._fetch_coin_data(coin_id)
            
            if not price_data:
                return {
                    'error': True,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ',
                    'suggestions': list(self.popular_coins.keys())[:3]
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = self._format_price_response(price_data, coin_query, user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.price_cache[cache_key] = result
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {e}")
            return {
                'error': True,
                'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                'details': str(e)
            }
    
    async def get_trending_crypto(self, limit: int = 7) -> Dict[str, Any]:
        """üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        
        try:
            cache_key = "trending_crypto"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self.price_cache:
                return self.price_cache[cache_key]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
            url = f"{self.base_url}/search/trending"
            headers = self._get_headers()
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        trending_coins = data.get('coins', [])[:limit]
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö
                        detailed_coins = []
                        for coin_info in trending_coins:
                            coin_id = coin_info['item']['id']
                            coin_data = await self._fetch_coin_data(coin_id)
                            
                            if coin_data:
                                detailed_coins.append({
                                    'name': coin_data['name'],
                                    'symbol': coin_data['symbol'].upper(),
                                    'price': self._format_price(coin_data['current_price']),
                                    'change_24h': self._format_change(coin_data.get('price_change_percentage_24h', 0)),
                                    'market_cap_rank': coin_data.get('market_cap_rank', 'N/A'),
                                    'market_cap': self._format_market_cap(coin_data.get('market_cap', 0))
                                })
                        
                        result = {
                            'error': False,
                            'trending_coins': detailed_coins,
                            'update_time': datetime.now().strftime('%H:%M'),
                            'source': 'CoinGecko'
                        }
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        self.price_cache[cache_key] = result
                        return result
                    
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API —Ç—Ä–µ–Ω–¥–æ–≤: {resp.status}")
                        return {
                            'error': True,
                            'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'
                        }
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            return {
                'error': True,
                'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤'
            }
    
    async def _fetch_coin_data(self, coin_id: str) -> Optional[Dict]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–µ"""
        
        try:
            url = f"{self.base_url}/coins/{coin_id}"
            params = {
                'localization': 'false',
                'tickers': 'false',
                'market_data': 'true',
                'community_data': 'false',
                'developer_data': 'false',
                'sparkline': 'false'
            }
            
            headers = self._get_headers()
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, headers=headers, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        market_data = data.get('market_data', {})
                        usd_data = market_data.get('current_price', {}).get('usd')
                        
                        if usd_data is None:
                            return None
                        
                        return {
                            'id': data.get('id'),
                            'name': data.get('name'),
                            'symbol': data.get('symbol'),
                            'current_price': usd_data,
                            'market_cap': market_data.get('market_cap', {}).get('usd'),
                            'market_cap_rank': market_data.get('market_cap_rank'),
                            'total_volume': market_data.get('total_volume', {}).get('usd'),
                            'price_change_24h': market_data.get('price_change_24h'),
                            'price_change_percentage_24h': market_data.get('price_change_percentage_24h'),
                            'circulating_supply': market_data.get('circulating_supply'),
                            'total_supply': market_data.get('total_supply'),
                            'ath': market_data.get('ath', {}).get('usd'),
                            'atl': market_data.get('atl', {}).get('usd'),
                            'last_updated': market_data.get('last_updated')
                        }
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API –º–æ–Ω–µ—Ç—ã: {resp.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã {coin_id}: {e}")
            return None
    
    def _normalize_coin_query(self, query: str) -> Optional[str]:
        """üîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –º–æ–Ω–µ—Ç—ã"""
        
        query_lower = query.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        if query_lower in self.popular_coins:
            return self.popular_coins[query_lower]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for key, value in self.popular_coins.items():
            if query_lower in key or key in query_lower:
                return value
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        # (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Ç–æ—á–Ω—ã–π ID –º–æ–Ω–µ—Ç—ã)
        return query_lower if len(query_lower) > 2 else None
    
    def _format_price_response(self, coin_data: Dict, original_query: str, user_id: int = None) -> Dict[str, Any]:
        """üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ —Ü–µ–Ω–µ"""
        
        try:
            price = coin_data['current_price']
            change_24h = coin_data.get('price_change_percentage_24h', 0)
            
            response = {
                'error': False,
                'coin_name': coin_data['name'],
                'symbol': coin_data['symbol'].upper(),
                'price': self._format_price(price),
                'price_raw': price,
                'change_24h': change_24h,
                'change_24h_formatted': self._format_change(change_24h),
                'trend_emoji': self._get_trend_emoji(change_24h),
                'market_cap': self._format_market_cap(coin_data.get('market_cap')),
                'volume_24h': self._format_volume(coin_data.get('total_volume')),
                'market_cap_rank': coin_data.get('market_cap_rank', 'N/A'),
                'last_updated': self._format_last_updated(coin_data.get('last_updated')),
                'price_analysis': self._generate_price_analysis(coin_data),
                'personal_insights': self._generate_personal_insights(coin_data, user_id)
            }
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'error': True,
                'message': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ'
            }
    
    def _format_price(self, price: float) -> str:
        """üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        
        if price >= 1:
            return f"${price:,.2f}"
        elif price >= 0.01:
            return f"${price:.4f}"
        elif price >= 0.0001:
            return f"${price:.6f}"
        else:
            return f"${price:.8f}"
    
    def _format_change(self, change: float) -> str:
        """üìà –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        
        if change > 0:
            return f"+{change:.2f}%"
        else:
            return f"{change:.2f}%"
    
    def _get_trend_emoji(self, change: float) -> str:
        """üìä –≠–º–æ–¥–∑–∏ —Ç—Ä–µ–Ω–¥–∞"""
        
        if change > 5:
            return "üöÄ"
        elif change > 0:
            return "üìà"
        elif change > -5:
            return "üìâ"
        else:
            return "üí•"
    
    def _format_market_cap(self, market_cap: Optional[float]) -> str:
        """üíé –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        if not market_cap:
            return "N/A"
        
        if market_cap >= 1_000_000_000_000:  # –¢—Ä–∏–ª–ª–∏–æ–Ω
            return f"${market_cap/1_000_000_000_000:.2f}T"
        elif market_cap >= 1_000_000_000:  # –ú–∏–ª–ª–∏–∞—Ä–¥
            return f"${market_cap/1_000_000_000:.2f}B"
        elif market_cap >= 1_000_000:  # –ú–∏–ª–ª–∏–æ–Ω
            return f"${market_cap/1_000_000:.2f}M"
        else:
            return f"${market_cap:,.0f}"
    
    def _format_volume(self, volume: Optional[float]) -> str:
        """üì¶ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤"""
        
        if not volume:
            return "N/A"
        
        if volume >= 1_000_000_000:  # –ú–∏–ª–ª–∏–∞—Ä–¥
            return f"${volume/1_000_000_000:.2f}B"
        elif volume >= 1_000_000:  # –ú–∏–ª–ª–∏–æ–Ω
            return f"${volume/1_000_000:.2f}M"
        else:
            return f"${volume:,.0f}"
    
    def _format_last_updated(self, last_updated: Optional[str]) -> str:
        """‚è∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        if not last_updated:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        try:
            update_time = datetime.fromisoformat(last_updated.replace('Z', '+00:00'))
            now = datetime.now(update_time.tzinfo)
            diff = now - update_time
            
            if diff.seconds < 60:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            elif diff.seconds < 3600:
                return f"{diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
            else:
                return update_time.strftime('%H:%M')
                
        except Exception:
            return "–Ω–µ–¥–∞–≤–Ω–æ"
    
    def _generate_price_analysis(self, coin_data: Dict) -> str:
        """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω—ã"""
        
        try:
            change_24h = coin_data.get('price_change_percentage_24h', 0)
            rank = coin_data.get('market_cap_rank')
            
            analysis_parts = []
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if change_24h > 10:
                analysis_parts.append("üî• –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ —Å—É—Ç–∫–∏!")
            elif change_24h > 5:
                analysis_parts.append("üìà –•–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç –∑–∞ –¥–µ–Ω—å.")
            elif change_24h > 0:
                analysis_parts.append("‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞.")
            elif change_24h > -5:
                analysis_parts.append("üìä –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ.")
            elif change_24h > -10:
                analysis_parts.append("üìâ –ó–∞–º–µ—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã.")
            else:
                analysis_parts.append("‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ!")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            if rank and rank <= 10:
                analysis_parts.append(f"üèÜ –¢–æ–ø-{rank} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")
            elif rank and rank <= 50:
                analysis_parts.append(f"‚≠ê #{rank} –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
            elif rank and rank <= 100:
                analysis_parts.append(f"üìä #{rank} –º–µ—Å—Ç–æ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")
            
            return " ".join(analysis_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return "üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    
    def _generate_personal_insights(self, coin_data: Dict, user_id: int = None) -> List[str]:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        
        insights = []
        
        try:
            change_24h = coin_data.get('price_change_percentage_24h', 0)
            price = coin_data.get('current_price', 0)
            
            # –û–±—â–∏–µ –∏–Ω—Å–∞–π—Ç—ã
            if change_24h > 15:
                insights.append("‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!")
            elif change_24h < -15:
                insights.append("üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏.")
            
            if price > 1000:
                insights.append("üí∞ –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä–æ–±–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏.")
            elif price < 1:
                insights.append("üîç –ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ - –∏–∑—É—á–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ.")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            insights.append("üìö –í—Å–µ–≥–¥–∞ –∏–∑—É—á–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")
            
            return insights[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∏–Ω—Å–∞–π—Ç–∞
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return ["üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä—ã–Ω–∫–æ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."]
    
    def _get_headers(self) -> Dict[str, str]:
        """üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        headers = {
            'User-Agent': 'Enhanced-Telegram-Bot/2.0',
            'Accept': 'application/json'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.crypto_config.coingecko_api_key:
            headers['x-cg-pro-api-key'] = self.crypto_config.coingecko_api_key
        
        return headers
    
    async def close(self):
        """üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
        
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.price_cache.clear()
            
            logger.info("‚Çø Crypto Service –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Crypto Service: {e}")
    
    def get_service_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        
        return {
            'cache_size': len(self.price_cache),
            'popular_coins_count': len(self.popular_coins),
            'api_key_configured': bool(self.crypto_config.coingecko_api_key),
            'service_enabled': self.crypto_config.enabled
        }


__all__ = ["CryptoService"]